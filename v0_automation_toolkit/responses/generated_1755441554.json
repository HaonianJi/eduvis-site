{
  "content": "<Thinking>\nI will now begin the planning process for generating the educational webpage.\n\n### 1. Project Structure and File Organization\n\nI'll structure this as a single-page application within a Next.js project using the App Router. The components will be modularized to keep the code clean and maintainable, following the instructions.\n\n*   `app/layout.tsx`: Root layout, setting up fonts and Tailwind CSS.\n*   `app/page.tsx`: The main entry point that assembles all the educational sections.\n*   `components/ui/`: Standard shadcn/ui components will be used. I'll need `card`, `button`, `accordion`, `input`, `separator`, and `slider`.\n*   `components/icons.tsx`: A single file to hold custom SVG icon components for chemistry-related visuals (beaker, flask, scale, etc.) to keep the main components cleaner.\n*   `components/educational/IntroductionSection.tsx`: The initial component to set the real-world context.\n*   `components/educational/CoreProblemSection.tsx`: The main component that breaks down the core problem using the F.O.P.S. strategy.\n*   `components/educational/InteractiveRatioVisualizer.tsx`: A key client-side component for the Concrete-Representational-Abstract (CRA) approach, allowing students to visualize the mass ratio.\n*   `components/educational/TransferProblemsSection.tsx`: A client-side component containing the near-transfer and far-transfer problems in an accordion, with interactive solving elements.\n*   `components/educational/MetacognitionChecklist.tsx`: A simple component with a checklist to prompt self-monitoring.\n*   `lib/utils.ts`: The standard `cn` utility from shadcn.\n*   `public/`: This directory won't be needed as I will define the SVG icons directly as React components in `components/icons.tsx`.\n\n### 2. Styling and Visual Design\n\n*   **Framework**: Tailwind CSS.\n*   **Component Library**: I will use shadcn/ui for pre-built, accessible components. This ensures a professional and clean look.\n*   **Color Palette**: I'll use a neutral color scheme with a primary accent color (e.g., a calm blue or green) for interactive elements and headings to create a focused learning environment. I will avoid indigo and stick to a more neutral palette.\n*   **Typography**: I'll use clear, readable fonts from `next/font`.\n*   **Layout**: The page will be a single-column, responsive layout, centered with a `max-width` for optimal readability on larger screens. I'll use cards and separators to visually divide the content into logical sections.\n*   **Visuals**: I will create simple, custom SVG icons for beakers, scales, and gas cylinders. This is better than using generic stock images and adds to the educational feel. These will be included in `components/icons.tsx`.\n\n### 3. Content and Pedagogical Flow\n\nThe webpage will follow the user's requested instructional structure precisely.\n\n1.  **Introduction (`IntroductionSection.tsx`)**:\n    *   **Context**: Start with a relatable scenario: a junior chemist in a pharmaceutical lab trying to scale up a reaction to produce a new medicine.\n    *   **Visuals**: Use the custom SVG icons (lab bench, beaker) to make the context tangible.\n    *   **CRA (Concrete)**: Describe the physical observation: \"mixing a white powder (Reactant A) creates purple crystals (Product P).\"\n\n2.  **Core Problem (`CoreProblemSection.tsx`)**:\n    *   **Problem Statement**: Clearly state the given problem.\n    *   **F.O.P.S. Strategy**: Break down the solution into four distinct steps using cards or styled sections.\n        *   **F (Find)**: Identify the core principle (Law of Definite Proportions).\n        *   **O (Organize)**: Use a table or list to organize knowns and unknowns. This is where the `InteractiveRatioVisualizer.tsx` will be embedded.\n        *   **P (Plan)**: Outline the two-step calculation plan.\n        *   **S (Solve)**: Show the step-by-step math clearly.\n    *   **CRA Transition**:\n        *   **Representational**: The `InteractiveRatioVisualizer` will serve this purpose, linking the abstract ratio to a visual model.\n        *   **Abstract**: The final symbolic calculation in the \"Solve\" step completes the CRA sequence.\n\n3.  **Interactivity (`InteractiveRatioVisualizer.tsx`)**:\n    *   This component will be marked with `\"use client\"`.\n    *   It will feature a `Slider` for the mass of Reactant A.\n    *   Visual bars or blocks will represent the masses of Reactant A and Product P.\n    *   As the slider moves, the Product P bar and a numerical display will update in real-time based on the 4:1 ratio, making the concept of proportionality interactive and intuitive.\n\n4.  **Transfer Problems (`TransferProblemsSection.tsx`)**:\n    *   This will be a client component (`\"use client\"`) to manage the state of user inputs and solution visibility.\n    *   An `Accordion` will be used to separate the Near and Far Transfer problems, preventing cognitive overload.\n    *   **Near-Transfer**: A problem with the same structure but different numbers and substances. It will include an `Input` for the user's answer and a `Button` to reveal the solution.\n    *   **Far-Transfer (Gas Law)**: A problem with a different context but the same underlying inverse relationship model. It will also have an interactive input/button. Hints will guide the student to see the structural similarity.\n\n5.  **Metacognition (`MetacognitionChecklist.tsx`)**:\n    *   This will be placed strategically after the core problem is solved.\n    *   It will feature a simple checklist with prompts like \"Is my equation balanced?\", \"Have I used the correct mole ratios?\", and \"Does my final answer make sense?\" to encourage self-reflection.\n\n### 4. Accessibility and Best Practices\n\n*   Use semantic HTML (`<main>`, `<section>`, `<h1>`, `<h2>`, etc.).\n*   Ensure all interactive elements (`button`, `input`, `slider`) have proper labels and are keyboard-navigable, which is handled well by shadcn/ui.\n*   Use `aria-` attributes where necessary.\n*   Icons will be decorative (`aria-hidden=\"true\"`) or have appropriate labels if they convey meaning.\n*   The design will be responsive for various screen sizes.\n*   All code will adhere to the provided rules, such as using the App Router and including `\"use client\"` where needed.\n\nThis plan establishes a clear path to creating a comprehensive, interactive, and pedagogically sound educational webpage that meets all the user's requirements.\n\n</Thinking>\n```\nnpx create-next-app@latest . --typescript --eslint --tailwind --app --turbopack --yes\nnpx shadcn-ui@latest init\nnpx shadcn-ui@latest add card button accordion input separator slider label\n```\n\nHere is the complete code for the educational webpage.\n\n### `app/layout.tsx`\n\n```tsx file=\"app/layout.tsx\"\nimport type { Metadata } from \"next\";\nimport { Inter } from \"next/font/google\";\nimport \"./globals.css\";\nimport { cn } from \"@/lib/utils\";\n\nconst inter = Inter({ subsets: [\"latin\"], variable: \"--font-sans\" });\n\nexport const metadata: Metadata = {\n  title: \"Chemistry Problem Solver\",\n  description: \"An interactive guide to mastering chemical ratios and scientific modeling.\",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body\n        className={cn(\n          \"min-h-screen bg-background font-sans antialiased\",\n          inter.variable\n        )}\n      >\n        {children}\n      </body>\n    </html>\n  );\n}\n```\n\n### `app/page.tsx`\n\n```tsx file=\"app/page.tsx\"\nimport { IntroductionSection } from \"@/components/educational/IntroductionSection\";\nimport { CoreProblemSection } from \"@/components/educational/CoreProblemSection\";\nimport { TransferProblemsSection } from \"@/components/educational/TransferProblemsSection\";\nimport { Separator } from \"@/components/ui/separator\";\n\nexport default function Home() {\n  return (\n    <main className=\"flex flex-col items-center p-4 md:p-8 lg:p-12 bg-slate-50\">\n      <div className=\"w-full max-w-4xl space-y-12\">\n        <header className=\"text-center space-y-2\">\n          <h1 className=\"text-3xl md:text-4xl font-bold tracking-tight text-slate-800\">\n            Mastering Chemical Ratios\n          </h1>\n          <p className=\"text-lg text-slate-600\">\n            From Lab Bench Observations to Abstract Scientific Models\n          </p>\n        </header>\n\n        <IntroductionSection />\n        <Separator />\n        <CoreProblemSection />\n        <Separator />\n        <TransferProblemsSection />\n\n        <footer className=\"text-center text-slate-500 py-8\">\n          <p>&copy; 2024 Vercel Labs. All rights reserved.</p>\n        </footer>\n      </div>\n    </main>\n  );\n}\n```\n\n### `components/icons.tsx`\n\n```tsx file=\"components/icons.tsx\"\nimport React from 'react';\n\nexport const LabBenchIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" {...props}>\n    <path d=\"M22 18h-2.12a2 2 0 0 0-1.79 1.11L16 23h-2.12a2 2 0 0 1-1.79-1.11L10 17H6.5a2.5 2.5 0 0 1 0-5H10l2.11-4.89A2 2 0 0 1 13.88 6H16l2.11 4.89a2 2 0 0 0 1.79 1.11H22\" />\n    <path d=\"M4 12H2\" />\n    <path d=\"M14 12h8\" />\n    <path d=\"M12 12V2.5a1.5 1.5 0 0 0-3 0V12\" />\n  </svg>\n);\n\nexport const BeakerIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" {...props}>\n    <path d=\"M4.5 3h15\" />\n    <path d=\"M6 3v16a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V3\" />\n    <path d=\"M6 14h12\" />\n  </svg>\n);\n\nexport const FlaskConicalIcon = (props: React.SVGProps<SVGSVGElement>) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" {...props}>\n    <path d=\"M8.5 2h7\" />\n    <path d=\"M12 2v7.5\" />\n    <path d=\"m5 21 1.6-11.2a1 1 0 0 1 .95-.8h9a1 1 0 0 1 .95.8L19 21\" />\n    <path d=\"M7 15h10\" />\n  </svg>\n);\n\nexport const ScaleIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" {...props}>\n    <path d=\"m16 16 3-8 3 8c-.83.5-1.9.8-3 .8s-2.17-.3-3-.8Z\" />\n    <path d=\"m2 16 3-8 3 8c-.83.5-1.9.8-3 .8s-2.17-.3-3-.8Z\" />\n    <path d=\"M7 21h10\" />\n    <path d=\"M12 3v18\" />\n    <path d=\"M3 7h2\" />\n    <path d=\"M19 7h2\" />\n  </svg>\n);\n\nexport const GasCylinderIcon = (props: React.SVGProps<SVGSVGElement>) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" {...props}>\n        <path d=\"M16 8.4a2 2 0 0 0-1-1.73l-5-2.88a2 2 0 0 0-2 0l-5 2.88a2 2 0 0 0-1 1.73V15.6a2 2 0 0 0 1 1.73l5 2.88a2 2 0 0 0 2 0l5-2.88a2 2 0 0 0 1-1.73Z\" />\n        <path d=\"M9 15.5V18\" /><path d=\"m15 15.5 2.5 2.5\" />\n        <path d=\"M12 2v2.5\" />\n        <path d=\"m11.8 13-2.3 1.3\" />\n        <path d=\"M12 8.5V11\" />\n    </svg>\n);\n\nexport const CheckCircleIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" {...props}>\n    <path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\" />\n    <polyline points=\"22 4 12 14.01 9 11.01\" />\n  </svg>\n);\n```\n\n### `components/educational/IntroductionSection.tsx`\n\n```tsx file=\"components/educational/IntroductionSection.tsx\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { BeakerIcon, FlaskConicalIcon, LabBenchIcon } from \"@/components/icons\";\n\nexport function IntroductionSection() {\n  return (\n    <section>\n      <Card className=\"bg-white shadow-md\">\n        <CardHeader>\n          <div className=\"flex items-center gap-4\">\n            <LabBenchIcon className=\"w-8 h-8 text-blue-600\" />\n            <CardTitle className=\"text-2xl text-slate-700\">The Scenario: In the Pharma Lab</CardTitle>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-4 text-slate-600\">\n          <p>\n            Imagine you're a chemist working to synthesize a new medicine. You've discovered a key reaction where a simple white powder, \"Reactant A,\" transforms into valuable purple crystals, \"Product P.\"\n          </p>\n          <div className=\"flex items-center justify-around p-6 bg-slate-100 rounded-lg\">\n            <div className=\"text-center\">\n              <BeakerIcon className=\"w-16 h-16 text-slate-500 mx-auto\" />\n              <p className=\"font-semibold mt-2\">Reactant A</p>\n              <p className=\"text-sm\">(White Powder)</p>\n            </div>\n            <div className=\"text-3xl font-bold text-slate-400\">→</div>\n            <div className=\"text-center\">\n              <FlaskConicalIcon className=\"w-16 h-16 text-purple-600 mx-auto\" />\n              <p className=\"font-semibold mt-2\">Product P</p>\n              <p className=\"text-sm\">(Purple Crystals)</p>\n            </div>\n          </div>\n          <p>\n            Your first small-scale experiment was a success! Now, your team needs to know how to scale up production. To do that, you need to understand the exact relationship between the amount of reactant you use and the amount of product you get. This is the heart of stoichiometry.\n          </p>\n        </CardContent>\n      </Card>\n    </section>\n  );\n}\n```\n\n### `components/educational/CoreProblemSection.tsx`\n\n```tsx file=\"components/educational/CoreProblemSection.tsx\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ScaleIcon } from \"@/components/icons\";\nimport { InteractiveRatioVisualizer } from \"./InteractiveRatioVisualizer\";\nimport { MetacognitionChecklist } from \"./MetacognitionChecklist\";\n\nexport function CoreProblemSection() {\n  return (\n    <section className=\"space-y-8\">\n      <Card className=\"bg-white shadow-md\">\n        <CardHeader>\n          <CardTitle className=\"text-2xl text-slate-700\">The Core Problem</CardTitle>\n          <CardDescription className=\"text-lg\">\n            A reaction produces <span className=\"font-bold text-purple-600\">12.0 g of Product P</span> when <span className=\"font-bold text-slate-800\">3.0 g of Reactant A</span> is used. How much product will form from <span className=\"font-bold text-slate-800\">7.5 g of Reactant A</span>?\n          </CardDescription>\n        </CardHeader>\n      </Card>\n      \n      <h2 className=\"text-2xl font-semibold text-center text-slate-700\">Let's Solve It With F.O.P.S.</h2>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>1. Find the Principle</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p>The core chemical idea is the <span className=\"font-semibold\">Law of Definite Proportions</span>. This means that a chemical compound always contains its component elements in a fixed ratio by mass. The ratio of Product P to Reactant A is constant!</p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader>\n            <CardTitle>2. Organize the Data</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ul className=\"list-disc list-inside space-y-1\">\n              <li><b>Known Experiment:</b> 3.0 g A → 12.0 g P</li>\n              <li><b>New Scenario:</b> 7.5 g A → ? g P</li>\n              <li><b>Goal:</b> Find the mass of P in the new scenario.</li>\n            </ul>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>3. Plan the Approach</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ol className=\"list-decimal list-inside space-y-1\">\n              <li>Calculate the mass ratio (Product P : Reactant A) from the known experiment.</li>\n              <li>Apply this constant ratio to the new amount of Reactant A to find the mass of Product P.</li>\n            </ol>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>4. Solve Step-by-Step</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"font-semibold\">Step 1: Find the Ratio</p>\n            <code className=\"block bg-slate-100 p-2 rounded-md my-2\">12.0 g P / 3.0 g A = 4</code>\n            <p>The mass ratio is 4:1. For every 1 gram of A, we get 4 grams of P.</p>\n            <p className=\"font-semibold mt-4\">Step 2: Apply the Ratio</p>\n            <code className=\"block bg-slate-100 p-2 rounded-md my-2\">7.5 g A * 4 = 30.0 g P</code>\n            <p className=\"font-bold text-green-600\">Answer: 30.0 g of Product P will be formed.</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <InteractiveRatioVisualizer />\n      <MetacognitionChecklist />\n    </section>\n  );\n}\n```\n\n### `components/educational/InteractiveRatioVisualizer.tsx`\n\n```tsx file=\"components/educational/InteractiveRatioVisualizer.tsx\"\n'use client'\n\nimport { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Label } from \"@/components/ui/label\";\n\nexport function InteractiveRatioVisualizer() {\n  const [reactantMass, setReactantMass] = useState(3.0);\n  const ratio = 4;\n  const productMass = reactantMass * ratio;\n\n  return (\n    <Card className=\"bg-white shadow-md\">\n      <CardHeader>\n        <CardTitle className=\"text-xl text-slate-700\">Visualize the 4:1 Ratio</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <p className=\"mb-4 text-slate-600\">\n          Use the slider to see how changing the amount of Reactant A affects the amount of Product P. This is the Concrete/Representational step in action!\n        </p>\n        <div className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"reactant-slider\" className=\"font-semibold\">Reactant A Mass: {reactantMass.toFixed(1)} g</Label>\n            <Slider\n              id=\"reactant-slider\"\n              min={0}\n              max={10}\n              step={0.5}\n              value={[reactantMass]}\n              onValueChange={(value) => setReactantMass(value[0])}\n              className=\"mt-2\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n             <div className=\"flex items-center gap-4\">\n                <Label className=\"w-28\">Reactant A:</Label>\n                <div className=\"h-6 bg-slate-400 rounded\" style={{ width: `${reactantMass * 10}%` }}></div>\n             </div>\n             <div className=\"flex items-center gap-4\">\n                <Label className=\"w-28\">Product P:</Label>\n                <div className=\"h-6 bg-purple-600 rounded\" style={{ width: `${productMass * 2.5}%` }}></div>\n             </div>\n          </div>\n\n          <div className=\"text-center font-bold text-lg p-4 bg-slate-100 rounded-md\">\n            Product P Mass = {productMass.toFixed(1)} g\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n```\n\n### `components/educational/MetacognitionChecklist.tsx`\n\n```tsx file=\"components/educational/MetacognitionChecklist.tsx\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { CheckCircleIcon } from \"@/components/icons\";\n\nexport function MetacognitionChecklist() {\n  return (\n    <Card className=\"bg-white shadow-md\">\n      <CardHeader>\n        <CardTitle className=\"text-xl text-slate-700\">Check Your Thinking</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        <p className=\"text-slate-600\">Good scientists always pause to reflect. Before moving on, ask yourself:</p>\n        <div className=\"flex items-center gap-3\">\n          <CheckCircleIcon className=\"w-5 h-5 text-green-600\" />\n          <span>What was the core principle I needed to solve this?</span>\n        </div>\n        <div className=\"flex items-center gap-3\">\n          <CheckCircleIcon className=\"w-5 h-5 text-green-600\" />\n          <span>Did I organize the knowns and unknowns clearly?</span>\n        </div>\n        <div className=\"flex items-center gap-3\">\n          <CheckCircleIcon className=\"w-5 h-5 text-green-600\" />\n          <span>Does my final answer make sense? (e.g., more reactant should yield more product).</span>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n```\n\n### `components/educational/TransferProblemsSection.tsx`\n\n```tsx file=\"components/educational/TransferProblemsSection.tsx\"\n'use client'\n\nimport { useState } from \"react\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { GasCylinderIcon } from \"../icons\";\n\nexport function TransferProblemsSection() {\n  const [nearAnswer, setNearAnswer] = useState(\"\");\n  const [showNearSolution, setShowNearSolution] = useState(false);\n  \n  const [farAnswer, setFarAnswer] = useState(\"\");\n  const [showFarSolution, setShowFarSolution] = useState(false);\n  \n  return (\n    <section>\n      <Card className=\"bg-white shadow-md\">\n        <CardHeader>\n          <CardTitle className=\"text-2xl text-slate-700\">Build Your Skills: Transfer Problems</CardTitle>\n          <CardDescription>\n            True understanding means you can apply a concept in new situations. Let's test your skills.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Accordion type=\"single\" collapsible className=\"w-full\">\n            <AccordionItem value=\"item-1\">\n              <AccordionTrigger className=\"text-lg font-semibold\">📌 Near-Transfer Problem</AccordionTrigger>\n              <AccordionContent className=\"pt-4 space-y-4\">\n                <p><strong>(Same structure, different content)</strong></p>\n                <p>In a different process, making compound Z from reactant Y, you find that 5.0 g of Y produces 15.0 g of Z. How much Z can be made from 12.0 g of Y?</p>\n                <div className=\"flex items-center gap-2\">\n                  <Input \n                    type=\"number\" \n                    placeholder=\"Your Answer (in g)\" \n                    value={nearAnswer}\n                    onChange={(e) => setNearAnswer(e.target.value)}\n                  />\n                  <Button onClick={() => setShowNearSolution(true)}>Show Solution</Button>\n                </div>\n                {showNearSolution && (\n                  <div className=\"p-4 bg-slate-50 rounded-md space-y-2 animate-in fade-in\">\n                    <p><span className=\"font-semibold\">1. Find Ratio:</span> 15.0 g Z / 5.0 g Y = 3. The ratio is 3:1.</p>\n                    <p><span className=\"font-semibold\">2. Apply Ratio:</span> 12.0 g Y * 3 = 36.0 g Z.</p>\n                    <p className=\"font-bold text-green-600\">Correct Answer: 36.0 g</p>\n                  </div>\n                )}\n              </AccordionContent>\n            </AccordionItem>\n            <AccordionItem value=\"item-2\">\n              <AccordionTrigger className=\"text-lg font-semibold\">📌 Far-Transfer Problem</AccordionTrigger>\n              <AccordionContent className=\"pt-4 space-y-4\">\n                <div className=\"flex items-start gap-4\">\n                  <GasCylinderIcon className=\"w-12 h-12 text-blue-600 mt-1 flex-shrink-0\" />\n                  <div>\n                    <p><strong>(Different surface, same underlying structure)</strong></p>\n                    <p>A gas occupies 10.0 L at 2.0 atm. What was its original volume if it was compressed to 4.0 atm? (Assume constant temperature).</p>\n                    <p className=\"text-sm text-slate-500 mt-1\">Hint: This is also about a constant relationship! Boyle's Law (P₁V₁ = P₂V₂) shows an inverse proportion. The product of P and V is constant.</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Input \n                    type=\"number\" \n                    placeholder=\"Your Answer (in L)\" \n                    value={farAnswer}\n                    onChange={(e) => setFarAnswer(e.target.value)}\n                  />\n                  <Button onClick={() => setShowFarSolution(true)}>Show Solution</Button>\n                </div>\n                 {showFarSolution && (\n                  <div className=\"p-4 bg-slate-50 rounded-md space-y-2 animate-in fade-in\">\n                    <p><span className=\"font-semibold\">1. Find the Constant (P₁V₁):</span> 2.0 atm * 10.0 L = 20.0 L·atm.</p>\n                    <p><span className=\"font-semibold\">2. Apply the Constant (V₂ = P₁V₁ / P₂):</span> 20.0 L·atm / 4.0 atm = 5.0 L.</p>\n                    <p className=\"font-bold text-green-600\">Correct Answer: 5.0 L</p>\n                  </div>\n                )}\n              </AccordionContent>\n            </AccordionItem>\n          </Accordion>\n        </CardContent>\n      </Card>\n    </section>\n  );\n}\n```"
}