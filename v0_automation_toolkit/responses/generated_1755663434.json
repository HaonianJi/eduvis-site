{
  "content": "<Thinking>\nI need to create a webpage that teaches a specific chemistry problem while building scientific modeling and transfer skills.\n\n**1. The Chemistry Problem:**\nThe user did not provide a specific problem. I will create one that is a good fit for the requested instructional design. A classic stoichiometry problem involving a gas is perfect because it connects mass, moles, and volume, allowing for rich visual and conceptual representations.\n\n**Problem:** \"In a classic ‘volcano’ experiment, a student mixes 10.0 g of baking soda (sodium bicarbonate, NaHCO₃) with excess vinegar (acetic acid, CH₃COOH). The reaction produces carbon dioxide gas, water, and sodium acetate. What volume of carbon dioxide gas (CO₂) is produced at Standard Temperature and Pressure (STP)?\"\n\nThis problem is relatable, visually interesting (volcano), and hits key chemistry concepts.\n\n**2. Project Structure & File Breakdown:**\nI'll use Next.js with the App Router and TypeScript. I'll keep components lean and focused.\n\n*   `app/layout.tsx`: Root layout with basic HTML structure and font setup.\n*   `app/page.tsx`: The main page component. This will orchestrate the layout of the different instructional sections. It will be a Server Component.\n*   `components/PageHeader.tsx`: A simple component for the main title and introduction.\n*   `components/ContextualIntroduction.tsx`: Section 1. This will introduce the \"volcano\" scenario with visuals.\n*   `components/ConceptualModel.tsx`: Section 2 (CRA). This will be a tabbed component to switch between Concrete (simulation), Representational (diagrams), and Abstract (equation).\n    *   This will contain a client component for the interactive simulation.\n*   `components/ProblemSolvingGuide.tsx`: Section 3 (F.O.P.S.). This will use an accordion or tabs to walk through the Find, Organize, Plan, Solve steps. It will also include metacognitive prompts.\n*   `components/TransferPractice.tsx`: Section 4 (Transfer Problems). This will be an interactive client component with tabs for the Near-Transfer and Far-Transfer problems, including input fields and \"Check Answer\" buttons.\n*   `components/ui/`: I'll need several shadcn/ui components: `card`, `button`, `tabs`, `accordion`, `input`, `label`. I'll write the code for these as if they've been generated.\n*   `lib/utils.ts`: Standard `cn` utility function for Tailwind CSS class merging.\n*   `public/`: I'll use placeholders for images. For icons, I'll use `lucide-react`.\n\n**3. Styling and Visuals:**\n*   **Framework:** Tailwind CSS.\n*   **Component Library:** shadcn/ui. I'll generate the code for the necessary components.\n*   **Color Palette:** I'll use a warm, engaging palette, avoiding blues/indigos. Something like slate gray, orange, and beige would fit the \"volcano\" theme and be educational.\n*   **Layout:** A single-column, responsive layout that flows logically from one section to the next. I'll use `Card` components to visually group related content.\n*   **Visuals:**\n    *   I'll use `lucide-react` for icons (e.g., `Beaker`, `FlaskConical`, `Lightbulb`).\n    *   For diagrams and illustrations, I'll use placeholder images from a service like `https://placehold.co` with descriptive alt text, indicating where real illustrations would go. Examples:\n        *   A cartoon student with a volcano model.\n        *   A particle-level diagram of the reaction.\n        *   A diagram of the lab setup.\n\n**4. Interactivity (`\"use client\"` components):**\n*   **`ConceptualModel.tsx`:** The interactive simulation part will need `useState` to control a slider for the amount of baking soda and display the resulting \"eruption\" size. The tabs themselves are also client-side.\n*   **`TransferPractice.tsx`:** This component will manage the state for user inputs in the near and far transfer problems, compare them to the correct answer, and show feedback (`useState`).\n\n**5. Instructional Design Implementation:**\n*   **Context:** `ContextualIntroduction.tsx` will set the scene with the volcano experiment, using an image and clear, engaging text.\n*   **CRA (Concrete-Representational-Abstract):**\n    *   **Concrete:** The interactive simulation where a user can change an input and see a visual output.\n    *   **Representational:** A tab with particle diagrams and the balanced chemical equation.\n    *   **Abstract:** The final tab leading into the symbolic calculations in the F.O.P.S. section.\n*   **F.O.P.S. (Find, Organize, Plan, Solve):** `ProblemSolvingGuide.tsx` will use an `Accordion` component. Each item in the accordion will correspond to a step in F.O.P.S., revealing the process incrementally.\n*   **Metacognition:** I'll embed blockquotes with a lightbulb icon within the F.O.P.S. section to highlight metacognitive questions like \"What principle applies here?\" and \"Does my answer make sense?\".\n*   **Near-Transfer Problem:** I'll create a problem that is structurally identical (mass of solid -> moles -> mole ratio -> volume of gas at STP) but with different reactants (e.g., Mg + HCl -> H₂).\n*   **Far-Transfer Problem:** I'll create a problem that uses the same core logic of proportional reasoning but in a completely different, non-chemistry context (e.g., a baking recipe). This tests the abstraction of the ratio concept.\n\n**6. Accessibility:**\n*   Use semantic HTML (`<main>`, `<section>`, `<h1>`, `<h2>`, etc.).\n*   Provide `alt` text for all images.\n*   Use `aria-label` for interactive elements where necessary.\n*   Ensure sufficient color contrast.\n*   Use `sr-only` for any text that should only be available to screen readers.\n\nBy following this plan, I can create a comprehensive, instructionally sound, and engaging webpage that fulfills all the user's requirements. The code will be well-structured, clean, and follow Next.js best practices.\n\n</Thinking>\n\n```bash\nnpx create-next-app@latest . --typescript --eslint --tailwind --app --turbopack --yes\nnpx shadcn-ui@latest init\n# Accept defaults\n# Run the following to add components:\nnpx shadcn-ui@latest add card button tabs accordion input label\n# Install lucide-react for icons\nnpm install lucide-react\n```\n\nHere is the code for the educational webpage.\n\n### Project Structure\n\n```\n.\n├── app\n│   ├── layout.tsx\n│   └── page.tsx\n├── components\n│   ├── ConceptualModel.tsx\n│   ├── ContextualIntroduction.tsx\n│   ├── PageHeader.tsx\n│   ├── ProblemSolvingGuide.tsx\n│   ├── TransferPractice.tsx\n│   └── ui\n│       ├── accordion.tsx\n│       ├── button.tsx\n│       ├── card.tsx\n│       ├── input.tsx\n│       ├── label.tsx\n│       └── tabs.tsx\n├── lib\n│   └── utils.ts\n└── tailwind.config.ts\n```\n\n### `tailwind.config.ts`\n\nConfigure the theme colors to avoid blue/indigo.\n\n```ts file=\"tailwind.config.ts\"\nimport type { Config } from \"tailwindcss\"\n\nconst config = {\n  darkMode: [\"class\"],\n  content: [\n    './pages/**/*.{ts,tsx}',\n    './components/**/*.{ts,tsx}',\n    './app/**/*.{ts,tsx}',\n    './src/**/*.{ts,tsx}',\n\t],\n  prefix: \"\",\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      colors: {\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n} satisfies Config\n\nexport default config\n```\n\n### `lib/utils.ts`\n\nThis is the standard utility file from shadcn/ui.\n\n```ts file=\"lib/utils.ts\"\nimport { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n```\n\n### UI Components\n\nThese are the standard components generated by shadcn/ui.\n\n```tsx file=\"components/ui/accordion.tsx\"\n\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n```\n\n```tsx file=\"components/ui/button.tsx\"\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n```\n\n```tsx file=\"components/ui/card.tsx\"\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter }\n```\n\n```tsx file=\"components/ui/input.tsx\"\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n```\n\n```tsx file=\"components/ui/label.tsx\"\n\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n```\n\n```tsx file=\"components/ui/tabs.tsx\"\n\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n```\n\n### Core Application Components\n\nThese are the custom components that structure the educational content.\n\n```tsx file=\"components/PageHeader.tsx\"\nimport { FlaskConical } from \"lucide-react\"\n\nexport default function PageHeader() {\n  return (\n    <header className=\"mb-8 text-center\">\n      <div className=\"inline-flex items-center gap-4\">\n        <FlaskConical className=\"h-12 w-12 text-orange-500\" />\n        <h1 className=\"text-4xl font-bold tracking-tight\">Chemistry Problem Solver</h1>\n      </div>\n      <p className=\"mt-2 text-lg text-muted-foreground\">\n        From Concrete Observations to Abstract Reasoning\n      </p>\n    </header>\n  )\n}\n```\n\n```tsx file=\"components/ContextualIntroduction.tsx\"\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\"\n\nexport default function ContextualIntroduction() {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>The Challenge: The Volcano Experiment</CardTitle>\n        <CardDescription>\n          Let's start with a familiar and fun lab scenario.\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"grid md:grid-cols-2 gap-6 items-center\">\n        <div>\n          <img\n            src=\"https://placehold.co/600x400/FFF0E0/333333?text=Student+with+Volcano+Model\"\n            alt=\"A cartoon student smiling next to a model volcano experiment.\"\n            className=\"rounded-lg\"\n          />\n        </div>\n        <div className=\"space-y-4\">\n          <p className=\"font-semibold text-lg\">The Problem:</p>\n          <blockquote className=\"border-l-4 pl-4 italic\">\n            \"In a classic ‘volcano’ experiment, a student mixes 10.0 g of baking soda (sodium bicarbonate, NaHCO₃) with excess vinegar (acetic acid, CH₃COOH). The reaction produces carbon dioxide gas, water, and sodium acetate. What volume of carbon dioxide gas (CO₂) is produced at Standard Temperature and Pressure (STP)?\"\n          </blockquote>\n          <p>\n            This problem asks us to connect the amount of a solid reactant to the volume of a gas product. Let's break it down!\n          </p>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n```\n\n```tsx file=\"components/ConceptualModel.tsx\"\n'use client'\n\nimport { useState } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Label } from \"@/components/ui/label\"\nimport { Beaker } from \"lucide-react\"\n\nexport default function ConceptualModel() {\n  const [bakingSoda, setBakingSoda] = useState(10)\n  const eruptionHeight = Math.min(bakingSoda * 10, 150)\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Building Our Understanding (C-R-A)</CardTitle>\n        <CardDescription>\n          Let's move from the real world to the chemical world.\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <Tabs defaultValue=\"concrete\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"concrete\">1. Concrete</TabsTrigger>\n            <TabsTrigger value=\"representational\">2. Representational</TabsTrigger>\n            <TabsTrigger value=\"abstract\">3. Abstract</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"concrete\" className=\"mt-4\">\n            <h3 className=\"font-semibold mb-2\">Interactive Simulation</h3>\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              See what happens! Adjust the amount of baking soda and watch the volcano erupt. This is the observable phenomenon.\n            </p>\n            <div className=\"flex flex-col md:flex-row gap-8 items-center justify-center p-6 bg-slate-100 dark:bg-slate-800 rounded-lg\">\n              <div className=\"w-full md:w-1/3 space-y-4\">\n                <Label htmlFor=\"baking-soda-slider\">Amount of Baking Soda (g)</Label>\n                <input\n                  id=\"baking-soda-slider\"\n                  type=\"range\"\n                  min=\"1\"\n                  max=\"15\"\n                  step=\"0.5\"\n                  value={bakingSoda}\n                  onChange={(e) => setBakingSoda(parseFloat(e.target.value))}\n                  className=\"w-full h-2 bg-slate-200 rounded-lg appearance-none cursor-pointer dark:bg-slate-700\"\n                />\n                <div className=\"text-center font-bold text-lg\">{bakingSoda.toFixed(1)} g</div>\n              </div>\n              <div className=\"flex flex-col items-center\">\n                <div className=\"relative w-40 h-40\">\n                  <Beaker className=\"w-full h-full text-slate-500\" />\n                  <div \n                    className=\"absolute bottom-2 left-1/2 -translate-x-1/2 w-16 bg-orange-500 rounded-t-full transition-all duration-300\"\n                    style={{ height: `${eruptionHeight}px` }}\n                    aria-label={`Eruption height representing ${bakingSoda.toFixed(1)} grams of baking soda.`}\n                  ></div>\n                </div>\n                <p className=\"mt-2 text-sm font-medium\">CO₂ Gas Production</p>\n              </div>\n            </div>\n          </TabsContent>\n          \n          <TabsContent value=\"representational\" className=\"mt-4\">\n            <h3 className=\"font-semibold mb-2\">Particle-Level View</h3>\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              What's happening to the atoms and molecules? We use diagrams and equations to represent the change.\n            </p>\n             <img\n              src=\"https://placehold.co/800x300/E2E8F0/333333?text=Particle+Diagram+of+Reaction\"\n              alt=\"A diagram showing sodium bicarbonate and acetic acid molecules on the left, with an arrow pointing to sodium acetate, water, and carbon dioxide molecules on the right.\"\n              className=\"rounded-lg w-full\"\n            />\n          </TabsContent>\n\n          <TabsContent value=\"abstract\" className=\"mt-4\">\n            <h3 className=\"font-semibold mb-2\">Symbolic Equation</h3>\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              Chemists use a universal symbolic language to describe reactions. This balanced equation is our key to solving the problem.\n            </p>\n            <div className=\"p-4 bg-slate-100 dark:bg-slate-800 rounded-lg text-center\">\n              <p className=\"text-lg font-mono\">\n                NaHCO₃(aq) + CH₃COOH(aq) → NaCH₃COO(aq) + H₂O(l) + CO₂(g)\n              </p>\n              <p className=\"text-sm mt-2\">\n                This tells us that for every <strong>1 mole</strong> of baking soda, we produce <strong>1 mole</strong> of carbon dioxide. This <strong>1:1 ratio</strong> is crucial!\n              </p>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </CardContent>\n    </Card>\n  )\n}\n```\n\n```tsx file=\"components/ProblemSolvingGuide.tsx\"\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\"\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\"\nimport { Lightbulb } from \"lucide-react\"\n\nexport default function ProblemSolvingGuide() {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Guided Problem Solving (F.O.P.S.)</CardTitle>\n        <CardDescription>\n          A structured approach to tackle any chemistry problem.\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <Accordion type=\"single\" collapsible className=\"w-full\">\n          <AccordionItem value=\"item-1\">\n            <AccordionTrigger className=\"text-lg font-semibold\">F - Find the Principle</AccordionTrigger>\n            <AccordionContent className=\"space-y-4\">\n              <p>First, identify the core chemical concept. The problem connects the mass of a reactant to the volume of a gas product.</p>\n              <div className=\"flex items-start gap-3 p-3 bg-amber-50 dark:bg-amber-900/20 rounded-lg\">\n                <Lightbulb className=\"h-5 w-5 mt-1 text-amber-500\" />\n                <div>\n                  <h4 className=\"font-semibold\">Metacognitive Check</h4>\n                  <p className=\"text-sm text-muted-foreground\">\"What kind of problem is this? It's about how much product I can make from a reactant. This sounds like <strong>stoichiometry</strong>.\"</p>\n                </div>\n              </div>\n              <p>The key principles are:\n                <ul className=\"list-disc pl-5 mt-2\">\n                  <li><strong>Stoichiometry:</strong> Using mole ratios from a balanced equation.</li>\n                  <li><strong>Ideal Gas Law at STP:</strong> Knowing that 1 mole of any gas at Standard Temperature and Pressure (0°C and 1 atm) occupies 22.4 Liters.</li>\n                </ul>\n              </p>\n            </AccordionContent>\n          </AccordionItem>\n          \n          <AccordionItem value=\"item-2\">\n            <AccordionTrigger className=\"text-lg font-semibold\">O - Organize Information</AccordionTrigger>\n            <AccordionContent className=\"space-y-4\">\n              <p>Lay out what you know and what you need to find. A table is great for this.</p>\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full text-sm text-left\">\n                  <thead className=\"bg-slate-100 dark:bg-slate-800\">\n                    <tr>\n                      <th className=\"p-2\">Category</th>\n                      <th className=\"p-2\">Value</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr className=\"border-b\">\n                      <td className=\"p-2 font-medium\">Known (Given)</td>\n                      <td className=\"p-2\">Mass of NaHCO₃ = 10.0 g</td>\n                    </tr>\n                    <tr className=\"border-b\">\n                      <td className=\"p-2 font-medium\">Needed Constants</td>\n                      <td className=\"p-2\">Molar Mass of NaHCO₃ ≈ 84.01 g/mol<br/>Volume of gas at STP = 22.4 L/mol</td>\n                    </tr>\n                    <tr className=\"border-b\">\n                      <td className=\"p-2 font-medium\">Unknown (Goal)</td>\n                      <td className=\"p-2\">Volume of CO₂ (L) at STP</td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n              <div className=\"p-4 bg-slate-100 dark:bg-slate-800 rounded-lg text-center font-mono\">\n                NaHCO₃ → CO₂ (Mole Ratio is 1:1)\n              </div>\n            </AccordionContent>\n          </AccordionItem>\n\n          <AccordionItem value=\"item-3\">\n            <AccordionTrigger className=\"text-lg font-semibold\">P - Plan Your Steps</AccordionTrigger>\n            <AccordionContent className=\"space-y-4\">\n              <p>Create a roadmap to get from the knowns to the unknown. This is our calculation pathway.</p>\n              <div className=\"text-center p-4 bg-slate-100 dark:bg-slate-800 rounded-lg\">\n                <p className=\"font-mono tracking-wider\">\n                  Mass NaHCO₃ <span className=\"text-orange-500 font-bold mx-2\">→</span> Moles NaHCO₃ <span className=\"text-orange-500 font-bold mx-2\">→</span> Moles CO₂ <span className=\"text-orange-500 font-bold mx-2\">→</span> Volume CO₂\n                </p>\n              </div>\n              <ol className=\"list-decimal pl-5 space-y-2\">\n                <li>Convert the <strong>mass</strong> of NaHCO₃ to <strong>moles</strong> using its molar mass.</li>\n                <li>Use the <strong>mole ratio</strong> from the balanced equation to find the moles of CO₂ produced.</li>\n                <li>Convert the <strong>moles</strong> of CO₂ to <strong>volume</strong> (L) using the molar volume at STP (22.4 L/mol).</li>\n              </ol>\n            </AccordionContent>\n          </AccordionItem>\n          \n          <AccordionItem value=\"item-4\">\n            <AccordionTrigger className=\"text-lg font-semibold\">S - Solve the Problem</AccordionTrigger>\n            <AccordionContent className=\"space-y-6\">\n              <div>\n                <h4 className=\"font-semibold\">Step 1: Mass → Moles NaHCO₃</h4>\n                <p className=\"text-sm font-mono p-2 bg-slate-100 dark:bg-slate-800 rounded-md mt-1\">\n                  10.0 g NaHCO₃ × (1 mol NaHCO₃ / 84.01 g NaHCO₃) = 0.119 mol NaHCO₃\n                </p>\n              </div>\n              <div>\n                <h4 className=\"font-semibold\">Step 2: Moles NaHCO₃ → Moles CO₂</h4>\n                <p className=\"text-sm font-mono p-2 bg-slate-100 dark:bg-slate-800 rounded-md mt-1\">\n                  0.119 mol NaHCO₃ × (1 mol CO₂ / 1 mol NaHCO₃) = 0.119 mol CO₂\n                </p>\n              </div>\n              <div>\n                <h4 className=\"font-semibold\">Step 3: Moles CO₂ → Volume CO₂</h4>\n                <p className=\"text-sm font-mono p-2 bg-slate-100 dark:bg-slate-800 rounded-md mt-1\">\n                  0.119 mol CO₂ × (22.4 L / 1 mol CO₂) = 2.67 L CO₂\n                </p>\n              </div>\n              <div className=\"border-t pt-4\">\n                <h4 className=\"font-semibold text-lg\">Final Answer: 2.67 L</h4>\n              </div>\n              <div className=\"flex items-start gap-3 p-3 bg-amber-50 dark:bg-amber-900/20 rounded-lg\">\n                <Lightbulb className=\"h-5 w-5 mt-1 text-amber-500\" />\n                <div>\n                  <h4 className=\"font-semibold\">Metacognitive Check</h4>\n                  <p className=\"text-sm text-muted-foreground\">\"Does this answer make sense? 10g is a small amount, so a few liters of gas seems reasonable. I've checked my units, and they cancel out correctly. The number of significant figures (3) matches the given mass.\"</p>\n                </div>\n              </div>\n            </AccordionContent>\n          </AccordionItem>\n        </Accordion>\n      </CardContent>\n    </Card>\n  )\n}\n```\n\n```tsx file=\"components/TransferPractice.tsx\"\n'use client'\n\nimport { useState } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Input } from \"@/components/ui/input\"\nimport { Button } from \"@/components/ui/button\"\nimport { Label } from \"@/components/ui/label\"\n\nexport default function TransferPractice() {\n  const [nearAnswer, setNearAnswer] = useState('')\n  const [nearFeedback, setNearFeedback] = useState('')\n  const [farAnswer, setFarAnswer] = useState('')\n  const [farFeedback, setFarFeedback] = useState('')\n\n  const checkNearAnswer = () => {\n    const userAnswer = parseFloat(nearAnswer)\n    if (Math.abs(userAnswer - 13.8) < 0.1) {\n      setNearFeedback('Correct! You correctly applied the same stoichiometric steps.')\n    } else {\n      setNearFeedback('Not quite. Remember the path: mass → moles → mole ratio → volume. Try again!')\n    }\n  }\n\n  const checkFarAnswer = () => {\n    const userAnswer = parseInt(farAnswer)\n     if (userAnswer === 42) {\n      setFarFeedback('Excellent! You recognized the underlying proportional reasoning, just like a mole ratio.')\n    } else {\n      setFarFeedback('Think about the ratio. How many times does 1 cup of flour go into 3.5 cups? Then apply that to the number of cookies.')\n    }\n  }\n  \n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Test Your Transfer Skills</CardTitle>\n        <CardDescription>\n          Apply what you've learned to new situations.\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <Tabs defaultValue=\"near\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"near\">📌 Near Transfer</TabsTrigger>\n            <TabsTrigger value=\"far\">📌 Far Transfer</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"near\" className=\"mt-4\">\n            <h3 className=\"font-semibold\">Same Structure, Different Content</h3>\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              This problem looks different but uses the exact same F.O.P.S. plan.\n            </p>\n            <div className=\"space-y-4 p-4 border rounded-lg\">\n              <p><strong>Problem:</strong> In a reaction, 15.0 g of magnesium (Mg) reacts with excess hydrochloric acid (HCl) to produce hydrogen gas (H₂). What volume of H₂ gas is produced at STP?</p>\n              <p className=\"text-sm font-mono p-2 bg-slate-100 dark:bg-slate-800 rounded-md\">Mg(s) + 2HCl(aq) → MgCl₂(aq) + H₂(g)</p>\n              <p className=\"text-xs text-muted-foreground\">Molar mass of Mg ≈ 24.31 g/mol.</p>\n              <div className=\"flex items-end gap-2\">\n                <div className=\"flex-grow\">\n                  <Label htmlFor=\"near-answer\">Your Answer (L)</Label>\n                  <Input \n                    id=\"near-answer\" \n                    type=\"number\" \n                    placeholder=\"e.g., 10.5\"\n                    value={nearAnswer}\n                    onChange={(e) => setNearAnswer(e.target.value)}\n                  />\n                </div>\n                <Button onClick={checkNearAnswer}>Check</Button>\n              </div>\n              {nearFeedback && <p className={`text-sm font-medium ${nearFeedback.startsWith('Correct') ? 'text-green-600' : 'text-red-600'}`}>{nearFeedback}</p>}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"far\" className=\"mt-4\">\n            <h3 className=\"font-semibold\">Different Surface, Same Core Logic</h3>\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              This isn't even a chemistry problem, but the reasoning is the same! Can you see the hidden structure?\n            </p>\n            <div className=\"space-y-4 p-4 border rounded-lg\">\n              <p><strong>Problem:</strong> A baker is using a recipe that calls for 1 cup of flour to make 12 cookies. If the baker has 3.5 cups of flour, how many cookies can they make, assuming they have enough of all other ingredients?</p>\n              <div className=\"flex items-end gap-2\">\n                 <div className=\"flex-grow\">\n                  <Label htmlFor=\"far-answer\">Your Answer (cookies)</Label>\n                  <Input \n                    id=\"far-answer\" \n                    type=\"number\" \n                    placeholder=\"e.g., 36\"\n                    value={farAnswer}\n                    onChange={(e) => setFarAnswer(e.target.value)}\n                  />\n                </div>\n                <Button onClick={checkFarAnswer}>Check</Button>\n              </div>\n              {farFeedback && <p className={`text-sm font-medium ${farFeedback.startsWith('Excellent') ? 'text-green-600' : 'text-red-600'}`}>{farFeedback}</p>}\n            </div>\n          </TabsContent>\n        </Tabs>\n      </CardContent>\n    </Card>\n  )\n}\n```\n\n### Main Page and Layout\n\nFinally, the root layout and the main page that brings all the components together.\n\n```tsx file=\"app/layout.tsx\"\nimport type { Metadata } from \"next\";\nimport { Inter } from \"next/font/google\";\nimport \"./globals.css\";\n\nconst inter = Inter({ subsets: [\"latin\"] });\n\nexport const metadata: Metadata = {\n  title: \"Chemistry Problem Solver\",\n  description: \"An interactive guide to solving stoichiometry problems.\",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\" className=\"dark\">\n      <body className={inter.className}>\n        <div className=\"bg-background text-foreground min-h-screen\">\n          {children}\n        </div>\n      </body>\n    </html>\n  );\n}\n```\n\n```tsx file=\"app/page.tsx\"\nimport PageHeader from \"@/components/PageHeader\"\nimport ContextualIntroduction from \"@/components/ContextualIntroduction\"\nimport ConceptualModel from \"@/components/ConceptualModel\"\nimport ProblemSolvingGuide from \"@/components/ProblemSolvingGuide\"\nimport TransferPractice from \"@/components/TransferPractice\"\n\nexport default async function Home() {\n  return (\n    <main className=\"container mx-auto px-4 py-8\">\n      <PageHeader />\n      <div className=\"space-y-8 max-w-4xl mx-auto\">\n        <section id=\"context\">\n          <h2 className=\"text-2xl font-semibold mb-4 border-b pb-2\">1. Understanding the Context</h2>\n          <ContextualIntroduction />\n        </section>\n\n        <section id=\"cra-model\">\n          <h2 className=\"text-2xl font-semibold mb-4 border-b pb-2\">2. Expressing the Information</h2>\n          <ConceptualModel />\n        </section>\n\n        <section id=\"fops-guide\">\n          <h2 className=\"text-2xl font-semibold mb-4 border-b pb-2\">3. Building a Scientific Model</h2>\n          <ProblemSolvingGuide />\n        </section>\n\n        <section id=\"transfer-practice\">\n          <h2 className=\"text-2xl font-semibold mb-4 border-b pb-2\">4. Developing Core Competencies</h2>\n          <TransferPractice />\n        </section>\n      </div>\n    </main>\n  );\n}\n```"
}