{
  "content": "<Thinking>\nThe user wants me to act as an instructional web designer to create a webpage that teaches a specific chemistry problem.\n\n**1. Define the Chemistry Problem:**\nThe user provided `<problem>` as a placeholder. I need to create a suitable, foundational chemistry problem. Stoichiometry is an excellent choice as it fits the Concrete-Representational-Abstract (CRA) model perfectly and is a cornerstone of chemistry.\n- **Main Problem:** \"In a lab experiment, a student reacts 10.0 grams of sodium bicarbonate (NaHCO₃) with excess hydrochloric acid (HCl). What mass of carbon dioxide (CO₂) gas is produced?\"\n- **Context:** A common, visually demonstrable lab reaction (fizzing). It's relatable to baking soda and vinegar.\n\n**2. Plan the Webpage Structure based on the User's Instructional Plan:**\n\n*   **Section 1: The Context (Helping Students Understand)**\n    *   **Title:** \"The Case of the Fizzing Flask: A Stoichiometry Adventure\"\n    *   **Scenario:** Introduce a student character, \"Alex,\" in a lab setting. Describe the reaction of sodium bicarbonate and HCl.\n    *   **Visuals:** Use icons for a flask, a scientist, and a balanced scale.\n    *   **CRA (Concrete):** Start by describing the observable \"fizzing\" and \"bubbling\" as CO₂ gas is produced. Connect this to the real world (baking).\n\n*   **Section 2: Representing the Reaction (Expressing Information Accurately)**\n    *   **CRA (Representational):**\n        *   Show the balanced chemical equation: `NaHCO₃(s) + HCl(aq) → NaCl(aq) + H₂O(l) + CO₂(g)`\n        *   Include a simple particle-level diagram showing reactants transforming into products.\n        *   This section bridges the gap between what is seen and how it's represented symbolically.\n\n*   **Section 3: Building the Model (Guiding Students with F.O.P.S.)**\n    *   **Introduce F.O.P.S.:** Find, Organize, Plan, Solve.\n    *   **Scaffolding:** Use an `Accordion` component from shadcn/ui. Each step (F, O, P, S) will be an accordion item. This allows students to reveal steps one by one, preventing cognitive overload.\n    *   **F (Find):** Identify the core principle: Stoichiometry, based on the law of conservation of mass.\n    *   **O (Organize):** Create a clear table of \"Knowns\" (10.0 g NaHCO₃) and \"Unknowns\" (? g CO₂).\n    *   **P (Plan):** Lay out the \"roadmap\" for calculation: `grams NaHCO₃ → moles NaHCO₃ → moles CO₂ → grams CO₂`. This is the abstract plan.\n    *   **S (Solve):** Walk through the dimensional analysis step-by-step, explaining molar mass and mole ratios.\n\n*   **Section 4: Metacognitive Check (Reinforcing Self-Monitoring)**\n    *   A visually distinct block (e.g., a callout or `Card` with a lightbulb icon).\n    *   Pose metacognitive questions: \"What was my goal?\", \"Does my answer make sense?\", \"Did I check my units?\".\n    *   Include a \"Teacher's Think Aloud\" section modeling the thought process for checking the answer's plausibility.\n\n*   **Section 5: Transfer Tasks (Building Core Competencies)**\n    *   This section needs interactivity (show/hide answers), so it must be a client component.\n    *   **Near-Transfer Problem:**\n        *   **Structure:** Same mass-to-mass stoichiometry.\n        *   **Content:** Different reaction. Let's use the synthesis of rust (iron(III) oxide) from iron.\n        *   **Problem:** \"Rusting is the reaction of iron with oxygen. If 25.0 g of iron (Fe) reacts completely, how many grams of iron(III) oxide (Fe₂O₃) are formed? The balanced equation is `4 Fe + 3 O₂ → 2 Fe₂O₃`.\"\n    *   **Far-Transfer Problem:**\n        *   **Structure:** Proportional reasoning, but different context.\n        *   **Content:** Gas laws (Boyle's Law), as suggested by the user.\n        *   **Problem:** \"A weather balloon has a volume of 150 L at sea level where the pressure is 1.0 atm. As it rises, the pressure drops to 0.25 atm. What is the new volume of the balloon, assuming the temperature is constant? (Hint: Use P₁V₁ = P₂V₂).\"\n\n**3. Frameworks and Libraries:**\n\n*   **Framework:** Next.js (App Router).\n*   **Styling:** Tailwind CSS.\n*   **UI Components:** shadcn/ui (`Card`, `Button`, `Accordion`). I will need to set this up.\n*   **Icons:** `lucide-react` for visual flair and to guide the user's attention.\n\n**4. File Structure:**\n\n*   `app/layout.tsx`: Root layout.\n*   `app/page.tsx`: Main server component containing the page structure and static content.\n*   `components/transfer-problems.tsx`: A client component (`\"use client\"`) to handle the state for showing/hiding answers for the transfer problems. This keeps the main page as a Server Component.\n*   `components/ui/`: Will contain the shadcn/ui components (`accordion.tsx`, `button.tsx`, `card.tsx`). I will generate these.\n*   `lib/utils.ts`: For `cn()` from shadcn/ui.\n*   `tailwind.config.ts`, `globals.css`: Standard Next.js/shadcn configuration.\n\n**5. Implementation Details & Caveats:**\n\n*   **Responsiveness:** The layout will use flexbox and grid to ensure it looks good on all screen sizes.\n*   **Accessibility:** Use semantic HTML (`<main>`, `<section>`, `<h2>`, etc.). The shadcn/ui components are built with accessibility in mind.\n*   **Interactivity:** The F.O.P.S. accordion and the \"Show Answer\" buttons in the transfer problems section will provide the required guided, interactive experience.\n*   **Setup:** The user needs to run `npx shadcn-ui@latest init` and then `npx shadcn-ui@latest add card button accordion` to add the necessary components. I will include this setup information in a comment.\n\nThis plan covers all the user's requirements, including the pedagogical structure (CRA, F.O.P.S.), content (main problem, near/far transfer), and technical implementation (Next.js, shadcn/ui, client/server components)."
}