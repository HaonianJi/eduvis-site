{
  "content": "Of course. I will first act as an instructional web designer to plan the project, and then I will generate the code for the educational webpage based on that plan.\n\n<Thinking>\n### Project Plan: Chemistry Stoichiometry Tutor\n\n#### 1. Project Structure & File Organization\n\nI'll create a new Next.js project using the App Router. The structure will be component-based to keep the code organized and maintainable.\n\n-   `app/layout.tsx`: Root layout for fonts and metadata.\n-   `app/page.tsx`: The main page, a Server Component that assembles the educational flow.\n-   `components/ui/`: Directory for shadcn/ui components (Card, Button, Input, Accordion).\n-   `components/icons.tsx`: A central place for custom icons or re-exported lucide-react icons.\n-   `components/page-header.tsx`: A component for the main title and introduction.\n-   `components/problem-scenario.tsx`: A component to present the initial real-world problem context (Concrete stage).\n-   `components/fops-solver.tsx`: An interactive Client Component for the step-by-step F.O.P.S. guided solution (Representational/Abstract stage).\n-   `components/transfer-tasks.tsx`: An interactive Client Component with an accordion for the Near and Far Transfer problems.\n-   `components/conclusion.tsx`: A static component to summarize the lesson and provide metacognitive prompts.\n-   `lib/utils.ts`: Standard file for `cn` utility from shadcn/ui.\n-   `public/`: This is where image assets would go. I will use placeholder divs to represent where illustrations should be placed.\n\n#### 2. Styling and Visuals\n\n-   **Framework**: I will use Tailwind CSS for styling, configured via `globals.css` and `tailwind.config.js`.\n-   **Component Library**: I'll use `shadcn/ui` for pre-built, accessible components like `Card`, `Button`, `Input`, and `Accordion`. This ensures a clean, modern, and consistent UI.\n-   **Color Palette**: A neutral palette (slate/gray) for the base, with a vibrant color (e.g., sky blue or amber) for calls-to-action, highlights, and interactive elements to guide the user's attention.\n-   **Typography**: The default sans-serif font stack (Inter) provided by the Next.js starter is excellent for readability. I will use clear headings and text hierarchy.\n-   **Illustrations**: I will use simple placeholders to denote where visuals should go, as I cannot generate images. These will be clearly marked, for example: `[Illustration: Friendly scientist character pointing to a lab beaker]`. I will also use icons from `lucide-react` to enhance UI elements.\n\n#### 3. Interactivity (`\"use client\"`)\n\nThe core interactive parts of the lesson will be built as Client Components.\n\n-   **`fops-solver.tsx`**: This component will use `useState` to manage user input for the two parts of the main problem, provide real-time feedback, and reveal steps progressively.\n-   **`transfer-tasks.tsx`**: This component will also use `useState` to handle user input for the near and far transfer problems, check the answers, and display feedback within an accordion structure.\n\n#### 4. Pedagogical Flow & Content Implementation\n\nThe `app/page.tsx` file will orchestrate the learning experience in the following sequence:\n\n1.  **Header**: Introduce the topic of Stoichiometry and its importance.\n2.  **Scenario**: Present the core problem within a relatable lab context, fulfilling the \"Concrete\" stage of CRA.\n3.  **Guided Solution (F.O.P.S.)**: Embed the `FopsSolver` component. This will walk the student through the Find, Organize, Plan, and Solve steps, moving them from \"Representational\" diagrams/tables to \"Abstract\" calculations.\n4.  **Practice (Transfer Tasks)**: Embed the `TransferTasks` component. This will assess and reinforce learning with carefully designed near and far transfer problems.\n5.  **Conclusion**: Summarize the key principles and provide metacognitive questions to encourage reflection.\n\n#### 5. Accessibility\n\n-   Semantic HTML (`main`, `section`, `h1`, `h2`, etc.) will be used for structure.\n-   All interactive elements from `shadcn/ui` (`Button`, `Input`) are designed with accessibility in mind.\n-   Labels will be associated with all form inputs.\n-   Visual placeholders will include descriptive text to indicate their purpose.\n\nThis plan ensures that all aspects of the user's request are met, from the high-level pedagogical structure down to the technical implementation details.\n</Thinking>\n\n```json\n{\n  \"type\": \"project\",\n  \"title\": \"Interactive Chemistry Lesson\",\n  \"description\": \"An educational webpage that teaches stoichiometry using a guided, interactive, and transfer-focused approach.\",\n  \"files\": [\n    {\n      \"path\": \"app/layout.tsx\",\n      \"content\": \"import type { Metadata } from 'next'\\nimport { Inter } from 'next/font/google'\\nimport './globals.css'\\nimport { cn } from '@/lib/utils'\\n\\nconst inter = Inter({ subsets: ['latin'], variable: '--font-sans' })\\n\\nexport const metadata: Metadata = {\\n  title: 'Interactive Chemistry Lesson',\\n  description: 'Learn stoichiometry with a hands-on approach.',\\n}\\n\\nexport default function RootLayout({\\n  children,\\n}: Readonly<{\\n  children: React.ReactNode\\n}>) {\\n  return (\\n    <html lang=\\\"en\\\" suppressHydrationWarning>\\n      <body\\n        className={cn(\\n          'min-h-screen bg-background font-sans antialiased',\\n          inter.variable\\n        )}\\n      >\\n        {children}\\n      </body>\\n    </html>\\n  )\\n}\\n\"\n    },\n    {\n      \"path\": \"app/page.tsx\",\n      \"content\": \"import PageHeader from '@/components/page-header'\\nimport ProblemScenario from '@/components/problem-scenario'\\nimport FopsSolver from '@/components/fops-solver'\\nimport TransferTasks from '@/components/transfer-tasks'\\nimport Conclusion from '@/components/conclusion'\\n\\nexport default function Home() {\\n  return (\\n    <main className=\\\"container mx-auto px-4 py-12 md:px-6 lg:py-16\\\">\\n      <div className=\\\"mx-auto max-w-3xl\\\">\\n        <PageHeader />\\n\\n        <div className=\\\"space-y-12\\\">\\n          <ProblemScenario />\\n          <FopsSolver />\\n          <TransferTasks />\\n          <Conclusion />\\n        </div>\\n      </div>\\n    </main>\\n  )\\n}\\n\"\n    },\n    {\n      \"path\": \"components/page-header.tsx\",\n      \"content\": \"export default function PageHeader() {\\n  return (\\n    <header className=\\\"mb-12 text-center\\\">\\n      <h1 className=\\\"text-4xl font-bold tracking-tight text-foreground sm:text-5xl\\\">\\n        Mastering Stoichiometry\\n      </h1>\\n      <p className=\\\"mt-4 text-lg text-muted-foreground\\\">\\n        From the Lab Bench to Real-World Problems\\n      </p>\\n    </header>\\n  )\\n}\\n\"\n    },\n    {\n      \"path\": \"components/problem-scenario.tsx\",\n      \"content\": \"import { Beaker, FlaskConical } from 'lucide-react'\\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\\n\\nexport default function ProblemScenario() {\\n  return (\\n    <section aria-labelledby=\\\"scenario-title\\\">\\n      <div className=\\\"text-center\\\">\\n        <h2 id=\\\"scenario-title\\\" className=\\\"text-3xl font-bold tracking-tight\\\">\\n          1. The Scenario: A Lab Experiment\\n        </h2>\\n        <p className=\\\"mt-2 text-muted-foreground\\\">\\n          Let's start with a concrete, observable experiment.\\n        </p>\\n      </div>\\n\\n      <Card className=\\\"mt-8\\\">\\n        <CardHeader>\\n          <CardTitle className=\\\"flex items-center gap-2\\\">\\n            <FlaskConical className=\\\"h-6 w-6\\\" />\\n            The Core Problem\\n          </CardTitle>\\n        </CardHeader>\\n        <CardContent className=\\\"space-y-4\\\">\\n          <div className=\\\"flex flex-col items-center gap-4 rounded-lg border bg-card p-6 text-center md:flex-row\\\">\\n            <div className=\\\"flex h-24 w-24 flex-shrink-0 items-center justify-center rounded-full bg-secondary\\\">\\n              <Beaker className=\\\"h-12 w-12 text-secondary-foreground\\\" />\\n            </div>\\n            <p className=\\\"text-lg\\\">\\n              In a lab, a reaction produces{' '}\\n              <strong className=\\\"text-primary\\\">12.0 g of a compound</strong> when{' '}\\n              <strong className=\\\"text-primary\\\">3.0 g of reactant A</strong> is\\n              used. Our goal is to understand the relationship between these two\\n              substances.\\n            </p>\\n          </div>\\n          <div className=\\\"prose prose-stone max-w-none dark:prose-invert\\\">\\n            <p>\\n              This is the <strong>Concrete</strong> stage. We can see and measure these\\n              substances. Now, let's move to representing and solving the problem\\n              abstractly.\\n            </p>\\n          </div>\\n        </CardContent>\\n      </Card>\\n    </section>\\n  )\\n}\\n\"\n    },\n    {\n      \"path\": \"components/fops-solver.tsx\",\n      \"content\": \"'use client'\\n\\nimport { useState } from 'react'\\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\\nimport { Input } from '@/components/ui/input'\\nimport { Button } from '@/components/ui/button'\\nimport { CheckCircle, XCircle, Lightbulb, Search, List, Plane, BrainCircuit } from 'lucide-react'\\n\\nexport default function FopsSolver() {\\n  const [ratioAnswer, setRatioAnswer] = useState('')\\n  const [ratioFeedback, setRatioFeedback] = useState<'correct' | 'incorrect' | null>(null)\\n  const [massAnswer, setMassAnswer] = useState('')\\n  const [massFeedback, setMassFeedback] = useState<'correct' | 'incorrect' | null>(null)\\n\\n  const checkRatio = () => {\\n    if (parseFloat(ratioAnswer) === 4) {\\n      setRatioFeedback('correct')\\n    } else {\\n      setRatioFeedback('incorrect')\\n    }\\n  }\\n\\n  const checkMass = () => {\\n    if (parseFloat(massAnswer) === 12) {\\n      setMassFeedback('correct')\\n    } else {\\n      setMassFeedback('incorrect')\\n    }\\n  }\\n\\n  return (\\n    <section aria-labelledby=\\\"fops-title\\\">\\n      <div className=\\\"text-center\\\">\\n        <h2 id=\\\"fops-title\\\" className=\\\"text-3xl font-bold tracking-tight\\\">\\n          2. The F.O.P.S. Strategy\\n        </h2>\\n        <p className=\\\"mt-2 text-muted-foreground\\\">\\n          A powerful framework for solving science problems.\\n        </p>\\n      </div>\\n\\n      <div className=\\\"mt-8 space-y-6\\\">\\n        <Card>\\n          <CardHeader>\\n            <CardTitle className=\\\"flex items-center gap-2\\\">\\n                <Search className=\\\"h-5 w-5\\\"/> F - Find the Core Principle\\n            </CardTitle>\\n          </CardHeader>\\n          <CardContent>\\n            <p>The core idea here is the <strong>Law of Constant Proportions</strong>. It means a compound always has the same ratio of elements by mass. The ratio we find will be constant for this reaction.</p>\\n          </CardContent>\\n        </Card>\\n\\n        <Card>\\n          <CardHeader>\\n            <CardTitle className=\\\"flex items-center gap-2\\\">\\n                <List className=\\\"h-5 w-5\\\"/> O - Organize Your Information\\n            </CardTitle>\\n          </CardHeader>\\n          <CardContent>\\n            <ul className=\\\"list-disc space-y-1 pl-5\\\">\\n              <li><strong>Known:</strong> Mass of Reactant A = 3.0 g</li>\\n              <li><strong>Known:</strong> Mass of Product = 12.0 g</li>\\n              <li><strong>Goal 1:</strong> Find the mass ratio (Product : Reactant A).</li>\\n              <li><strong>Goal 2:</strong> Find mass of Reactant A needed for 48.0 g of product.</li>\\n            </ul>\\n          </CardContent>\\n        </Card>\\n\\n        <Card>\\n          <CardHeader>\\n            <CardTitle className=\\\"flex items-center gap-2\\\">\\n                <Plane className=\\\"h-5 w-5\\\"/> P - Plan Your Approach\\n            </CardTitle>\\n          </CardHeader>\\n          <CardContent>\\n             <ol className=\\\"list-decimal space-y-1 pl-5\\\">\\n                <li>Calculate the mass ratio from the known data.</li>\\n                <li>Use this constant ratio to solve for the unknown reactant mass in the second scenario.</li>\\n            </ol>\\n          </CardContent>\\n        </Card>\\n\\n        <Card>\\n          <CardHeader>\\n            <CardTitle className=\\\"flex items-center gap-2\\\">\\n                <BrainCircuit className=\\\"h-5 w-5\\\"/> S - Solve Step-by-Step\\n            </CardTitle>\\n          </CardHeader>\\n          <CardContent className=\\\"space-y-6\\\">\\n            {/* Part 1 */}\\n            <div>\\n              <label htmlFor=\\\"ratio-input\\\" className=\\\"font-semibold\\\">\\n                Part 1: What is the mass ratio of product to reactant A?\\n              </label>\\n              <p className=\\\"text-sm text-muted-foreground\\\">\\n                Ratio = (Mass of Product) / (Mass of Reactant A)\\n              </p>\\n              <div className=\\\"mt-2 flex items-center gap-2\\\">\\n                <Input\\n                  id=\\\"ratio-input\\\"\\n                  type=\\\"number\\\"\\n                  placeholder=\\\"e.g., 4.0\\\"\\n                  value={ratioAnswer}\\n                  onChange={(e) => setRatioAnswer(e.target.value)}\\n                  aria-describedby=\\\"ratio-feedback\\\"\\n                />\\n                <Button onClick={checkRatio}>Check</Button>\\n              </div>\\n              {ratioFeedback === 'correct' && (\\n                <p id=\\\"ratio-feedback\\\" className=\\\"mt-2 flex items-center gap-1 text-sm text-green-600\\\">\\n                  <CheckCircle className=\\\"h-4 w-4\\\" /> Correct! The ratio is 4:1.\\n                </p>\\n              )}\\n              {ratioFeedback === 'incorrect' && (\\n                <p id=\\\"ratio-feedback\\\" className=\\\"mt-2 flex items-center gap-1 text-sm text-red-600\\\">\\n                  <XCircle className=\\\"h-4 w-4\\\" /> Not quite. Try dividing 12.0 by 3.0.\\n                </p>\\n              )}\\n            </div>\\n\\n            {/* Part 2 */}\\n            {ratioFeedback === 'correct' && (\\n              <div className=\\\"border-t pt-6\\\">\\n                <label htmlFor=\\\"mass-input\\\" className=\\\"font-semibold\\\">\\n                  Part 2: How much reactant A is needed to produce 48.0 g of the compound?\\n                </label>\\n                 <p className=\\\"text-sm text-muted-foreground\\\">\\n                    Mass of Reactant A = (Mass of Product) / (Ratio)\\n                </p>\\n                <div className=\\\"mt-2 flex items-center gap-2\\\">\\n                  <Input\\n                    id=\\\"mass-input\\\"\\n                    type=\\\"number\\\"\\n                    placeholder=\\\"e.g., 12.0\\\"\\n                    value={massAnswer}\\n                    onChange={(e) => setMassAnswer(e.target.value)}\\n                    aria-describedby=\\\"mass-feedback\\\"\\n                  />\\n                  <Button onClick={checkMass}>Solve</Button>\\n                </div>\\n                {massFeedback === 'correct' && (\\n                  <p id=\\\"mass-feedback\\\" className=\\\"mt-2 flex items-center gap-1 text-sm text-green-600\\\">\\n                    <CheckCircle className=\\\"h-4 w-4\\\" /> Exactly! You applied the ratio correctly.\\n                  </p>\\n                )}\\n                {massFeedback === 'incorrect' && (\\n                  <p id=\\\"mass-feedback\\\" className=\\\"mt-2 flex items-center gap-1 text-sm text-red-600\\\">\\n                    <XCircle className=\\\"h-4 w-4\\\" /> Give it another shot. Use the 4:1 ratio you found.\\n                  </p>\\n                )}\\n              </div>\\n            )}\\n          </CardContent>\\n        </Card>\\n      </div>\\n    </section>\\n  )\\n}\\n\"\n    },\n    {\n      \"path\": \"components/transfer-tasks.tsx\",\n      \"content\": \"'use client'\\n\\nimport { useState } from 'react'\\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion'\\nimport { Input } from '@/components/ui/input'\\nimport { Button } from '@/components/ui/button'\\nimport { CheckCircle, XCircle } from 'lucide-react'\\n\\nexport default function TransferTasks() {\\n  const [nearAnswer, setNearAnswer] = useState('')\\n  const [nearFeedback, setNearFeedback] = useState<'correct' | 'incorrect' | null>(null)\\n  const [farAnswer, setFarAnswer] = useState('')\\n  const [farFeedback, setFarFeedback] = useState<'correct' | 'incorrect' | null>(null)\\n\\n  const checkNearTransfer = () => {\\n    // Ratio is 15/5 = 3.  60 / 3 = 20.\\n    setNearFeedback(parseFloat(nearAnswer) === 20 ? 'correct' : 'incorrect')\\n  }\\n\\n  const checkFarTransfer = () => {\\n    // P1V1 = P2V2 -> (2.0)(10.0) = (4.0)V2 -> V2 = 20 / 4 = 5.0\\n    setFarFeedback(parseFloat(farAnswer) === 5 ? 'correct' : 'incorrect')\\n  }\\n\\n  return (\\n    <section aria-labelledby=\\\"transfer-title\\\">\\n      <div className=\\\"text-center\\\">\\n        <h2 id=\\\"transfer-title\\\" className=\\\"text-3xl font-bold tracking-tight\\\">\\n          3. Transfer Your Knowledge\\n        </h2>\\n        <p className=\\\"mt-2 text-muted-foreground\\\">\\n          Apply the core concepts to new situations.\\n        </p>\\n      </div>\\n\\n      <Accordion type=\\\"single\\\" collapsible className=\\\"mt-8 w-full\\\">\\n        <AccordionItem value=\\\"item-1\\\">\\n          <AccordionTrigger className=\\\"text-lg\\\">📌 Near-Transfer Problem</AccordionTrigger>\\n          <AccordionContent className=\\\"space-y-4 pt-2\\\">\\n            <p>\\n              <strong>Same structure, different context:</strong> In a pharmaceutical lab, it's found that 5.0 g of Reactant B produces 15.0 g of a new drug. How much Reactant B is needed to produce a 60.0 g batch of the drug?\\n            </p>\\n            <div className=\\\"flex items-center gap-2\\\">\\n              <Input\\n                type=\\\"number\\\"\\n                placeholder=\\\"Grams of Reactant B\\\"\\n                value={nearAnswer}\\n                onChange={(e) => setNearAnswer(e.target.value)}\\n                aria-label=\\\"Near transfer answer\\\"\\n              />\\n              <Button onClick={checkNearTransfer}>Check</Button>\\n            </div>\\n             {nearFeedback === 'correct' && (\\n                <p className=\\\"flex items-center gap-1 text-sm text-green-600\\\">\\n                  <CheckCircle className=\\\"h-4 w-4\\\" /> Perfect! You found the new ratio (3:1) and applied it.\\n                </p>\\n              )}\\n              {nearFeedback === 'incorrect' && (\\n                <p className=\\\"flex items-center gap-1 text-sm text-red-600\\\">\\n                  <XCircle className=\\\"h-4 w-4\\\" /> Not quite. First find the ratio of drug to reactant B, then use it.\\n                </p>\\n              )}\\n          </AccordionContent>\\n        </AccordionItem>\\n        <AccordionItem value=\\\"item-2\\\">\\n          <AccordionTrigger className=\\\"text-lg\\\">📌 Far-Transfer Problem</AccordionTrigger>\\n          <AccordionContent className=\\\"space-y-4 pt-2\\\">\\n            <p>\\n              <strong>Different surface, same underlying structure:</strong> A gas in a container occupies 10.0 L at 2.0 atm of pressure. If the pressure is increased to 4.0 atm, what is the new volume? (Hint: This is an *inverse* relationship: P₁V₁ = P₂V₂).\\n            </p>\\n            <div className=\\\"flex items-center gap-2\\\">\\n              <Input\\n                type=\\\"number\\\"\\n                placeholder=\\\"Volume in Liters\\\"\\n                value={farAnswer}\\n                onChange={(e) => setFarAnswer(e.target.value)}\\n                aria-label=\\\"Far transfer answer\\\"\\n              />\\n              <Button onClick={checkFarTransfer}>Check</Button>\\n            </div>\\n            {farFeedback === 'correct' && (\\n                <p className=\\\"flex items-center gap-1 text-sm text-green-600\\\">\\n                  <CheckCircle className=\\\"h-4 w-4\\\" /> Excellent! You recognized the inverse relationship structure.\\n                </p>\\n              )}\\n              {farFeedback === 'incorrect' && (\\n                <p className=\\\"flex items-center gap-1 text-sm text-red-600\\\">\\n                  <XCircle className=\\\"h-4 w-4\\\" /> Close! Remember that as pressure doubles, volume is halved.\\n                </p>\\n              )}\\n          </AccordionContent>\\n        </AccordionItem>\\n      </Accordion>\\n    </section>\\n  )\\n}\\n\"\n    },\n    {\n      \"path\": \"components/conclusion.tsx\",\n      \"content\": \"import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\\nimport { Award, Brain } from 'lucide-react'\\n\\nexport default function Conclusion() {\\n  return (\\n    <section aria-labelledby=\\\"conclusion-title\\\">\\n      <div className=\\\"text-center\\\">\\n        <h2 id=\\\"conclusion-title\\\" className=\\\"text-3xl font-bold tracking-tight\\\">\\n          4. You've Mastered It!\\n        </h2>\\n        <p className=\\\"mt-2 text-muted-foreground\\\">\\n          Let's reflect on what you've learned.\\n        </p>\\n      </div>\\n\\n      <div className=\\\"mt-8 grid gap-6 md:grid-cols-2\\\">\\n        <Card>\\n          <CardHeader>\\n            <CardTitle className=\\\"flex items-center gap-2\\\">\\n              <Award className=\\\"h-6 w-6 text-amber-500\\\" />\\n              Key Takeaways\\n            </CardTitle>\\n          </CardHeader>\\n          <CardContent>\\n            <ul className=\\\"list-disc space-y-2 pl-5\\\">\\n              <li>\\n                <strong>The Law of Constant Proportions</strong> is a fundamental rule in\\n                chemistry.\\n              </li>\\n              <li>\\n                The <strong>F.O.P.S. strategy</strong> helps break down complex\\n                problems into manageable steps.\\n              </li>\\n              <li>\\n                Recognizing underlying <strong>patterns and relationships</strong> is key\\n                to solving new problems (transfer).\\n              </li>\\n            </ul>\\n          </CardContent>\\n        </Card>\\n        <Card>\\n          <CardHeader>\\n            <CardTitle className=\\\"flex items-center gap-2\\\">\\n              <Brain className=\\\"h-6 w-6 text-sky-500\\\" />\\n              Metacognitive Check-in\\n            </CardTitle>\\n          </CardHeader>\\n          <CardContent>\\n            <ul className=\\\"list-disc space-y-2 pl-5\\\">\\n              <li>How can I apply F.O.P.S. to my homework problems?</li>\\n              <li>What's the difference between a direct ratio and an inverse relationship?</li>\\n              <li>When solving a problem, what's the first thing I should look for?</li>\\n            </ul>\\n          </CardContent>\\n        </Card>\\n      </div>\\n    </section>\\n  )\\n}\\n\"\n    },\n    {\n      \"path\": \"app/globals.css\",\n      \"content\": \"@tailwind base;\\n@tailwind components;\\n@tailwind utilities;\\n \\n@layer base {\\n  :root {\\n    --background: 0 0% 100%;\\n    --foreground: 240 10% 3.9%;\\n\\n    --card: 0 0% 100%;\\n    --card-foreground: 240 10% 3.9%;\\n \\n    --popover: 0 0% 100%;\\n    --popover-foreground: 240 10% 3.9%;\\n \\n    --primary: 240 5.9% 10%;\\n    --primary-foreground: 0 0% 98%;\\n \\n    --secondary: 240 4.8% 95.9%;\\n    --secondary-foreground: 240 5.9% 10%;\\n \\n    --muted: 240 4.8% 95.9%;\\n    --muted-foreground: 240 3.8% 46.1%;\\n \\n    --accent: 240 4.8% 95.9%;\\n    --accent-foreground: 240 5.9% 10%;\\n \\n    --destructive: 0 84.2% 60.2%;\\n    --destructive-foreground: 0 0% 98%;\\n\\n    --border: 240 5.9% 90%;\\n    --input: 240 5.9% 90%;\\n    --ring: 240 10% 3.9%;\\n \\n    --radius: 0.5rem;\\n  }\\n \\n  .dark {\\n    --background: 240 10% 3.9%;\\n    --foreground: 0 0% 98%;\\n \\n    --card: 240 10% 3.9%;\\n    --card-foreground: 0 0% 98%;\\n \\n    --popover: 240 10% 3.9%;\\n    --popover-foreground: 0 0% 98%;\\n \\n    --primary: 0 0% 98%;\\n    --primary-foreground: 240 5.9% 10%;\\n \\n    --secondary: 240 3.7% 15.9%;\\n    --secondary-foreground: 0 0% 98%;\\n \\n    --muted: 240 3.7% 15.9%;\\n    --muted-foreground: 240 5% 64.9%;\\n \\n    --accent: 240 3.7% 15.9%;\\n    --accent-foreground: 0 0% 98%;\\n \\n    --destructive: 0 62.8% 30.6%;\\n    --destructive-foreground: 0 0% 98%;\\n \\n    --border: 240 3.7% 15.9%;\\n    --input: 240 3.7% 15.9%;\\n    --ring: 240 4.9% 83.9%;\\n  }\\n}\\n \\n@layer base {\\n  * {\\n    @apply border-border;\\n  }\\n  body {\\n    @apply bg-background text-foreground;\\n  }\\n}\"\n    }\n  ],\n  \"dependencies\": {\n    \"lucide-react\": \"\",\n    \"tailwind-merge\": \"\",\n    \"clsx\": \"\",\n    \"tailwindcss-animate\": \"\",\n    \"@radix-ui/react-accordion\": \"\",\n    \"@radix-ui/react-slot\": \"\"\n  },\n  \"shadcn\": {\n    \"components\": [\"card\", \"button\", \"input\", \"accordion\"]\n  }\n}\n```"
}