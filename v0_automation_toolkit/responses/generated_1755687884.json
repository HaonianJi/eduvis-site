{
  "content": "Of course. As an instructional web designer, I will first plan the structure and content for an educational webpage on a specific chemistry problem, focusing on building deep conceptual understanding and transferrable skills. Then, I will generate the complete Next.js and shadcn/ui code for the webpage based on that plan.\n\n### **Instructional Design Plan**\n\n1.  **Core Problem Selection:** The user-provided problem is a simple decomposition. To better fit the advanced pedagogical goals (limiting reactants, F.O.P.S., transfer), I will use a more suitable core problem: a single-displacement reaction with two given reactant masses, which naturally introduces the concept of a limiting reactant.\n    *   **New Core Problem:** *\"In a lab experiment, a student mixes 10.0 g of solid zinc (Zn) with 10.0 g of aqueous copper(II) sulfate (CuSO₄). How many grams of solid copper (Cu) can be produced?\"*\n\n2.  **Webpage Structure & Flow:** The page will be a single, scrolling lesson divided into clear, scaffolded sections.\n    *   **Section 1: The Scenario (Context):** Introduce the problem within a relatable lab context. Use visuals to engage the learner.\n    *   **Section 2: From Concrete to Abstract (CRA Model):** Visually break down the reaction from what is observed (Concrete), to the particle level (Representational), to the chemical equation (Abstract).\n    *   **Section 3: A Strategy for Solving (F.O.P.S. Walkthrough):** An interactive, step-by-step guide to solving the core problem using the Find, Organize, Plan, Solve method. This will be the core interactive component.\n    *   **Section 4: Test Your Understanding (Transfer Problems):** Present near-transfer and far-transfer problems to assess and reinforce the learned concepts.\n    *   **Section 5: Building Good Habits (Metacognition):** Provide a checklist of metacognitive prompts for students to internalize.\n\n3.  **Visual & Interactive Elements:**\n    *   **Visuals:** Custom SVG icons for the lab setup, particle view, and key concepts to make the page visually appealing and informative.\n    *   **Interactivity:** The F.O.P.S. section will feature input fields for calculations and buttons for making choices, with immediate feedback to guide the student. The transfer problems will also have interactive answer checking.\n    *   **UI Components:** Utilize `shadcn/ui` components like `Card` for sectioning, `Accordion` for the CRA model, `Input` and `Button` for interactivity, and `Alert` for feedback and tips.\n\n4.  **Pedagogical Strategies:**\n    *   **Scaffolding:** The F.O.P.S. section will break the complex problem into manageable steps, preventing cognitive overload.\n    *   **Metacognition:** Explicit prompts will encourage students to self-reflect and monitor their problem-solving process.\n    *   **Analogical Transfer:** The near and far transfer problems are explicitly designed to move students from rote calculation to flexible, principle-based reasoning.\n\nThis plan ensures the webpage is not just a problem-solver but a comprehensive learning tool that develops critical scientific thinking skills, as requested.\n\n***\n\n<CodeProject>\n\n```json file=\"package.json\"\n{\n  \"name\": \"chemistry-lesson-v0\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\"\n  },\n  \"dependencies\": {\n    \"@radix-ui/react-accordion\": \"^1.1.2\",\n    \"@radix-ui/react-label\": \"^2.0.2\",\n    \"@radix-ui/react-separator\": \"^1.0.3\",\n    \"@radix-ui/react-slot\": \"^1.0.2\",\n    \"class-variance-authority\": \"^0.7.0\",\n    \"clsx\": \"^2.1.0\",\n    \"lucide-react\": \"^0.378.0\",\n    \"next\": \"14.2.3\",\n    \"react\": \"^18\",\n    \"react-dom\": \"^18\",\n    \"tailwind-merge\": \"^2.3.0\",\n    \"tailwindcss-animate\": \"^1.0.7\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^20\",\n    \"@types/react\": \"^18\",\n    \"@types/react-dom\": \"^18\",\n    \"eslint\": \"^8\",\n    \"eslint-config-next\": \"14.2.3\",\n    \"postcss\": \"^8\",\n    \"tailwindcss\": \"^3.4.1\",\n    \"typescript\": \"^5\"\n  }\n}\n```\n\n```json file=\"tsconfig.json\"\n{\n  \"compilerOptions\": {\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"noEmit\": true,\n    \"esModuleInterop\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"bundler\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"preserve\",\n    \"incremental\": true,\n    \"plugins\": [\n      {\n        \"name\": \"next\"\n      }\n    ],\n    \"paths\": {\n      \"@/*\": [\"./*\"]\n    }\n  },\n  \"include\": [\"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\", \".next/types/**/*.ts\"],\n  \"exclude\": [\"node_modules\"]\n}\n```\n\n```js file=\"tailwind.config.js\"\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  darkMode: [\"class\"],\n  content: [\n    './pages/**/*.{ts,tsx}',\n    './components/**/*.{ts,tsx}',\n    './app/**/*.{ts,tsx}',\n    './src/**/*.{ts,tsx}',\n  ],\n  prefix: \"\",\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      colors: {\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n}\n```\n\n```css file=\"app/globals.css\"\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 240 10% 3.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 240 10% 3.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 240 10% 3.9%;\n    --primary: 240 5.9% 10%;\n    --primary-foreground: 0 0% 98%;\n    --secondary: 240 4.8% 95.9%;\n    --secondary-foreground: 240 5.9% 10%;\n    --muted: 240 4.8% 95.9%;\n    --muted-foreground: 240 3.8% 46.1%;\n    --accent: 240 4.8% 95.9%;\n    --accent-foreground: 240 5.9% 10%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 240 5.9% 90%;\n    --input: 240 5.9% 90%;\n    --ring: 240 10% 3.9%;\n    --radius: 0.5rem;\n  }\n\n  .dark {\n    --background: 240 10% 3.9%;\n    --foreground: 0 0% 98%;\n    --card: 240 10% 3.9%;\n    --card-foreground: 0 0% 98%;\n    --popover: 240 10% 3.9%;\n    --popover-foreground: 0 0% 98%;\n    --primary: 0 0% 98%;\n    --primary-foreground: 240 5.9% 10%;\n    --secondary: 240 3.7% 15.9%;\n    --secondary-foreground: 0 0% 98%;\n    --muted: 240 3.7% 15.9%;\n    --muted-foreground: 0 0% 63.9%;\n    --accent: 240 3.7% 15.9%;\n    --accent-foreground: 0 0% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 240 3.7% 15.9%;\n    --input: 240 3.7% 15.9%;\n    --ring: 0 0% 83.1%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n```\n\n```tsx file=\"app/layout.tsx\"\nimport type { Metadata } from \"next\";\nimport { Inter } from \"next/font/google\";\nimport \"./globals.css\";\n\nconst inter = Inter({ subsets: [\"latin\"] });\n\nexport const metadata: Metadata = {\n  title: \"Chemistry Learning Module\",\n  description: \"An interactive lesson on stoichiometry and limiting reactants.\",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\">\n      <body className={inter.className}>{children}</body>\n    </html>\n  );\n}\n```\n\n```tsx file=\"app/page.tsx\"\nimport { Introduction } from \"@/components/lesson/introduction\";\nimport { CraSection } from \"@/components/lesson/cra-section\";\nimport { FopsWalkthrough } from \"@/components/lesson/fops-walkthrough\";\nimport { TransferProblems } from \"@/components/lesson/transfer-problems\";\nimport { MetacognitionPrompts } from \"@/components/lesson/metacognition-prompts\";\nimport { Separator } from \"@/components/ui/separator\";\n\nexport default function Home() {\n  return (\n    <main className=\"flex flex-col items-center p-4 sm:p-8 md:p-12 bg-slate-50 min-h-screen\">\n      <div className=\"w-full max-w-4xl space-y-12\">\n        <header className=\"text-center space-y-2\">\n          <h1 className=\"text-3xl sm:text-4xl md:text-5xl font-bold tracking-tight text-slate-800\">\n            Mastering Stoichiometry\n          </h1>\n          <p className=\"text-lg md:text-xl text-muted-foreground\">\n            From Lab Bench to Abstract Models\n          </p>\n        </header>\n\n        <Introduction />\n        <Separator />\n        <CraSection />\n        <Separator />\n        <FopsWalkthrough />\n        <Separator />\n        <TransferProblems />\n        <Separator />\n        <MetacognitionPrompts />\n      </div>\n    </main>\n  );\n}\n```\n\n```tsx file=\"lib/utils.ts\"\nimport { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n```\n\n```tsx file=\"components/lesson/introduction.tsx\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Beaker } from \"lucide-react\";\n\nconst LabSetupIcon = () => (\n  // Placeholder SVG for a lab setup\n  <svg width=\"100\" height=\"100\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\" className=\"text-blue-500\">\n    <path d=\"M20 90 H 80 V 85 H 20 Z\" fill=\"hsl(240 4.8% 95.9%)\" />\n    <path d=\"M30 10 H 70 V 15 H 30 Z\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" />\n    <path d=\"M35 15 V 85 H 65 V 15\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" />\n    <path d=\"M35 85 C 35 70, 65 70, 65 85\" fill=\"rgba(60, 130, 240, 0.5)\" />\n    <circle cx=\"45\" cy=\"70\" r=\"3\" fill=\"hsl(0 0% 50%)\" />\n    <circle cx=\"55\" cy=\"75\" r=\"2\" fill=\"hsl(0 0% 50%)\" />\n    <circle cx=\"40\" cy=\"80\" r=\"1.5\" fill=\"hsl(0 0% 50%)\" />\n  </svg>\n);\n\n\nexport function Introduction() {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2 text-2xl\">\n          <Beaker className=\"w-6 h-6 text-blue-600\" />\n          The Scenario: A Chemistry Challenge\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"flex flex-col md:flex-row items-center gap-6\">\n        <LabSetupIcon />\n        <div className=\"space-y-4 text-base\">\n          <p>\n            Imagine you're in a chemistry lab, tasked with creating pure copper.\n            You have a vibrant blue solution of copper(II) sulfate (CuSO₄) and\n            some silvery zinc metal (Zn).\n          </p>\n          <p className=\"font-semibold\">\n            The Problem: If you mix <span className=\"text-green-600\">10.0 grams of zinc</span> with <span className=\"text-blue-600\">10.0 grams of copper(II) sulfate</span>, what is the maximum amount of solid copper you can produce?\n          </p>\n          <p>\n            This is a real-world question chemists face when calculating a reaction's{\" \"}\n            <span className=\"font-bold\">theoretical yield</span>. But what happens if you run\n            out of one ingredient before the other? Let's find out!\n          </p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n```\n\n```tsx file=\"components/lesson/cra-section.tsx\"\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\nimport { Eye, Atom, TestTube } from \"lucide-react\";\n\nconst ConcreteIcon = () => (\n    // Placeholder SVG for concrete observation\n    <svg width=\"80\" height=\"80\" viewBox=\"0 0 80 80\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M15 75 H 65 V 70 H 15 Z\" fill=\"hsl(240 4.8% 95.9%)\" />\n        <path d=\"M20 10 V 70 H 60 V 10\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" className=\"text-slate-400\" />\n        <path d=\"M20 70 C 20 50, 60 50, 60 70\" fill=\"rgba(60, 130, 240, 0.6)\" />\n        <rect x=\"35\" y=\"40\" width=\"10\" height=\"25\" fill=\"hsl(28, 80%, 55%)\" />\n        <path d=\"M20 40 C 20 30, 60 30, 60 40\" fill=\"rgba(60, 130, 240, 0.3)\" />\n    </svg>\n);\n\nconst RepresentationalIcon = () => (\n    // Placeholder SVG for particle view\n    <svg width=\"80\" height=\"80\" viewBox=\"0 0 80 80\" xmlns=\"http://www.w3.org/2000/svg\">\n        <circle cx=\"20\" cy=\"20\" r=\"8\" fill=\"hsl(28, 80%, 55%)\" />\n        <text x=\"16\" y=\"24\" fontSize=\"8\" fill=\"white\">Cu</text>\n        <circle cx=\"60\" cy=\"60\" r=\"10\" fill=\"hsl(240 50% 60%)\" />\n        <text x=\"52\" y=\"64\" fontSize=\"8\" fill=\"white\">Cu²⁺</text>\n        <circle cx=\"25\" cy=\"55\" r=\"10\" fill=\"hsl(0 0% 70%)\" />\n        <text x=\"21\" y=\"59\" fontSize=\"8\" fill=\"black\">Zn</text>\n        <circle cx=\"55\" cy=\"25\" r=\"8\" fill=\"hsl(0 0% 85%)\" />\n        <text x=\"47\" y=\"29\" fontSize=\"8\" fill=\"black\">Zn²⁺</text>\n    </svg>\n);\n\n\nexport function CraSection() {\n  return (\n    <section className=\"space-y-4\">\n      <h2 className=\"text-2xl font-semibold text-center\">\n        Connecting the Concrete to the Abstract (CRA)\n      </h2>\n      <Accordion type=\"single\" collapsible className=\"w-full\" defaultValue=\"item-1\">\n        <AccordionItem value=\"item-1\">\n          <AccordionTrigger className=\"text-lg\">\n            <div className=\"flex items-center gap-2\">\n              <Eye className=\"w-5 h-5 text-green-600\" />\n              Step 1: The Concrete - What We See\n            </div>\n          </AccordionTrigger>\n          <AccordionContent className=\"flex items-center gap-4 p-4\">\n             <ConcreteIcon />\n            <p>\n              In the lab, you would see the silvery zinc metal get coated with a reddish-brown solid (copper). The solution's vibrant blue color, caused by copper(II) ions, would gradually fade. These are our observable phenomena.\n            </p>\n          </AccordionContent>\n        </AccordionItem>\n        <AccordionItem value=\"item-2\">\n          <AccordionTrigger className=\"text-lg\">\n            <div className=\"flex items-center gap-2\">\n              <Atom className=\"w-5 h-5 text-yellow-600\" />\n              Step 2: The Representational - The Particle Level\n            </div>\n          </AccordionTrigger>\n          <AccordionContent className=\"flex items-center gap-4 p-4\">\n            <RepresentationalIcon />\n            <p>\n              Zooming in, we can model what's happening. Each neutral zinc atom (Zn) gives up two electrons, becoming a zinc ion (Zn²⁺) and dissolving. Each copper(II) ion (Cu²⁺) takes those two electrons, becoming a neutral copper atom (Cu) and forming a solid.\n            </p>\n          </AccordionContent>\n        </AccordionItem>\n        <AccordionItem value=\"item-3\">\n          <AccordionTrigger className=\"text-lg\">\n            <div className=\"flex items-center gap-2\">\n              <TestTube className=\"w-5 h-5 text-purple-600\" />\n              Step 3: The Abstract - The Chemical Equation\n            </div>\n          </AccordionTrigger>\n          <AccordionContent className=\"p-4 space-y-2\">\n            <p>\n              Finally, we use the language of chemistry to represent this entire process symbolically. This balanced equation is the key to our calculations.\n            </p>\n            <div className=\"p-4 text-center bg-slate-100 rounded-md\">\n              <code className=\"text-lg font-mono\">\n                Zn(s) + CuSO₄(aq) → ZnSO₄(aq) + Cu(s)\n              </code>\n            </div>\n            <p className=\"text-sm text-muted-foreground text-center\">\n              The mole ratio is key: 1 mole of Zn reacts with 1 mole of CuSO₄ to produce 1 mole of Cu.\n            </p>\n          </AccordionContent>\n        </AccordionItem>\n      </Accordion>\n    </section>\n  );\n}\n```\n\n```tsx file=\"components/lesson/fops-walkthrough.tsx\"\n'use client'\n\nimport { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { CheckCircle, XCircle, Lightbulb, Target } from \"lucide-react\";\n\nexport function FopsWalkthrough() {\n  const [step, setStep] = useState(0);\n  const [znMoles, setZnMoles] = useState('');\n  const [cuso4Moles, setCuso4Moles] = useState('');\n  const [limitingReactant, setLimitingReactant] = useState('');\n  const [finalMass, setFinalMass] = useState('');\n\n  const checkAnswer = (userAnswer: string, correctAnswer: number, nextStep: number) => {\n    if (Math.abs(parseFloat(userAnswer) - correctAnswer) < 0.005) {\n      setStep(nextStep);\n    } else {\n      alert(\"Not quite! Check your calculation and try again. Remember to use the correct molar masses and watch your significant figures.\");\n    }\n  };\n\n  const renderStep = () => {\n    switch (step) {\n      case 0: // Find\n        return (\n            <div className=\"space-y-4\">\n                <p><strong>F - Find:</strong> What is the core chemical principle at play?</p>\n                <Alert>\n                    <Lightbulb className=\"h-4 w-4\" />\n                    <AlertTitle>Core Concept</AlertTitle>\n                    <AlertDescription>\n                        We have starting amounts for <strong>both</strong> reactants. This means we need to figure out which one will run out first. This is a <strong>limiting reactant</strong> problem. The limiting reactant determines the maximum amount of product that can be formed.\n                    </AlertDescription>\n                </Alert>\n                <Button onClick={() => setStep(1)}>Next: Organize</Button>\n            </div>\n        );\n      case 1: // Organize\n        return (\n            <div className=\"space-y-4\">\n                <p><strong>O - Organize:</strong> Let's list our knowns and what we need to find.</p>\n                <ul className=\"list-disc list-inside bg-slate-50 p-4 rounded-md\">\n                    <li><strong>Known:</strong> Mass of Zn = 10.0 g</li>\n                    <li><strong>Known:</strong> Mass of CuSO₄ = 10.0 g</li>\n                    <li><strong>Molar Mass of Zn:</strong> ~65.38 g/mol</li>\n                    <li><strong>Molar Mass of CuSO₄:</strong> ~159.61 g/mol</li>\n                    <li><strong>Molar Mass of Cu:</strong> ~63.55 g/mol</li>\n                    <li><strong>Unknown:</strong> Mass of Cu = ? g</li>\n                </ul>\n                <Button onClick={() => setStep(2)}>Next: Plan</Button>\n            </div>\n        );\n      case 2: // Plan\n        return (\n            <div className=\"space-y-4\">\n                <p><strong>P - Plan:</strong> Our step-by-step approach.</p>\n                <ol className=\"list-decimal list-inside space-y-2\">\n                    <li>Convert mass of each reactant (Zn, CuSO₄) to moles.</li>\n                    <li>Use the 1:1 mole ratio to see how many moles of Cu each reactant could produce.</li>\n                    <li>Identify the limiting reactant (the one that makes less Cu).</li>\n                    <li>Convert the smaller number of moles of Cu to grams. This is our answer!</li>\n                </ol>\n                <Button onClick={() => setStep(3)}>Start Solving</Button>\n            </div>\n        );\n      case 3: // Solve - Step 1\n        return (\n            <div className=\"space-y-4\">\n                <p><strong>S - Solve (Step 1/4):</strong> Calculate the moles of Zinc (Zn).</p>\n                <p className=\"text-sm text-muted-foreground\"><code>(10.0 g Zn) / (65.38 g/mol) = ?</code></p>\n                <div className=\"flex w-full max-w-sm items-center space-x-2\">\n                    <Input id=\"zn-moles\" placeholder=\"e.g., 0.123\" value={znMoles} onChange={e => setZnMoles(e.target.value)} />\n                    <Label htmlFor=\"zn-moles\">moles Zn</Label>\n                </div>\n                <Button onClick={() => checkAnswer(znMoles, 0.153, 4)}>Check Answer</Button>\n            </div>\n        );\n      case 4: // Solve - Step 2\n        return (\n            <div className=\"space-y-4\">\n                <Alert variant=\"default\" className='bg-green-50 border-green-200'>\n                    <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                    <AlertTitle>Correct!</AlertTitle>\n                    <AlertDescription>You have 0.153 moles of Zn.</AlertDescription>\n                </Alert>\n                <p><strong>S - Solve (Step 2/4):</strong> Now calculate the moles of Copper(II) Sulfate (CuSO₄).</p>\n                <p className=\"text-sm text-muted-foreground\"><code>(10.0 g CuSO₄) / (159.61 g/mol) = ?</code></p>\n                <div className=\"flex w-full max-w-sm items-center space-x-2\">\n                    <Input id=\"cuso4-moles\" placeholder=\"e.g., 0.098\" value={cuso4Moles} onChange={e => setCuso4Moles(e.target.value)} />\n                    <Label htmlFor=\"cuso4-moles\">moles CuSO₄</Label>\n                </div>\n                <Button onClick={() => checkAnswer(cuso4Moles, 0.0627, 5)}>Check Answer</Button>\n            </div>\n        );\n      case 5: // Solve - Step 3\n        return (\n            <div className=\"space-y-4\">\n                <Alert variant=\"default\" className='bg-green-50 border-green-200'>\n                    <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                    <AlertTitle>Excellent!</AlertTitle>\n                    <AlertDescription>You have 0.0627 moles of CuSO₄.</AlertDescription>\n                </Alert>\n                <p><strong>S - Solve (Step 3/4):</strong> Identify the limiting reactant.</p>\n                <ul className=\"list-disc list-inside\">\n                    <li>0.153 mol Zn can make <strong>0.153 mol Cu</strong> (since it's a 1:1 ratio).</li>\n                    <li>0.0627 mol CuSO₄ can make <strong>0.0627 mol Cu</strong> (since it's a 1:1 ratio).</li>\n                </ul>\n                <p>Which reactant produces LESS copper?</p>\n                <div className=\"flex gap-4\">\n                    <Button variant={limitingReactant === 'Zn' ? 'destructive' : 'outline'} onClick={() => setLimitingReactant('Zn')}>Zinc (Zn)</Button>\n                    <Button variant={limitingReactant === 'CuSO4' ? 'default' : 'outline'} onClick={() => setLimitingReactant('CuSO4')}>Copper(II) Sulfate (CuSO₄)</Button>\n                </div>\n                {limitingReactant === 'Zn' && <Alert variant=\"destructive\"><XCircle className=\"h-4 w-4\" /><AlertTitle>Try again!</AlertTitle><AlertDescription>0.153 is greater than 0.0627. The limiting reactant is the one that produces the smaller amount.</AlertDescription></Alert>}\n                {limitingReactant === 'CuSO4' && <Button onClick={() => setStep(6)}>Confirm and Continue</Button>}\n            </div>\n        );\n      case 6: // Solve - Step 4\n        return (\n            <div className=\"space-y-4\">\n                 <Alert variant=\"default\" className='bg-green-50 border-green-200'>\n                    <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                    <AlertTitle>You got it!</AlertTitle>\n                    <AlertDescription>CuSO₄ is the limiting reactant because it produces only 0.0627 moles of Cu.</AlertDescription>\n                </Alert>\n                <p><strong>S - Solve (Step 4/4):</strong> Calculate the final mass of Copper (Cu).</p>\n                <p className=\"text-sm text-muted-foreground\"><code>(0.0627 mol Cu) * (63.55 g/mol) = ?</code></p>\n                <div className=\"flex w-full max-w-sm items-center space-x-2\">\n                    <Input id=\"final-mass\" placeholder=\"e.g., 5.43\" value={finalMass} onChange={e => setFinalMass(e.target.value)} />\n                    <Label htmlFor=\"final-mass\">grams Cu</Label>\n                </div>\n                <Button onClick={() => checkAnswer(finalMass, 3.98, 7)}>Check Final Answer</Button>\n            </div>\n        );\n      case 7: // Final Answer\n        return (\n            <Alert className=\"bg-teal-50 border-teal-200\">\n                <Target className=\"h-5 w-5 text-teal-700\" />\n                <AlertTitle className=\"text-xl text-teal-800\">Problem Solved!</AlertTitle>\n                <AlertDescription className=\"text-base text-teal-700\">\n                    The theoretical yield of copper is <strong>3.98 grams</strong>. You correctly identified the limiting reactant and completed the stoichiometric calculation. Great work!\n                </AlertDescription>\n            </Alert>\n        )\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <CardTitle className=\"text-2xl text-center\">\n          Solving the Problem with F.O.P.S.\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"min-h-[250px] flex justify-center items-center\">\n        {renderStep()}\n      </CardContent>\n    </Card>\n  );\n}\n```\n\n```tsx file=\"components/lesson/transfer-problems.tsx\"\n'use client'\n\nimport { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { CheckCircle, XCircle, Pin, Rocket } from \"lucide-react\";\n\nexport function TransferProblems() {\n  const [nearAnswer, setNearAnswer] = useState('');\n  const [nearFeedback, setNearFeedback] = useState<'correct' | 'incorrect' | null>(null);\n  const [farAnswer, setFarAnswer] = useState('');\n  const [farFeedback, setFarFeedback] = useState<'correct' | 'incorrect' | null>(null);\n\n  const checkNearTransfer = () => {\n      // Correct answer is ~8.7g\n    if (Math.abs(parseFloat(nearAnswer) - 8.7) < 0.1) {\n      setNearFeedback('correct');\n    } else {\n      setNearFeedback('incorrect');\n    }\n  };\n\n  const checkFarTransfer = () => {\n    // Flour: 5 cups / 2 cups/batch = 2.5 batches -> 60 cookies\n    // Sugar: 3 cups / 1 cup/batch = 3 batches -> 72 cookies\n    // Limiting is flour. Max cookies = 60\n    if (parseInt(farAnswer, 10) === 60) {\n      setFarFeedback('correct');\n    } else {\n      setFarFeedback('incorrect');\n    }\n  };\n\n  return (\n    <section className=\"space-y-8\">\n      <h2 className=\"text-2xl font-semibold text-center\">Test Your Understanding: Transfer Problems</h2>\n      <div className=\"grid md:grid-cols-2 gap-8\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Pin className=\"w-5 h-5\" />\n              Near-Transfer Problem\n            </CardTitle>\n            <CardDescription>Same structure, different chemicals.</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <p>You're synthesizing silver chloride (AgCl) by mixing 15.0 g of silver nitrate (AgNO₃) with 5.0 g of sodium chloride (NaCl). What is the maximum mass of AgCl that can be formed?</p>\n            <p className=\"text-sm text-muted-foreground bg-slate-50 p-2 rounded\"><code>AgNO₃ + NaCl → AgCl + NaNO₃</code></p>\n            <Input placeholder=\"Your answer in grams\" value={nearAnswer} onChange={e => setNearAnswer(e.target.value)} />\n            {nearFeedback === 'correct' && <Alert className=\"bg-green-50\"><CheckCircle className=\"h-4 w-4\" /><AlertTitle>Correct!</AlertTitle><AlertDescription>NaCl is the limiting reactant, yielding 8.7g of AgCl.</AlertDescription></Alert>}\n            {nearFeedback === 'incorrect' && <Alert variant=\"destructive\"><XCircle className=\"h-4 w-4\" /><AlertTitle>Not Quite</AlertTitle><AlertDescription>Recalculate the moles of each reactant to find the limiting one.</AlertDescription></Alert>}\n          </CardContent>\n          <CardFooter>\n            <Button onClick={checkNearTransfer}>Check Answer</Button>\n          </CardFooter>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Rocket className=\"w-5 h-5\" />\n              Far-Transfer Problem\n            </CardTitle>\n            <CardDescription>Different context, same core logic.</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <p>You're baking cookies. The recipe calls for 2 cups of flour for every 1 cup of sugar to make 24 cookies. You have 5 cups of flour and 3 cups of sugar. What is the maximum number of cookies you can bake?</p>\n             <p className=\"text-sm text-muted-foreground\">Hint: This is a \"limiting ingredient\" problem!</p>\n            <Input placeholder=\"Max number of cookies\" value={farAnswer} onChange={e => setFarAnswer(e.target.value)} />\n            {farFeedback === 'correct' && <Alert className=\"bg-green-50\"><CheckCircle className=\"h-4 w-4\" /><AlertTitle>Exactly!</AlertTitle><AlertDescription>The flour is the limiting ingredient. You can only make 2.5 batches, which is 60 cookies.</AlertDescription></Alert>}\n            {farFeedback === 'incorrect' && <Alert variant=\"destructive\"><XCircle className=\"h-4 w-4\" /><AlertTitle>Think Again</AlertTitle><AlertDescription>How many batches of cookies can you make with the flour? How many with the sugar?</AlertDescription></Alert>}\n          </CardContent>\n          <CardFooter>\n            <Button onClick={checkFarTransfer}>Check Answer</Button>\n          </CardFooter>\n        </Card>\n      </div>\n    </section>\n  );\n}\n```\n\n```tsx file=\"components/lesson/metacognition-prompts.tsx\"\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { BrainCircuit } from \"lucide-react\";\n\nexport function MetacognitionPrompts() {\n  return (\n    <Alert>\n      <BrainCircuit className=\"h-5 w-5\" />\n      <AlertTitle className=\"text-xl font-semibold\">\n        Build Good Habits: Think Like a Scientist\n      </AlertTitle>\n      <AlertDescription>\n        <p className=\"mb-2\">Before, during, and after solving a problem, ask yourself:</p>\n        <ul className=\"list-disc list-inside space-y-1\">\n          <li>Do I understand the real-world context of the reaction?</li>\n          <li>What is the core principle I need to apply (e.g., stoichiometry, equilibrium)?</li>\n          <li>Is my chemical equation correctly balanced?</li>\n          <li>Have I organized all my knowns and unknowns clearly?</li>\n          <li>Am I using the correct units and molar masses?</li>\n          <li>Does my final answer seem reasonable? (e.g., Is the mass of product less than the total mass of reactants?)</li>\n        </ul>\n      </AlertDescription>\n    </Alert>\n  );\n}\n```\n\n```tsx file=\"components/ui/accordion.tsx\"\n\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n```\n\n```tsx file=\"components/ui/alert.tsx\"\nimport * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n```\n\n```tsx file=\"components/ui/button.tsx\"\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n```\n\n```tsx file=\"components/ui/card.tsx\"\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n```\n\n```tsx file=\"components/ui/input.tsx\"\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n```\n\n```tsx file=\"components/ui/label.tsx\"\n\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n```\n\n```tsx file=\"components/ui/separator.tsx\"\n\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n```\n</CodeProject>"
}