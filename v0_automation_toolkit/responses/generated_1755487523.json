{
  "content": "<Thinking>\nI will create a Next.js application that serves as an educational webpage for a specific chemistry problem. The user has provided a detailed instructional plan, which I will follow closely.\n\n### 1. Project Structure\n\nThe project will be a single-page application experience, contained within `app/page.tsx`. I will break down interactive elements into their own client components to maintain a clean structure and separate server and client logic.\n\n-   `app/layout.tsx`: Root layout for the application.\n-   `app/page.tsx`: The main server component that will structure the entire educational webpage, including all sections outlined by the user (Context, CRA, F.O.P.S., Transfer Problems).\n-   `components/interactive-problem.tsx`: A client component (`\"use client\"`) that will handle user input, answer checking, and feedback for the core problem and the transfer problems. This will make the practice sections interactive.\n-   `components/ui/`: Directory for shadcn/ui components. I'll need `Card`, `Button`, `Input`, `Alert`, and `Accordion` to structure the content effectively.\n-   `public/`: This directory will hold the SVG images used for visual aids.\n\n### 2. Styling and Components\n\n-   **Framework**: I will use Tailwind CSS for styling, as it integrates seamlessly with Next.js and shadcn/ui.\n-   **Component Library**: shadcn/ui will be used for UI components.\n    -   `Card`: To encapsulate different sections like the main problem, context, and metacognitive prompts.\n    -   `Accordion`: This is perfect for the F.O.P.S. strategy and the transfer problems, allowing students to reveal information and problems progressively.\n    -   `Button`, `Input`, `Alert`: These will be used within the `InteractiveProblem` component for the hands-on practice portions.\n-   **Responsiveness**: The layout will be built using flexbox and grid to ensure it is responsive and works well on desktops, tablets, and mobile devices.\n-   **Color Scheme**: An educational and accessible color palette will be used. Neutral backgrounds with accent colors for key information. Green for correct answers, and red/orange for incorrect feedback.\n\n### 3. Images and Media\n\nI will create simple, clear SVG images to support the instructional content, as requested. These will be placed in the `public` directory.\n\n-   `student-scientist.svg`: A simple, friendly character to make the page more engaging.\n-   `lab-setup.svg`: A visual representing the \"Concrete\" part of the CRA model (beakers, flasks).\n-   `gas-piston.svg`: A diagram to support the far-transfer problem involving gas laws.\n\n### 4. Instructional Flow and Content Implementation\n\nI will map the user's detailed plan directly to the webpage's structure.\n\n1.  **Introduction & Context**: Start with a welcoming header, the student scientist SVG, and the core problem statement clearly presented in a `Card`.\n2.  **Conceptual Deep Dive (CRA)**:\n    -   **Concrete**: An analogy (e.g., baking recipe) and a visual of lab equipment (`lab-setup.svg`).\n    -   **Representational**: A simple diagram and introduction to ratios.\n    -   **Abstract**: Formally state the principle (Law of Definite Proportions) and the mathematical formula.\n3.  **Scaffolded Problem Solving (F.O.P.S.)**: An `Accordion` will be used to guide the student step-by-step. Each letter (F, O, P, S) will be an accordion item that reveals the corresponding part of the problem-solving process.\n4.  **Interactive Practice**: The `InteractiveProblem` component will be used here, allowing students to input their answer for the main problem and receive immediate feedback.\n5.  **Metacognitive Prompts**: A `Card` will list the self-check questions to encourage reflective learning.\n6.  **Transfer Tasks**: An `Accordion` with two items:\n    -   **Near-Transfer Problem**: Presents the new problem, a hint, and another instance of the `InteractiveProblem` component.\n    -   **Far-Transfer Problem**: Presents the gas law problem, the `gas-piston.svg`, a hint, and a third instance of the `InteractiveProblem` component.\n7.  **Conclusion**: A final `Card` summarizing the key takeaways: the specific concept learned and the general problem-solving skills practiced.\n\n### 5. Interactivity (`InteractiveProblem` component)\n\n-   This will be a client component (`\"use client\"`).\n-   It will manage its own state using `useState` for the user's input and the feedback message/status.\n-   It will accept props like `correctAnswer`, `unit`, and `tolerance` (for floating-point comparisons) to make it reusable for all three problems.\n-   The logic will compare the user's input to the correct answer and display an appropriate `Alert` message.\n\n### 6. Frameworks and Libraries\n\n-   Next.js 14 (App Router)\n-   React 18\n-   TypeScript\n-   Tailwind CSS\n-   shadcn/ui\n-   lucide-react (for icons)\n\nBy following this plan, the final product will be an instructionally rich, interactive, and visually engaging webpage that adheres to all the pedagogical and design requirements specified by the user.\n\n</Thinking>\n\n```json file=\"package.json\"\n{\n  \"name\": \"chemistry-tutor-webpage\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\"\n  },\n  \"dependencies\": {\n    \"@radix-ui/react-accordion\": \"^1.1.2\",\n    \"@radix-ui/react-slot\": \"^1.0.2\",\n    \"class-variance-authority\": \"^0.7.0\",\n    \"clsx\": \"^2.1.1\",\n    \"lucide-react\": \"^0.378.0\",\n    \"next\": \"14.2.3\",\n    \"react\": \"^18\",\n    \"react-dom\": \"^18\",\n    \"tailwind-merge\": \"^2.3.0\",\n    \"tailwindcss-animate\": \"^1.0.7\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^20\",\n    \"@types/react\": \"^18\",\n    \"@types/react-dom\": \"^18\",\n    \"eslint\": \"^8\",\n    \"eslint-config-next\": \"14.2.3\",\n    \"postcss\": \"^8\",\n    \"tailwindcss\": \"^3.4.1\",\n    \"typescript\": \"^5\"\n  }\n}\n```\n\n```ts file=\"tailwind.config.ts\"\nimport type { Config } from \"tailwindcss\"\n\nconst config = {\n  darkMode: [\"class\"],\n  content: [\n    './pages/**/*.{ts,tsx}',\n    './components/**/*.{ts,tsx}',\n    './app/**/*.{ts,tsx}',\n    './src/**/*.{ts,tsx}',\n\t],\n  prefix: \"\",\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n} satisfies Config\n\nexport default config\n```\n\n```css file=\"app/globals.css\"\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 84% 4.9%;\n\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 84% 4.9%;\n\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 84% 4.9%;\n\n    --primary: 222.2 47.4% 11.2%;\n    --primary-foreground: 210 40% 98%;\n\n    --secondary: 210 40% 96.1%;\n    --secondary-foreground: 222.2 47.4% 11.2%;\n\n    --muted: 210 40% 96.1%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n\n    --accent: 210 40% 96.1%;\n    --accent-foreground: 222.2 47.4% 11.2%;\n\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 210 40% 98%;\n\n    --success: 142.1 76.2% 36.3%;\n    --success-foreground: 210 40% 98%;\n\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: 222.2 84% 4.9%;\n\n    --radius: 0.5rem;\n  }\n\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n\n    --primary: 210 40% 98%;\n    --primary-foreground: 222.2 47.4% 11.2%;\n\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n\n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n\n    --success: 142.1 76.2% 36.3%;\n    --success-foreground: 210 40% 98%;\n\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 212.7 26.8% 83.9%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n```\n\n```ts file=\"lib/utils.ts\"\nimport { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n```\n\n```tsx file=\"components/ui/accordion.tsx\"\n\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n```\n\n```tsx file=\"components/ui/alert.tsx\"\nimport * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n        success:\n          \"border-success/50 text-success-foreground dark:border-success bg-success [&>svg]:text-success-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n```\n\n```tsx file=\"components/ui/button.tsx\"\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n```\n\n```tsx file=\"components/ui/card.tsx\"\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter }\n```\n\n```tsx file=\"components/ui/input.tsx\"\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n```\n\n```tsx file=\"public/student-scientist.svg\"\n<svg width=\"120\" height=\"120\" viewBox=\"0 0 120 120\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<circle cx=\"60\" cy=\"60\" r=\"58\" fill=\"#F0F4F8\" stroke=\"#B0C4DE\" stroke-width=\"4\"/>\n<circle cx=\"60\" cy=\"45\" r=\"20\" fill=\"#FFE0B2\" stroke=\"#455A64\" stroke-width=\"2\"/>\n<circle cx=\"52\" cy=\"42\" r=\"3\" fill=\"#455A64\"/>\n<circle cx=\"68\" cy=\"42\" r=\"3\" fill=\"#455A64\"/>\n<path d=\"M55 55 C 60 62, 65 62, 70 55\" stroke=\"#455A64\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"round\"/>\n<path d=\"M40 70 C 40 90, 80 90, 80 70\" fill=\"#4FC3F7\" stroke=\"#455A64\" stroke-width=\"2\"/>\n<rect x=\"50\" y=\"70\" width=\"20\" height=\"5\" fill=\"#FFFFFF\" stroke=\"#455A64\" stroke-width=\"1.5\"/>\n</svg>\n```\n\n```tsx file=\"public/lab-setup.svg\"\n<svg width=\"150\" height=\"100\" viewBox=\"0 0 150 100\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M20 95 L20 20 H 60 V 95 Z\" stroke=\"#455A64\" stroke-width=\"2\" fill=\"#E1F5FE\"/>\n<rect x=\"20\" y=\"70\" width=\"40\" height=\"25\" fill=\"#81D4FA\"/>\n<path d=\"M80 95 L80 30 C 80 10, 120 10, 120 30 L 120 95 Z\" stroke=\"#455A64\" stroke-width=\"2\" fill=\"#E1F5FE\"/>\n<rect x=\"80\" y=\"60\" width=\"40\" height=\"35\" fill=\"#4FC3F7\"/>\n<line x1=\"20\" y1=\"70\" x2=\"60\" y2=\"70\" stroke=\"#455A64\" stroke-width=\"1\"/>\n<line x1=\"80\" y1=\"60\" x2=\"120\" y2=\"60\" stroke=\"#455A64\" stroke-width=\"1\"/>\n<path d=\"M10 95 H 140\" stroke=\"#78909C\" stroke-width=\"3\" stroke-linecap=\"round\"/>\n</svg>\n```\n\n```tsx file=\"public/gas-piston.svg\"\n<svg width=\"120\" height=\"120\" viewBox=\"0 0 120 120\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect x=\"30\" y=\"20\" width=\"60\" height=\"90\" rx=\"5\" stroke=\"#455A64\" stroke-width=\"2\" fill=\"#F0F4F8\"/>\n<rect x=\"20\" y=\"40\" width=\"80\" height=\"20\" rx=\"3\" fill=\"#78909C\" stroke=\"#455A64\" stroke-width=\"2\"/>\n<rect x=\"55\" y=\"10\" width=\"10\" height=\"30\" fill=\"#78909C\" stroke=\"#455A64\" stroke-width=\"2\"/>\n<circle cx=\"40\" cy=\"80\" r=\"3\" fill=\"#4FC3F7\"/>\n<circle cx=\"60\" cy=\"95\" r=\"3\" fill=\"#4FC3F7\"/>\n<circle cx=\"80\" cy=\"75\" r=\"3\" fill=\"#4FC3F7\"/>\n<circle cx=\"50\" cy=\"105\" r=\"3\" fill=\"#4FC3F7\"/>\n<circle cx=\"70\" cy=\"90\" r=\"3\" fill=\"#4FC3F7\"/>\n<circle cx=\"45\" cy=\"90\" r=\"3\" fill=\"#4FC3F7\"/>\n</svg>\n```\n\n```tsx file=\"components/interactive-problem.tsx\"\n\"use client\"\n\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Alert, AlertTitle, AlertDescription } from '@/components/ui/alert';\nimport { CheckCircle2, XCircle, Lightbulb } from 'lucide-react';\n\ninterface InteractiveProblemProps {\n  correctAnswer: number;\n  unit: string;\n  id: string;\n  hint?: string;\n}\n\nexport default function InteractiveProblem({ correctAnswer, unit, id, hint }: InteractiveProblemProps) {\n  const [inputValue, setInputValue] = useState('');\n  const [feedback, setFeedback] = useState<{\n    type: 'correct' | 'incorrect' | null;\n    message: string;\n  } | null>(null);\n\n  const handleCheckAnswer = () => {\n    const userAnswer = parseFloat(inputValue);\n    if (isNaN(userAnswer)) {\n      setFeedback({ type: 'incorrect', message: 'Please enter a valid number.' });\n      return;\n    }\n\n    // Allow for small floating point inaccuracies\n    if (Math.abs(userAnswer - correctAnswer) < 0.01) {\n      setFeedback({ type: 'correct', message: 'Excellent! You nailed it. You understand the relationship.' });\n    } else {\n      setFeedback({ type: 'incorrect', message: `Not quite. Take another look at the ratios. Remember to check your calculations.` });\n    }\n  };\n\n  return (\n    <div className=\"space-y-4 rounded-md border p-4\">\n      {hint && (\n        <Alert>\n          <Lightbulb className=\"h-4 w-4\" />\n          <AlertTitle>Hint</AlertTitle>\n          <AlertDescription>\n            {hint}\n          </AlertDescription>\n        </Alert>\n      )}\n      <div className=\"flex flex-col sm:flex-row items-center gap-2\">\n        <Input\n          id={id}\n          type=\"number\"\n          value={inputValue}\n          onChange={(e) => setInputValue(e.target.value)}\n          placeholder={`Enter your answer in ${unit}`}\n          aria-label={`Enter your answer for problem ${id}`}\n        />\n        <Button onClick={handleCheckAnswer} className=\"w-full sm:w-auto\">Check Answer</Button>\n      </div>\n      {feedback && (\n        <Alert variant={feedback.type === 'correct' ? 'success' : 'destructive'}>\n          {feedback.type === 'correct' ? <CheckCircle2 className=\"h-4 w-4\" /> : <XCircle className=\"h-4 w-4\" />}\n          <AlertTitle>{feedback.type === 'correct' ? 'Correct!' : 'Try Again'}</AlertTitle>\n          <AlertDescription>{feedback.message}</AlertDescription>\n        </Alert>\n      )}\n    </div>\n  );\n}\n```\n\n```tsx file=\"app/layout.tsx\"\nimport type { Metadata } from \"next\";\nimport { Inter } from \"next/font/google\";\nimport \"./globals.css\";\n\nconst inter = Inter({ subsets: [\"latin\"] });\n\nexport const metadata: Metadata = {\n  title: \"Chemistry Problem Solver\",\n  description: \"An interactive webpage to learn chemistry modeling and problem-solving.\",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\">\n      <body className={inter.className}>\n        <main className=\"bg-slate-50 min-h-screen\">\n          {children}\n        </main>\n      </body>\n    </html>\n  );\n}\n```\n\n```tsx file=\"app/page.tsx\"\nimport Image from 'next/image';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { Beaker, BookOpen, BrainCircuit, Target } from \"lucide-react\";\nimport InteractiveProblem from '@/components/interactive-problem';\n\nexport default function HomePage() {\n  return (\n    <div className=\"container mx-auto p-4 sm:p-6 lg:p-8\">\n      <header className=\"text-center mb-8\">\n        <h1 className=\"text-4xl font-bold tracking-tight text-slate-900 sm:text-5xl\">\n          The Chemistry Modeler's Toolkit\n        </h1>\n        <p className=\"mt-4 text-lg text-slate-600\">\n          Learn to think like a scientist by solving problems, building models, and transferring your skills.\n        </p>\n      </header>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        <div className=\"lg:col-span-2 space-y-8\">\n          \n          {/* Section 1: The Core Problem */}\n          <Card>\n            <CardHeader className=\"flex flex-row items-center gap-4\">\n              <Image src=\"/student-scientist.svg\" alt=\"Student scientist character\" width={80} height={80} />\n              <div>\n                <CardTitle className=\"text-3xl\">Let's Solve a Problem!</CardTitle>\n                <CardDescription>We'll start with a real-world chemistry scenario.</CardDescription>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <Alert>\n                <Target className=\"h-4 w-4\" />\n                <AlertTitle>The Challenge</AlertTitle>\n                <AlertDescription className=\"text-lg\">\n                  A chemical reaction produces <strong>15.0 g</strong> of a compound when <strong>5.0 g</strong> of reactant A is used. The mass ratio between the product and reactant A is always constant. How much of the same compound will be produced if <strong>12.0 g</strong> of reactant A is used?\n                </AlertDescription>\n              </Alert>\n            </CardContent>\n          </Card>\n\n          {/* Section 2: Building Understanding with CRA */}\n          <Card>\n            <CardHeader>\n              <CardTitle>From Concrete to Abstract: How Scientists Think</CardTitle>\n              <CardDescription>We use the CRA (Concrete-Representational-Abstract) approach to build deep understanding.</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div>\n                <h4 className=\"font-semibold text-lg mb-2\">1. Concrete: The Real World</h4>\n                <div className=\"flex items-center gap-4 p-4 bg-slate-100 rounded-md\">\n                  <Image src=\"/lab-setup.svg\" alt=\"Lab beakers and flasks\" width={100} height={66} />\n                  <p>Imagine you're baking. A recipe calls for 2 cups of flour to make 1 loaf of bread. This is a fixed ratio. In chemistry, substances in a reaction combine in fixed ratios by mass. This is a fundamental law!</p>\n                </div>\n              </div>\n              <div>\n                <h4 className=\"font-semibold text-lg mb-2\">2. Representational: Visual Models</h4>\n                <p>We can represent this relationship with a simple model. Think of it as a machine: for every chunk of reactant A you put in, you get a consistently larger chunk of product out.</p>\n                <div className=\"text-center font-mono p-4 my-2 bg-gray-800 text-white rounded-md\">\n                  [ 5.0 g Reactant A ]  ---(Reaction)---&gt;  [ 15.0 g Product ]\n                </div>\n              </div>\n              <div>\n                <h4 className=\"font-semibold text-lg mb-2\">3. Abstract: The Principle & Formula</h4>\n                <p>The core scientific principle here is the <strong>Law of Definite Proportions</strong>. It states that a chemical compound always contains its component elements in fixed ratio (by mass). We can express this as a formula:</p>\n                <div className=\"text-center font-semibold text-xl p-4 my-2 bg-slate-100 rounded-md\">\n                  Ratio = Mass of Product / Mass of Reactant A\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n           {/* Section 3: The F.O.P.S. Strategy */}\n          <Card>\n            <CardHeader>\n              <CardTitle>A Strategy for Success: F.O.P.S.</CardTitle>\n              <CardDescription>Let's break down the problem with a structured approach.</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Accordion type=\"single\" collapsible className=\"w-full\">\n                <AccordionItem value=\"item-1\">\n                  <AccordionTrigger className=\"text-lg font-bold\">F - Find the Core Principle</AccordionTrigger>\n                  <AccordionContent>\n                    What's the fundamental chemistry concept at play? We've already identified it: the <strong>Law of Definite Proportions</strong>. The ratio of product mass to reactant mass is constant.\n                  </AccordionContent>\n                </AccordionItem>\n                <AccordionItem value=\"item-2\">\n                  <AccordionTrigger className=\"text-lg font-bold\">O - Organize the Information</AccordionTrigger>\n                  <AccordionContent>\n                    Let's list what we know and what we need to find in a table.\n                    <table className=\"w-full mt-2 text-left border-collapse\">\n                      <thead>\n                        <tr><th className=\"border p-2 bg-slate-100\">Quantity</th><th className=\"border p-2 bg-slate-100\">Value</th></tr>\n                      </thead>\n                      <tbody>\n                        <tr><td className=\"border p-2\">Initial Reactant A Mass</td><td className=\"border p-2\">5.0 g</td></tr>\n                        <tr><td className=\"border p-2\">Initial Product Mass</td><td className=\"border p-2\">15.0 g</td></tr>\n                        <tr><td className=\"border p-2\">New Reactant A Mass</td><td className=\"border p-2\">12.0 g</td></tr>\n                        <tr><td className=\"border p-2 font-semibold\">New Product Mass</td><td className=\"border p-2 font-semibold text-red-600\">? (This is our unknown)</td></tr>\n                      </tbody>\n                    </table>\n                  </AccordionContent>\n                </AccordionItem>\n                <AccordionItem value=\"item-3\">\n                  <AccordionTrigger className=\"text-lg font-bold\">P - Plan Your Attack</AccordionTrigger>\n                  <AccordionContent className=\"space-y-2\">\n                    <p>1. Calculate the constant mass ratio using the initial data.</p>\n                    <p>2. Use this constant ratio and the new reactant mass to solve for the new product mass.</p>\n                  </AccordionContent>\n                </AccordionItem>\n                <AccordionItem value=\"item-4\">\n                  <AccordionTrigger className=\"text-lg font-bold\">S - Solve the Problem</AccordionTrigger>\n                  <AccordionContent className=\"space-y-2\">\n                    <p><strong>Step 1: Find the ratio.</strong></p>\n                    <p className=\"pl-4 font-mono\">Ratio = 15.0 g Product / 5.0 g Reactant A = 3.0</p>\n                    <p><strong>Step 2: Use the ratio to find the new mass.</strong></p>\n                    <p className=\"pl-4 font-mono\">New Product Mass = New Reactant Mass * Ratio</p>\n                    <p className=\"pl-4 font-mono\">New Product Mass = 12.0 g * 3.0 = <strong>36.0 g</strong></p>\n                  </AccordionContent>\n                </AccordionItem>\n              </Accordion>\n            </CardContent>\n          </Card>\n          \n          {/* Section 4: Your Turn! */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Now, You Try It!</CardTitle>\n              <CardDescription>Enter your calculated answer for the main problem below.</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <InteractiveProblem correctAnswer={36.0} unit=\"g\" id=\"main-problem\" />\n            </CardContent>\n          </Card>\n\n        </div>\n\n        <aside className=\"lg:col-span-1 space-y-8\">\n          \n          {/* Metacognition */}\n          <Card className=\"sticky top-8\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\"><BrainCircuit />Metacognition Checkpoint</CardTitle>\n              <CardDescription>Good scientists think about their thinking.</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ul className=\"list-disc list-inside space-y-2 text-slate-700\">\n                <li>What is the core principle this problem is testing?</li>\n                <li>How did I organize the knowns and unknowns?</li>\n                <li>What was my plan before I started calculating?</li>\n                <li>Does my final answer make sense? (If I use more reactant, I should get more product).</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          {/* Transfer Problems */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\"><BookOpen />Transfer Your Knowledge</CardTitle>\n              <CardDescription>Apply what you've learned to new situations.</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Accordion type=\"single\" collapsible defaultValue=\"item-1\" className=\"w-full\">\n                <AccordionItem value=\"item-1\">\n                  <AccordionTrigger className=\"font-semibold\">📌 Near-Transfer Problem</AccordionTrigger>\n                  <AccordionContent className=\"space-y-4\">\n                    <p>A reaction produces 12.0 g of a compound when 3.0 g of reactant B is used. How much product will form from 7.5 g of B?</p>\n                    <InteractiveProblem correctAnswer={30.0} unit=\"g\" id=\"near-transfer\" hint=\"This problem uses the exact same proportional reasoning. Find the ratio first!\" />\n                  </AccordionContent>\n                </AccordionItem>\n                <AccordionItem value=\"item-2\">\n                  <AccordionTrigger className=\"font-semibold\">📌 Far-Transfer Problem</AccordionTrigger>\n                  <AccordionContent className=\"space-y-4\">\n                     <div className=\"flex items-center gap-4 p-2 bg-slate-100 rounded-md\">\n                      <Image src=\"/gas-piston.svg\" alt=\"Gas in a piston\" width={80} height={80} />\n                      <p>A gas occupies 10.0 L at 2.0 atm. What was its original volume if it was compressed from that original state to 4.0 atm, assuming temperature and amount of gas remain constant?</p>\n                    </div>\n                    <InteractiveProblem correctAnswer={20.0} unit=\"L\" id=\"far-transfer\" hint=\"This involves an inverse relationship (Boyle's Law: P₁V₁ = P₂V₂), but the modeling is similar. You're solving for an unknown in a proportional system.\" />\n                  </AccordionContent>\n                </AccordionItem>\n              </Accordion>\n            </CardContent>\n          </Card>\n\n        </aside>\n      </div>\n\n       <footer className=\"text-center mt-12 text-slate-500\">\n          <p>&copy; 2024 Vercel AI Tutor. Powered by v0.</p>\n       </footer>\n    </div>\n  );\n}\n```"
}