{
  "content": "<Thinking>\nI will begin by creating a comprehensive plan for the educational webpage.\n\n### 1. Project Structure\n\nThe project will follow the standard Next.js App Router structure. I will create a main page and several components to keep the code organized and maintainable.\n\n*   `app/layout.tsx`: The root layout.\n*   `app/page.tsx`: The main component for the educational webpage.\n*   `components/ui/`: A directory for shadcn/ui components like `Card`, `Button`, `Accordion`, `Tabs`, `Input`, `Label`, and `Separator`. I will generate these as needed.\n*   `components/page-header.tsx`: A component for the main title and introduction.\n*   `components/context-section.tsx`: A component to set the scene and provide context for the chemistry problem. It will include illustrations.\n*   `components/cra-section.tsx`: A component to walk through the Concrete-Representational-Abstract approach. This will feature an interactive visual.\n*   `components/fops-solver.tsx`: The core interactive component for the F.O.P.S. problem-solving strategy. This will be a client component to handle user input and state.\n*   `components/transfer-problems.tsx`: A component that uses tabs to present the near and far transfer problems, likely reusing the `fops-solver` component with different props.\n*   `lib/utils.ts`: Standard file for `cn` utility.\n*   `public/`: Directory for static assets like images.\n\n### 2. Styling and Visuals\n\n*   **Framework:** I'll use Tailwind CSS for styling, which is the default for `create-next-app`.\n*   **Component Library:** I will use shadcn/ui for pre-built, accessible components to create a clean and professional layout. This aligns with the instruction to use this library.\n*   **Color Palette:** I'll use a neutral color scheme (grays, slate) with a contrasting color like green for success states and amber for hints, avoiding blues and indigos as instructed.\n*   **Visuals & Media:**\n    *   I'll create placeholder SVGs or use text descriptions for images to represent:\n        *   A lab bench scenario to set the context.\n        *   Particle-level diagrams (before/after reaction).\n        *   An interactive beaker simulation (which I'll implement with simple state changes).\n    *   Icons from a library like `lucide-react` will be used to enhance UI elements like buttons and section headers.\n\n### 3. Frameworks and Libraries\n\n*   **Next.js:** The core framework, using the App Router.\n*   **React:** For building the UI components.\n*   **Tailwind CSS:** For styling.\n*   **shadcn/ui:** For the component library.\n*   **lucide-react:** For icons.\n\n### 4. Instructional and Component Logic\n\n1.  **Chemistry Problem:** I will create a classic limiting reactant stoichiometry problem: \"In a laboratory experiment, a student adds 25.0 g of solid zinc metal to an aqueous solution containing 60.0 g of silver nitrate (AgNO₃). The reaction forms solid silver and aqueous zinc nitrate (Zn(NO₃)₂). How many grams of silver (Ag) can be produced?\" This is a foundational problem that lends itself well to the required teaching structure.\n\n2.  **`page.tsx`:** This will be the main server component that assembles the page. It will import and arrange the other components in the correct pedagogical order: Header -> Context -> CRA -> F.O.P.S. -> Transfer Problems.\n\n3.  **`context-section.tsx`:** A straightforward server component displaying the problem's background with a visual.\n\n4.  **`cra-section.tsx`:**\n    *   This will be a client component (`\"use client\"`) to manage the state of the interactive beaker.\n    *   It will have three parts:\n        *   **Concrete:** A description of the physical observation with a button to \"Run Simulation.\" Clicking the button will change the visual of the beaker (e.g., from a clear solution to one with solid precipitate).\n        *   **Representational:** Static images showing the arrangement of atoms and ions before and after the reaction.\n        *   **Abstract:** The balanced chemical equation.\n\n5.  **`fops-solver.tsx`:**\n    *   This will be a client component (`\"use client\"`) and the most complex part of the application.\n    *   It will accept the problem's data (text, equations, steps, answers) via props to make it reusable.\n    *   I will use an `Accordion` from shadcn/ui to guide the user through the F, O, P, and S steps.\n    *   **State (`useState`):** It will manage user input for each calculation step, feedback messages (e.g., \"Correct!\", \"Check your units\"), and the final result.\n    *   **Logic:** It will contain functions to validate user input against the correct answers (allowing for minor floating-point variations) and provide immediate feedback. This guided practice is central to the scaffolding strategy.\n\n6.  **`transfer-problems.tsx`:**\n    *   This component will use `Tabs` from shadcn/ui to switch between the \"Near Transfer\" and \"Far Transfer\" problems.\n    *   **Near Transfer Problem:** Another limiting reactant chemistry problem, but with different substances (e.g., Mg + HCl).\n    *   **Far Transfer Problem:** A non-chemistry problem with the same underlying limiting-reactant logic (e.g., a baking recipe).\n    *   Each tab will render an instance of the `fops-solver.tsx` component, passing the appropriate problem data as props. This demonstrates the component's reusability.\n\n### 5. Caveats and Implementation Details\n\n*   **Responsiveness:** I will use Tailwind's responsive design utilities to ensure the page is usable on various screen sizes.\n*   **Accessibility:** I will use semantic HTML and ensure all interactive elements are accessible, leveraging the accessibility features built into shadcn/ui.\n*   **Lean Files:** I'll adhere to the rule of keeping components lean by breaking down the page into smaller, focused components as planned. The separation of `Context`, `CRA`, `FOPS`, and `Transfer` sections helps achieve this.\n*   **Client vs. Server:** I will correctly place `\"use client\"` directives only on components that require hooks for interactivity (`cra-section.tsx`, `fops-solver.tsx`). The main page and other static components will remain Server Components.\n\nThis plan directly addresses all the user's requirements, from the high-level pedagogical structure (CRA, F.O.P.S., transfer) to the specific implementation details (component structure, interactivity, and styling).\n\n</Thinking>\n\n```bash\nnpx create-next-app@latest . --typescript --eslint --tailwind --app --turbopack --yes\nnpx shadcn-ui@latest init\nnpx shadcn-ui@latest add card button accordion tabs input label separator\nnpm install lucide-react\n```\n\n```tsx file=\"app/layout.tsx\"\nimport type { Metadata } from \"next\";\nimport { Inter } from \"next/font/google\";\nimport \"./globals.css\";\nimport { cn } from \"@/lib/utils\";\n\nconst inter = Inter({ subsets: [\"latin\"] });\n\nexport const metadata: Metadata = {\n  title: \"Interactive Chemistry Problem Solver\",\n  description: \"Learn stoichiometry with a guided, interactive approach.\",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\">\n      <body className={cn(\"min-h-screen bg-background font-sans antialiased\", inter.className)}>\n        {children}\n      </body>\n    </html>\n  );\n}\n```\n\n```tsx file=\"app/page.tsx\"\nimport ContextSection from \"@/components/context-section\";\nimport CraSection from \"@/components/cra-section\";\nimport FopsSolver from \"@/components/fops-solver\";\nimport PageHeader from \"@/components/page-header\";\nimport TransferProblems from \"@/components/transfer-problems\";\nimport { mainProblemData } from \"@/lib/problem-data\";\n\nexport default function Home() {\n  return (\n    <main className=\"flex min-h-screen flex-col items-center justify-start p-4 sm:p-8 md:p-12 lg:p-24\">\n      <div className=\"w-full max-w-4xl space-y-12\">\n        <PageHeader />\n        <ContextSection />\n        <CraSection />\n        \n        <div className=\"space-y-4 text-center\">\n            <h2 className=\"text-3xl font-bold tracking-tighter\">Solve the Core Problem</h2>\n            <p className=\"text-muted-foreground\">\n                Now, let's use the F.O.P.S. strategy to solve our main problem step-by-step.\n            </p>\n        </div>\n        <FopsSolver {...mainProblemData} />\n\n        <TransferProblems />\n      </div>\n    </main>\n  );\n}\n```\n\n```tsx file=\"components/page-header.tsx\"\nexport default function PageHeader() {\n  return (\n    <header className=\"text-center space-y-4\">\n      <h1 className=\"text-4xl sm:text-5xl font-extrabold tracking-tight\">\n        Mastering Stoichiometry\n      </h1>\n      <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n        An interactive guide to building scientific models, from concrete observations to abstract problem-solving.\n      </p>\n    </header>\n  );\n}\n```\n\n```tsx file=\"components/context-section.tsx\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Beaker, FlaskConical, TestTube } from 'lucide-react';\n\nexport default function ContextSection() {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-2xl\">1. Understanding the Context</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"flex flex-col md:flex-row items-center gap-6 p-6 bg-slate-50 dark:bg-slate-900 rounded-lg\">\n          <div className=\"flex gap-4 text-slate-400\">\n            <Beaker className=\"w-16 h-16\" />\n            <FlaskConical className=\"w-16 h-16\" />\n            <TestTube className=\"w-16 h-16\" />\n          </div>\n          <div className=\"flex-1 space-y-2\">\n            <h3 className=\"font-semibold text-lg\">The Scenario: Recovering Silver</h3>\n            <p className=\"text-muted-foreground\">\n              In a lab, a student wants to perform a single displacement reaction to recover pure silver from a silver nitrate solution. This is similar to processes used in metal refining and electronics recycling. Our goal is to predict the theoretical yield of silver.\n            </p>\n          </div>\n        </div>\n        <div className=\"p-4 border-l-4 border-amber-400 bg-amber-50 dark:bg-amber-950 rounded-r-lg\">\n          <h4 className=\"font-bold text-amber-800 dark:text-amber-200\">The Problem</h4>\n          <p className=\"text-amber-700 dark:text-amber-300\">\n            A student adds <strong className=\"font-semibold\">25.0 g of solid zinc (Zn)</strong> to a solution containing <strong className=\"font-semibold\">60.0 g of silver nitrate (AgNO₃)</strong>. How many grams of silver (Ag) can be produced?\n          </p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n```\n\n```tsx file=\"components/cra-section.tsx\"\n\"use client\";\n\nimport { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowRight, PlayCircle } from \"lucide-react\";\nimport { Separator } from \"./ui/separator\";\n\nexport default function CraSection() {\n  const [simulated, setSimulated] = useState(false);\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-2xl\">2. The C-R-A Approach</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Concrete */}\n        <div>\n          <h3 className=\"font-semibold text-lg text-emerald-600 dark:text-emerald-400\">Concrete: See the Reaction</h3>\n          <p className=\"text-muted-foreground mb-4\">\n            First, we observe the physical phenomena. What happens when you mix the reactants?\n          </p>\n          <div className=\"flex flex-col md:flex-row gap-4 items-center p-4 border rounded-lg\">\n            <div className=\"flex-1 space-y-2\">\n              <div className=\"font-mono text-sm p-4 bg-slate-100 dark:bg-slate-800 rounded-md h-24 flex items-center justify-center\">\n                {simulated ? (\n                  <p>Silver crystals (Ag) form! The solution now contains Zinc Nitrate (Zn(NO₃)₂).</p>\n                ) : (\n                  <p>A beaker with clear Silver Nitrate (AgNO₃) solution and a piece of Zinc (Zn).</p>\n                )}\n              </div>\n              <Button onClick={() => setSimulated(true)} disabled={simulated}>\n                <PlayCircle className=\"mr-2 h-4 w-4\" /> Run Simulation\n              </Button>\n            </div>\n            <p className=\"text-sm text-muted-foreground md:w-1/3\">\n              When zinc metal is added to the silver nitrate solution, you observe solid, glittery silver crystals forming. This is a real, observable chemical change.\n            </p>\n          </div>\n        </div>\n\n        <Separator />\n\n        {/* Representational */}\n        <div>\n          <h3 className=\"font-semibold text-lg text-sky-600 dark:text-sky-400\">Representational: Picture the Particles</h3>\n          <p className=\"text-muted-foreground mb-4\">\n            Next, we visualize what's happening at the invisible, microscopic level.\n          </p>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"p-4 bg-slate-50 dark:bg-slate-900 rounded-lg\">\n              <h4 className=\"font-bold text-center mb-2\">Before Reaction</h4>\n              <p className=\"text-center text-sm\">Zn atoms, Ag⁺ ions, NO₃⁻ ions</p>\n              {/* Placeholder for particle diagram */}\n              <div className=\"w-full h-24 rounded bg-slate-200 dark:bg-slate-700 flex items-center justify-center text-xs text-muted-foreground\">[Particle Diagram: Before]</div>\n            </div>\n            <div className=\"p-4 bg-slate-50 dark:bg-slate-900 rounded-lg\">\n              <h4 className=\"font-bold text-center mb-2\">After Reaction</h4>\n              <p className=\"text-center text-sm\">Ag atoms, Zn²⁺ ions, NO₃⁻ ions</p>\n               {/* Placeholder for particle diagram */}\n              <div className=\"w-full h-24 rounded bg-slate-200 dark:bg-slate-700 flex items-center justify-center text-xs text-muted-foreground\">[Particle Diagram: After]</div>\n            </div>\n          </div>\n        </div>\n\n        <Separator />\n\n        {/* Abstract */}\n        <div>\n          <h3 className=\"font-semibold text-lg text-violet-600 dark:text-violet-400\">Abstract: Use the Symbols</h3>\n          <p className=\"text-muted-foreground mb-4\">\n            Finally, we use the language of chemistry to represent the change symbolically.\n          </p>\n          <div className=\"p-4 bg-slate-900 dark:bg-slate-800 text-white rounded-lg text-center\">\n            <p className=\"font-mono text-lg tracking-wider\">\n              Zn<sub>(s)</sub> + 2AgNO₃<sub>(aq)</sub> <ArrowRight className=\"inline-block mx-2\"/> 2Ag<sub>(s)</sub> + Zn(NO₃)₂<sub>(aq)</sub>\n            </p>\n            <p className=\"text-sm text-slate-400 mt-2\">This is the balanced chemical equation that models the reaction.</p>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n```\n\n```tsx file=\"components/fops-solver.tsx\"\n\"use client\";\n\nimport { useState } from \"react\";\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Button } from \"./ui/button\";\nimport { CheckCircle2, XCircle, Lightbulb } from \"lucide-react\";\n\ninterface Step {\n  id: string;\n  label: string;\n  unit: string;\n  correctAnswer: number;\n  explanation: string;\n}\n\ninterface FopsSolverProps {\n  title: string;\n  problem: React.ReactNode;\n  find: React.ReactNode;\n  organize: React.ReactNode;\n  plan: React.ReactNode;\n  steps: Step[];\n}\n\nexport default function FopsSolver({ title, problem, find, organize, plan, steps }: FopsSolverProps) {\n  const [values, setValues] = useState<Record<string, string>>({});\n  const [results, setResults] = useState<Record<string, boolean | null>>({});\n\n  const handleCheck = (id: string, correctAnswer: number) => {\n    const userValue = parseFloat(values[id]);\n    if (isNaN(userValue)) {\n      setResults((prev) => ({ ...prev, [id]: false }));\n      return;\n    }\n    // Check if the answer is within 1% tolerance\n    const isCorrect = Math.abs(userValue - correctAnswer) / correctAnswer < 0.01;\n    setResults((prev) => ({ ...prev, [id]: isCorrect }));\n  };\n\n  const isAllCorrect = steps.every(step => results[step.id] === true);\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>{title}</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"p-4 border-l-4 border-slate-400 bg-slate-50 dark:bg-slate-900 rounded-r-lg mb-6\">\n            {problem}\n        </div>\n        <Accordion type=\"single\" collapsible className=\"w-full\">\n          <AccordionItem value=\"item-1\">\n            <AccordionTrigger className=\"text-xl font-bold\">F - Find</AccordionTrigger>\n            <AccordionContent className=\"text-base p-2\">{find}</AccordionContent>\n          </AccordionItem>\n          <AccordionItem value=\"item-2\">\n            <AccordionTrigger className=\"text-xl font-bold\">O - Organize</AccordionTrigger>\n            <AccordionContent className=\"text-base p-2\">{organize}</AccordionContent>\n          </AccordionItem>\n          <AccordionItem value=\"item-3\">\n            <AccordionTrigger className=\"text-xl font-bold\">P - Plan</AccordionTrigger>\n            <AccordionContent className=\"text-base p-2\">{plan}</AccordionContent>\n          </AccordionItem>\n          <AccordionItem value=\"item-4\">\n            <AccordionTrigger className=\"text-xl font-bold\">S - Solve</AccordionTrigger>\n            <AccordionContent className=\"space-y-6 p-2\">\n              <p className=\"text-muted-foreground\">Complete each calculation. Your answer will be checked for correctness.</p>\n              {steps.map((step) => (\n                <div key={step.id} className=\"space-y-2\">\n                  <Label htmlFor={step.id}>{step.label}</Label>\n                  <div className=\"flex items-center gap-2\">\n                    <Input\n                      id={step.id}\n                      type=\"number\"\n                      placeholder={`Enter value in ${step.unit}`}\n                      value={values[step.id] || \"\"}\n                      onChange={(e) => setValues((prev) => ({ ...prev, [step.id]: e.target.value }))}\n                      className={results[step.id] === true ? \"border-green-500\" : results[step.id] === false ? \"border-red-500\" : \"\"}\n                    />\n                    <span className=\"text-muted-foreground\">{step.unit}</span>\n                    <Button variant=\"outline\" size=\"sm\" onClick={() => handleCheck(step.id, step.correctAnswer)}>Check</Button>\n                    {results[step.id] === true && <CheckCircle2 className=\"text-green-500\" />}\n                    {results[step.id] === false && <XCircle className=\"text-red-500\" />}\n                  </div>\n                  {results[step.id] === true && (\n                    <p className=\"text-sm text-green-600 dark:text-green-400\">{step.explanation}</p>\n                  )}\n                   {results[step.id] === false && (\n                    <p className=\"text-sm text-red-600 dark:text-red-400\">Not quite. Double-check your calculation or formula.</p>\n                  )}\n                </div>\n              ))}\n              {isAllCorrect && (\n                 <div className=\"mt-6 p-4 border-t-4 border-emerald-500 bg-emerald-50 dark:bg-emerald-950 rounded-b-lg text-center\">\n                    <h3 className=\"font-bold text-lg text-emerald-800 dark:text-emerald-200\">Excellent Work!</h3>\n                    <p className=\"text-emerald-700 dark:text-emerald-300\">You've successfully solved the problem and found the theoretical yield of silver.</p>\n                 </div>\n              )}\n            </AccordionContent>\n          </AccordionItem>\n        </Accordion>\n      </CardContent>\n    </Card>\n  );\n}\n```\n\n```tsx file=\"components/transfer-problems.tsx\"\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from \"@/components/ui/tabs\";\nimport FopsSolver from \"./fops-solver\";\nimport { nearTransferProblemData, farTransferProblemData } from \"@/lib/problem-data\";\nimport { Separator } from \"./ui/separator\";\n\nexport default function TransferProblems() {\n  return (\n    <div className=\"space-y-8 pt-8\">\n        <Separator />\n        <div className=\"space-y-4 text-center\">\n            <h2 className=\"text-3xl font-bold tracking-tighter\">🔁 Transfer Your Skills</h2>\n            <p className=\"text-muted-foreground max-w-2xl mx-auto\">\n                True mastery means applying concepts in new situations. Let's test your skills with near and far transfer problems.\n            </p>\n        </div>\n      <Tabs defaultValue=\"near\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"near\">📌 Near Transfer</TabsTrigger>\n          <TabsTrigger value=\"far\">📌 Far Transfer</TabsTrigger>\n        </TabsList>\n        <TabsContent value=\"near\">\n          <FopsSolver {...nearTransferProblemData} />\n        </TabsContent>\n        <TabsContent value=\"far\">\n          <FopsSolver {...farTransferProblemData} />\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n```\n\n```ts file=\"lib/problem-data.tsx\"\n// Using .tsx to allow JSX in problem descriptions\n\nconst mainProblemData = {\n  title: \"A Stoichiometry Challenge\",\n  problem: (\n    <p>\n      25.0 g of Zn is added to 60.0 g of AgNO₃. How many grams of Ag are produced?\n      <br />\n      <span className=\"font-mono text-sm text-muted-foreground\">\n        Zn + 2AgNO₃ → 2Ag + Zn(NO₃)₂\n      </span>\n    </p>\n  ),\n  find: (\n    <p>\n      The core principle is <strong>limiting reactant stoichiometry</strong>. We\n      need to find which reactant runs out first to determine the maximum amount\n      of product that can be formed.\n    </p>\n  ),\n  organize: (\n    <ul className=\"list-disc pl-5 space-y-2\">\n      <li>\n        <strong>Knowns:</strong> 25.0 g Zn, 60.0 g AgNO₃\n      </li>\n      <li>\n        <strong>Molar Masses:</strong> Zn ≈ 65.38 g/mol, AgNO₃ ≈ 169.87 g/mol, Ag ≈ 107.87 g/mol\n      </li>\n      <li>\n        <strong>Unknown:</strong> Mass of Ag (g)\n      </li>\n    </ul>\n  ),\n  plan: (\n    <ol className=\"list-decimal pl-5 space-y-2\">\n      <li>Convert the mass of each reactant (Zn and AgNO₃) to moles.</li>\n      <li>\n        Use the mole ratio from the balanced equation to find the moles of Ag\n        that could be produced from each reactant.\n      </li>\n      <li>\n        The reactant that produces the <strong>smaller</strong> amount of Ag is the\n        limiting reactant.\n      </li>\n      <li>\n        Convert the moles of Ag (from the limiting reactant) back to grams.\n      </li>\n    </ol>\n  ),\n  steps: [\n    {\n      id: \"moles-zn\",\n      label: \"1. Calculate moles of Zinc (Zn)\",\n      unit: \"mol\",\n      correctAnswer: 0.382,\n      explanation: \"Calculation: 25.0 g / 65.38 g/mol = 0.382 mol Zn\"\n    },\n    {\n      id: \"moles-agno3\",\n      label: \"2. Calculate moles of Silver Nitrate (AgNO₃)\",\n      unit: \"mol\",\n      correctAnswer: 0.353,\n      explanation: \"Calculation: 60.0 g / 169.87 g/mol = 0.353 mol AgNO₃\"\n    },\n    {\n      id: \"moles-ag-from-zn\",\n      label: \"3. Moles of Ag produced from Zn\",\n      unit: \"mol Ag\",\n      correctAnswer: 0.764,\n      explanation: \"Mole ratio is 2 Ag : 1 Zn. So, 0.382 mol Zn * 2 = 0.764 mol Ag\"\n    },\n    {\n      id: \"moles-ag-from-agno3\",\n      label: \"4. Moles of Ag produced from AgNO₃\",\n      unit: \"mol Ag\",\n      correctAnswer: 0.353,\n      explanation: \"Mole ratio is 2 Ag : 2 AgNO₃ (or 1:1). So, 0.353 mol AgNO₃ produces 0.353 mol Ag. AgNO₃ is the limiting reactant!\"\n    },\n    {\n      id: \"grams-ag\",\n      label: \"5. Final Answer: Mass of Silver (Ag) produced\",\n      unit: \"g\",\n      correctAnswer: 38.1,\n      explanation: \"Calculation: 0.353 mol Ag * 107.87 g/mol = 38.1 g Ag\"\n    },\n  ],\n};\n\nconst nearTransferProblemData = {\n  title: \"Near Transfer: Another Reaction\",\n  problem: (\n     <p>\n      4.86 g of Mg reacts with 10.0 g of HCl. How many grams of H₂ are produced?\n      <br />\n      <span className=\"font-mono text-sm text-muted-foreground\">\n        Mg + 2HCl → MgCl₂ + H₂\n      </span>\n    </p>\n  ),\n  find: <p>This is also a <strong>limiting reactant</strong> problem. The structure is identical to the first one, just with different chemicals.</p>,\n  organize: (\n     <ul className=\"list-disc pl-5 space-y-2\">\n      <li><strong>Knowns:</strong> 4.86 g Mg, 10.0 g HCl</li>\n      <li><strong>Molar Masses:</strong> Mg ≈ 24.31 g/mol, HCl ≈ 36.46 g/mol, H₂ ≈ 2.02 g/mol</li>\n      <li><strong>Unknown:</strong> Mass of H₂ (g)</li>\n    </ul>\n  ),\n  plan: <p>The plan is the same: Convert grams to moles for each reactant, use the mole ratio to find the potential yield of H₂, identify the limiting reactant, and convert moles of H₂ to grams.</p>,\n  steps: [\n     {\n      id: \"moles-mg\",\n      label: \"1. Calculate moles of Magnesium (Mg)\",\n      unit: \"mol\",\n      correctAnswer: 0.200,\n      explanation: \"Calculation: 4.86 g / 24.31 g/mol = 0.200 mol Mg\"\n    },\n     {\n      id: \"moles-hcl\",\n      label: \"2. Calculate moles of Hydrochloric Acid (HCl)\",\n      unit: \"mol\",\n      correctAnswer: 0.274,\n      explanation: \"Calculation: 10.0 g / 36.46 g/mol = 0.274 mol HCl\"\n    },\n     {\n      id: \"moles-h2-from-mg\",\n      label: \"3. Moles of H₂ produced from Mg\",\n      unit: \"mol H₂\",\n      correctAnswer: 0.200,\n      explanation: \"Mole ratio is 1 H₂ : 1 Mg. So, 0.200 mol Mg produces 0.200 mol H₂.\"\n    },\n     {\n      id: \"moles-h2-from-hcl\",\n      label: \"4. Moles of H₂ produced from HCl\",\n      unit: \"mol H₂\",\n      correctAnswer: 0.137,\n      explanation: \"Mole ratio is 1 H₂ : 2 HCl. So, 0.274 mol HCl / 2 = 0.137 mol H₂. HCl is limiting!\"\n    },\n     {\n      id: \"grams-h2\",\n      label: \"5. Final Answer: Mass of Hydrogen (H₂) produced\",\n      unit: \"g\",\n      correctAnswer: 0.277,\n      explanation: \"Calculation: 0.137 mol H₂ * 2.02 g/mol = 0.277 g H₂\"\n    },\n  ],\n};\n\nconst farTransferProblemData = {\n  title: \"Far Transfer: A Baking Analogy\",\n  problem: <p>A recipe needs 2 cups of flour and 1 cup of sugar for 24 cookies. You have 7 cups of flour and 3.5 cups of sugar. What's the maximum number of cookies you can bake?</p>,\n  find: <p>This is a \"limiting ingredient\" problem. It shares the same core logic as a limiting reactant problem: what runs out first?</p>,\n  organize: (\n     <ul className=\"list-disc pl-5 space-y-2\">\n      <li><strong>Recipe Ratio:</strong> 2 flour : 1 sugar → 24 cookies</li>\n      <li><strong>Have:</strong> 7 cups flour, 3.5 cups sugar</li>\n      <li><strong>Unknown:</strong> Max number of cookies</li>\n    </ul>\n  ),\n  plan: <p>Calculate how many cookies you can make with each ingredient separately. The smaller number is the correct answer.</p>,\n  steps: [\n    {\n      id: \"cookies-from-flour\",\n      label: \"1. Cookies possible from 7 cups of flour\",\n      unit: \"cookies\",\n      correctAnswer: 84,\n      explanation: \"Calculation: (7 cups flour / 2 cups per batch) * 24 cookies/batch = 84 cookies\"\n    },\n    {\n      id: \"cookies-from-sugar\",\n      label: \"2. Cookies possible from 3.5 cups of sugar\",\n      unit: \"cookies\",\n      correctAnswer: 84,\n      explanation: \"Calculation: (3.5 cups sugar / 1 cup per batch) * 24 cookies/batch = 84 cookies. In this case, you have the exact ratio!\"\n    },\n    {\n      id: \"max-cookies\",\n      label: \"3. Final Answer: Maximum cookies you can bake\",\n      unit: \"cookies\",\n      correctAnswer: 84,\n      explanation: \"Both ingredients produce the same amount, so you can make 84 cookies without any leftover ingredients (except for the ones you didn't use).\"\n    }\n  ]\n};\n\nexport { mainProblemData, nearTransferProblemData, farTransferProblemData };\n```"
}