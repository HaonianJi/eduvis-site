{
  "content": "<Thinking>\nI will now begin the planning process for the educational chemistry webpage.\n\n**1. Project Structure and File Organization**\nThe project will be a single-page application built with Next.js and the App Router. The file structure will be modular to keep the code clean and maintainable.\n\n-   `app/layout.tsx`: Root layout, sets up the basic HTML structure, fonts, and Tailwind CSS.\n-   `app/page.tsx`: The main page component. It will act as the container for the entire lesson, importing and arranging the different instructional sections. This will be a Server Component.\n-   `app/globals.css`: Global styles, including Tailwind CSS base styles and any custom styles.\n-   `components/`: A directory for all the React components.\n    -   `components/ui/`: This directory will house the components from shadcn/ui (e.g., `Card`, `Button`, `Input`, `Accordion`, `Progress`).\n    -   `components/introduction.tsx`: A component to introduce the problem with a real-world scenario and visuals.\n    -   `components/interactive-lab.tsx`: A client-side component (`\"use client\"`) for the interactive simulation, allowing students to visualize the reaction.\n    -   `components/guided-solution.tsx`: A component that walks students through the F.O.P.S. strategy using an accordion to reveal steps progressively.\n    -   `components/transfer-practice.tsx`: A client-side component (`\"use client\"`) containing the near-transfer and far-transfer problems, with input fields and answer-checking logic.\n-   `public/`: A directory for static assets like images (e.g., a cartoon scientist, lab equipment diagrams).\n\n**2. Styling and Visual Design**\n-   **Framework**: Tailwind CSS for utility-first styling.\n-   **Component Library**: shadcn/ui for pre-built, accessible components like `Card`, `Button`, `Input`, and `Accordion`. This ensures a consistent and professional look.\n-   **Color Palette**: A clean, academic theme. I'll use a neutral background (white or light gray) with a primary accent color like a muted green or teal for headings, buttons, and interactive elements. I will avoid blue and indigo as per the instructions.\n-   **Layout**: The page will be a single-column, responsive layout that works well on all screen sizes. I will use `flexbox` and `grid` to structure the content.\n-   **Typography**: I'll use a clear, readable font like Inter (available via `next/font`).\n\n**3. Images and Media**\nTo make the page engaging, I'll incorporate simple, clean visuals:\n-   A friendly comic-style illustration of a student scientist to act as a guide.\n-   SVG icons from `lucide-react` for lab equipment like beakers and flasks.\n-   A simple diagram illustrating the reaction at the particle level (e.g., NaHCO₃ and CH₃COOH molecules reacting to form CO₂, H₂O, and NaCH₃COO).\n\n**4. Core Chemistry Problem and Pedagogical Flow**\nI will invent a classic stoichiometry problem suitable for an introductory chemistry course.\n\n-   **Core Problem**: \"A student is running an experiment reacting 15.0 grams of baking soda (sodium bicarbonate, NaHCO₃) with excess vinegar (acetic acid). How many grams of carbon dioxide (CO₂) gas will be produced?\"\n\nThe instructional flow will follow the user's detailed plan:\n1.  **Context (Introduction)**: Start with the real-world scenario of a baking soda and vinegar volcano, using visuals to draw the learner in. This corresponds to the **Concrete** stage of the CRA model.\n2.  **Interactive Simulation (Interactive Lab)**: A simple simulation where a student can adjust the amount of baking soda and see a visual representation of the CO₂ produced. This reinforces the concrete understanding and bridges to the representational.\n3.  **Guided Solution (F.O.P.S.)**:\n    -   **F - Find**: Identify the goal and the core principle (stoichiometry).\n    -   **O - Organize**: Present the balanced chemical equation (the **Representational** stage) and list knowns/unknowns in a table.\n    -   **P - Plan**: Outline the calculation path: grams → moles → moles → grams.\n    -   **S - Solve**: Execute the plan with clear calculations (the **Abstract** stage).\n    -   **Metacognitive Prompts**: Throughout the F.O.P.S. guide, I'll include callout boxes with questions like \"Why is balancing the equation the first critical step?\" and \"How can we check if our answer makes sense?\".\n4.  **Transfer Practice**:\n    -   **Near-Transfer Problem**: Same reaction, but ask for the mass of a different product (e.g., sodium acetate) from a different starting mass of baking soda. This tests the direct application of the learned procedure.\n    -   **Far-Transfer Problem**: A problem with a completely different context but the same underlying proportional reasoning structure. For example, a recipe-scaling problem: \"A pancake recipe requires 2 cups of flour to make 12 pancakes. If you only have 1.5 cups of flour, how many pancakes can you make?\" This forces the student to abstract the concept of limiting reactants and ratios.\n\n**5. Frameworks and Libraries**\n-   **Next.js 14 (App Router)**: The core framework.\n-   **React & TypeScript**: For building the UI and ensuring type safety.\n-   **Tailwind CSS**: For styling.\n-   **shadcn/ui & lucide-react**: For UI components and icons.\n\n**6. Implementation Details and Caveats**\n-   Client components (`interactive-lab.tsx`, `transfer-practice.tsx`) will be clearly marked with `\"use client\"` and will use React hooks like `useState` to manage user interactions, inputs, and feedback state.\n-   The main page (`app/page.tsx`) will remain a Server Component for optimal performance, composing the various client and server components.\n-   Accessibility will be a priority. I will use semantic HTML (`<main>`, `<section>`, `<header>`), provide `alt` text for all images, and use ARIA attributes where necessary. The use of shadcn/ui helps ensure a baseline of accessibility.\n-   The code will be broken down into small, focused components to adhere to the \"lean files\" rule. No single file will become overly complex.\n\nThis detailed plan ensures that the final generated code will be well-structured, instructionally sound, and fully aligned with all the user's specific requirements for creating an engaging and effective educational webpage.\n\n</Thinking>\n\n```sh\nnpx create-next-app@latest . --typescript --eslint --tailwind --app --turbopack --yes\n```\n\nNext, initialize `shadcn/ui`. Choose **Default** for the base color, **New York** for the style, and accept the defaults for the rest.\n\n```sh\nnpx shadcn-ui@latest init\n```\n\nNow, add the necessary `shadcn/ui` components:\n\n```sh\nnpx shadcn-ui@latest add card button input accordion progress label\n```\n\nHere is the code for the educational chemistry webpage.\n\n```tsx file=\"app/layout.tsx\"\nimport type { Metadata } from 'next'\nimport { Inter } from 'next/font/google'\nimport './globals.css'\nimport { cn } from '@/lib/utils'\n\nconst inter = Inter({ subsets: ['latin'], variable: '--font-sans' })\n\nexport const metadata: Metadata = {\n  title: 'Chemistry Problem Solver',\n  description: 'An interactive guide to solving stoichiometry problems.',\n}\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode\n}>) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body\n        className={cn(\n          'min-h-screen bg-background font-sans antialiased',\n          inter.variable\n        )}\n      >\n        {children}\n      </body>\n    </html>\n  )\n}\n```\n\n```css file=\"app/globals.css\"\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 84% 4.9%;\n\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 84% 4.9%;\n\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 84% 4.9%;\n\n    --primary: 142.1 76.2% 36.3%;\n    --primary-foreground: 355.7 100% 97.3%;\n\n    --secondary: 210 40% 96.1%;\n    --secondary-foreground: 222.2 47.4% 11.2%;\n\n    --muted: 210 40% 96.1%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n\n    --accent: 210 40% 96.1%;\n    --accent-foreground: 222.2 47.4% 11.2%;\n\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 210 40% 98%;\n\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: 142.1 76.2% 36.3%;\n\n    --radius: 0.5rem;\n  }\n\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n\n    --primary: 142.1 76.2% 36.3%;\n    --primary-foreground: 355.7 100% 97.3%;\n\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n\n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 142.1 76.2% 36.3%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n```\n\n```tsx file=\"app/page.tsx\"\nimport Introduction from '@/components/introduction'\nimport InteractiveLab from '@/components/interactive-lab'\nimport GuidedSolution from '@/components/guided-solution'\nimport TransferPractice from '@/components/transfer-practice'\nimport { Beaker } from 'lucide-react'\n\nexport default function HomePage() {\n  return (\n    <main className=\"flex min-h-screen flex-col items-center justify-start bg-gray-50 p-4 sm:p-8 md:p-12\">\n      <div className=\"w-full max-w-4xl space-y-12\">\n        <header className=\"text-center\">\n          <h1 className=\"text-4xl font-bold tracking-tight text-primary sm:text-5xl\">\n            The Stoichiometry Lab\n          </h1>\n          <p className=\"mt-4 text-lg text-muted-foreground\">\n            From Volcanoes to Molecules: Master Chemical Reactions\n          </p>\n        </header>\n\n        <Introduction />\n        <InteractiveLab />\n        <GuidedSolution />\n        <TransferPractice />\n\n        <footer className=\"text-center text-muted-foreground\">\n          <p>You've completed the lab. Great work, scientist!</p>\n        </footer>\n      </div>\n    </main>\n  )\n}\n```\n\n```tsx file=\"components/introduction.tsx\"\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { TestTube } from 'lucide-react'\n\nexport default function Introduction() {\n  return (\n    <section>\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-2xl\">\n            <TestTube className=\"h-6 w-6 text-primary\" />\n            The Core Problem\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <p className=\"text-lg\">\n            A student is performing a classic home experiment: creating a\n            \"volcano\" by reacting baking soda with vinegar. They carefully\n            measure out <strong>15.0 grams of baking soda</strong> (sodium\n            bicarbonate, NaHCO₃) and pour in plenty of vinegar (acetic acid,\n            CH₃COOH), ensuring the baking soda is the limiting reactant.\n          </p>\n          <div className=\"rounded-md border border-primary/20 bg-primary/5 p-4\">\n            <p className=\"text-center text-xl font-semibold text-primary\">\n              The question is: How many grams of carbon dioxide (CO₂) gas will\n              be produced?\n            </p>\n          </div>\n          <div className=\"flex items-start gap-4 pt-4\">\n            {/* A placeholder for a scientist illustration */}\n            <div className=\"flex h-16 w-16 items-center justify-center rounded-full bg-secondary\">\n              <span className=\"text-3xl\">👩‍🔬</span>\n            </div>\n            <div>\n              <h3 className=\"font-semibold\">Your Guide's Note:</h3>\n              <p className=\"text-muted-foreground\">\n                This might seem like a simple volcano, but it's a perfect example\n                of <strong>stoichiometry</strong> – the science of measuring\n                the elements and compounds involved in chemical reactions. Let's\n                break it down together!\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </section>\n  )\n}\n```\n\n```tsx file=\"components/interactive-lab.tsx\"\n'use client'\n\nimport { useState } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Label } from '@/components/ui/label'\nimport { Input } from '@/components/ui/input'\nimport { Progress } from '@/components/ui/progress'\nimport { Beaker, ChevronsUp } from 'lucide-react'\n\nexport default function InteractiveLab() {\n  const [bakingSodaGrams, setBakingSodaGrams] = useState(15.0)\n  const maxGrams = 50\n  const progress = (bakingSodaGrams / maxGrams) * 100\n\n  // Simple representation: more grams = more bubbles\n  const bubbleCount = Math.min(Math.floor(bakingSodaGrams / 2), 25)\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = parseFloat(e.target.value)\n    if (!isNaN(value) && value >= 0 && value <= maxGrams) {\n      setBakingSodaGrams(value)\n    } else if (e.target.value === '') {\n        setBakingSodaGrams(0)\n    }\n  }\n\n  return (\n    <section>\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-2xl\">\n            <Beaker className=\"h-6 w-6 text-primary\" />\n            Interactive Lab Bench (C-R-A: Concrete)\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <p>\n            Let's visualize the reaction. Adjust the amount of baking soda to\n            see how it affects the amount of gas produced. This is the{' '}\n            <strong>Concrete</strong> step: observing the physical phenomenon.\n          </p>\n          <div className=\"grid gap-4 md:grid-cols-2\">\n            <div className=\"space-y-4\">\n              <Label htmlFor=\"baking-soda-input\">\n                Grams of Baking Soda (NaHCO₃):\n              </Label>\n              <Input\n                id=\"baking-soda-input\"\n                type=\"number\"\n                value={bakingSodaGrams}\n                onChange={handleInputChange}\n                max={maxGrams}\n                min=\"0\"\n                step=\"0.1\"\n                className=\"w-40\"\n              />\n              <Progress value={progress} className=\"w-full\" />\n            </div>\n            <div className=\"flex h-48 flex-col items-center justify-end rounded-lg border bg-secondary p-4\">\n              <div className=\"relative h-full w-full\">\n                {Array.from({ length: bubbleCount }).map((_, i) => (\n                  <ChevronsUp\n                    key={i}\n                    className=\"absolute bottom-0 text-muted-foreground/50\"\n                    style={{\n                      left: `${Math.random() * 90}%`,\n                      animation: `bubble-rise ${\n                        Math.random() * 2 + 2\n                      }s infinite ease-in`,\n                    }}\n                  />\n                ))}\n              </div>\n              <Beaker className=\"h-16 w-16 text-primary\" />\n              <div className=\"h-1/3 w-full rounded-b-md bg-primary/20 pt-2 text-center\">\n                <p className=\"text-sm font-medium\">Vinegar + Baking Soda</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n      <style jsx global>{`\n        @keyframes bubble-rise {\n          0% {\n            transform: translateY(0) scale(0.5);\n            opacity: 1;\n          }\n          100% {\n            transform: translateY(-100px) scale(1);\n            opacity: 0;\n          }\n        }\n      `}</style>\n    </section>\n  )\n}\n```\n\n```tsx file=\"components/guided-solution.tsx\"\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from '@/components/ui/accordion'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { AlertCircle, Target, Puzzle, Calculator, CheckCircle } from 'lucide-react'\n\nexport default function GuidedSolution() {\n  return (\n    <section>\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-2xl\">\n            Guided Solution: The F.O.P.S. Method\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"mb-4\">\n            To solve this systematically, we'll use the F.O.P.S. method: Find,\n            Organize, Plan, and Solve. This will guide us from the physical\n            reaction to the abstract calculation.\n          </p>\n          <Accordion type=\"single\" collapsible className=\"w-full\">\n            <AccordionItem value=\"item-1\">\n              <AccordionTrigger className=\"text-xl\">\n                <div className=\"flex items-center gap-2\">\n                  <Target className=\"h-5 w-5 text-primary\" />F: Find the Goal\n                </div>\n              </AccordionTrigger>\n              <AccordionContent className=\"space-y-2 pl-4 text-base\">\n                <p>\n                  Our goal is to calculate the <strong>mass in grams of carbon dioxide (CO₂)</strong> produced from 15.0 g of sodium bicarbonate (NaHCO₃).\n                </p>\n                <p>\n                  The core chemical principle here is <strong>stoichiometry</strong>, which uses mole ratios from a balanced chemical equation to relate the amounts of reactants and products.\n                </p>\n              </AccordionContent>\n            </AccordionItem>\n\n            <AccordionItem value=\"item-2\">\n              <AccordionTrigger className=\"text-xl\">\n                <div className=\"flex items-center gap-2\">\n                  <Puzzle className=\"h-5 w-5 text-primary\" />O: Organize the Information\n                </div>\n              </AccordionTrigger>\n              <AccordionContent className=\"space-y-4 pl-4 text-base\">\n                <p>This is the <strong>Representational</strong> step. We translate the reaction into a chemical equation.</p>\n                <p><strong>Step 1: Write the balanced chemical equation.</strong></p>\n                <div className=\"rounded bg-secondary p-2 font-mono text-center\">\n                  NaHCO₃(aq) + CH₃COOH(aq) → CO₂(g) + H₂O(l) + NaCH₃COO(aq)\n                </div>\n                <p>It's already balanced! The mole ratio between NaHCO₃ and CO₂ is <strong>1:1</strong>.</p>\n                \n                <div className=\"mt-2 rounded-md border border-yellow-500/50 bg-yellow-500/10 p-3\">\n                    <h4 className=\"flex items-center font-semibold text-yellow-700\"><AlertCircle className=\"mr-2 h-5 w-5\" />Metacognitive Check</h4>\n                    <p className=\"text-sm text-yellow-600\">Why is balancing the equation so important? Because the Law of Conservation of Mass dictates that atoms are not created or destroyed in a reaction. The balanced equation ensures we use the correct proportions.</p>\n                </div>\n\n                <p><strong>Step 2: List knowns and unknowns.</strong></p>\n                <ul className=\"list-disc pl-6\">\n                  <li><strong>Known:</strong> Mass of NaHCO₃ = 15.0 g</li>\n                  <li><strong>Unknown:</strong> Mass of CO₂ = ? g</li>\n                  <li><strong>Needed Constants (Molar Masses):</strong>\n                    <ul className=\"list-circle pl-6\">\n                        <li>NaHCO₃: ~84.01 g/mol</li>\n                        <li>CO₂: ~44.01 g/mol</li>\n                    </ul>\n                  </li>\n                </ul>\n              </AccordionContent>\n            </AccordionItem>\n\n            <AccordionItem value=\"item-3\">\n              <AccordionTrigger className=\"text-xl\">\n                <div className=\"flex items-center gap-2\">\n                    <Calculator className=\"h-5 w-5 text-primary\" />P: Plan the Calculation\n                </div>\n              </AccordionTrigger>\n              <AccordionContent className=\"space-y-2 pl-4 text-base\">\n                <p>This is where we connect the representational to the <strong>Abstract</strong>. We can't directly convert grams of one substance to grams of another. We must go through the \"mole bridge\".</p>\n                <div className=\"flex flex-wrap items-center justify-center gap-2 rounded-md bg-secondary p-4 text-center font-semibold\">\n                    <span>Grams NaHCO₃</span>\n                    <span className=\"text-primary\">→</span>\n                    <span>Moles NaHCO₃</span>\n                    <span className=\"text-primary\">→</span>\n                    <span>Moles CO₂</span>\n                    <span className=\"text-primary\">→</span>\n                    <span>Grams CO₂</span>\n                </div>\n              </AccordionContent>\n            </AccordionItem>\n\n            <AccordionItem value=\"item-4\">\n              <AccordionTrigger className=\"text-xl\">\n                <div className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"h-5 w-5 text-primary\" />S: Solve the Problem\n                </div>\n              </AccordionTrigger>\n              <AccordionContent className=\"space-y-4 pl-4 text-base\">\n                <p>Now, we execute the plan step-by-step.</p>\n                <p><strong>Step 1: Convert grams of NaHCO₃ to moles.</strong></p>\n                <div className=\"font-mono rounded bg-secondary p-2\">15.0 g NaHCO₃ × (1 mol NaHCO₃ / 84.01 g) = 0.1786 mol NaHCO₃</div>\n                <p><strong>Step 2: Use the mole ratio to find moles of CO₂.</strong></p>\n                <div className=\"font-mono rounded bg-secondary p-2\">0.1786 mol NaHCO₃ × (1 mol CO₂ / 1 mol NaHCO₃) = 0.1786 mol CO₂</div>\n                <p><strong>Step 3: Convert moles of CO₂ to grams.</strong></p>\n                <div className=\"font-mono rounded bg-secondary p-2\">0.1786 mol CO₂ × (44.01 g / 1 mol CO₂) = 7.86 g CO₂</div>\n                 <div className=\"mt-2 rounded-md border border-green-500/50 bg-green-500/10 p-3\">\n                    <h4 className=\"flex items-center font-semibold text-green-700\"><CheckCircle className=\"mr-2 h-5 w-5\" />Final Answer Check</h4>\n                    <p className=\"text-sm text-green-600\">The final answer is <strong>7.86 g of CO₂</strong>. Does this make sense? The mass of the product is less than the mass of the reactant, which is expected since other products were also formed. The number of significant figures (3) matches our starting value (15.0 g).</p>\n                </div>\n              </AccordionContent>\n            </AccordionItem>\n          </Accordion>\n        </CardContent>\n      </Card>\n    </section>\n  )\n}\n```\n\n```tsx file=\"components/transfer-practice.tsx\"\n'use client'\n\nimport { useState } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\n\nexport default function TransferPractice() {\n  const [nearAnswer, setNearAnswer] = useState('')\n  const [nearFeedback, setNearFeedback] = useState('')\n  const [farAnswer, setFarAnswer] = useState('')\n  const [farFeedback, setFarFeedback] = useState('')\n\n  const checkNearAnswer = () => {\n    const studentAns = parseFloat(nearAnswer)\n    if (studentAns >= 10.2 && studentAns <= 10.4) {\n      setNearFeedback('Correct! You successfully applied the same stoichiometric steps.')\n    } else {\n      setNearFeedback('Not quite. Remember to calculate the molar mass of sodium acetate (NaCH₃COO) and use the 1:1 mole ratio.')\n    }\n  }\n\n  const checkFarAnswer = () => {\n    const studentAns = parseFloat(farAnswer)\n    if (studentAns === 9) {\n      setFarFeedback('Exactly! You recognized the underlying ratio and limiting reactant concept. The flour is the limiting ingredient.')\n    } else {\n      setFarFeedback('Think about the core ratio. If 2 cups of flour make 12 pancakes, how many does 1 cup make? Apply that to the amount you have.')\n    }\n  }\n\n  return (\n    <section className=\"space-y-8\">\n      <Card>\n        <CardHeader>\n          <CardTitle>📌 Near-Transfer Problem</CardTitle>\n          <CardDescription>Same structure, different details.</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <p>\n            Using the same balanced equation, if you start with <strong>20.0 g of baking soda (NaHCO₃)</strong>, how many grams of <strong>sodium acetate (NaCH₃COO)</strong> will be produced? (Molar mass of NaCH₃COO is ~82.03 g/mol).\n          </p>\n          <div className=\"flex flex-col items-start gap-2 sm:flex-row sm:items-center\">\n            <Label htmlFor=\"near-transfer-input\" className=\"whitespace-nowrap\">Your Answer (g):</Label>\n            <Input\n              id=\"near-transfer-input\"\n              type=\"number\"\n              value={nearAnswer}\n              onChange={(e) => setNearAnswer(e.target.value)}\n              className=\"w-40\"\n            />\n            <Button onClick={checkNearAnswer}>Check Answer</Button>\n          </div>\n          {nearFeedback && (\n            <p className={`text-sm font-medium ${nearFeedback.includes('Correct') ? 'text-green-600' : 'text-red-600'}`}>\n              {nearFeedback}\n            </p>\n          )}\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>📌 Far-Transfer Problem</CardTitle>\n          <CardDescription>Different surface, same underlying structure.</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <p>\n            This problem looks different, but it's still about ratios and limiting factors, just like stoichiometry!\n          </p>\n          <p className='font-semibold'>\n            A pancake recipe requires 2 cups of flour to make 12 pancakes. You have plenty of all other ingredients, but only <strong>1.5 cups of flour</strong>. How many pancakes can you make?\n          </p>\n          <div className=\"flex flex-col items-start gap-2 sm:flex-row sm:items-center\">\n            <Label htmlFor=\"far-transfer-input\" className=\"whitespace-nowrap\">Your Answer (pancakes):</Label>\n            <Input\n              id=\"far-transfer-input\"\n              type=\"number\"\n              value={farAnswer}\n              onChange={(e) => setFarAnswer(e.target.value)}\n              className=\"w-40\"\n            />\n            <Button onClick={checkFarAnswer}>Check Answer</Button>\n          </div>\n          {farFeedback && (\n            <p className={`text-sm font-medium ${farFeedback.includes('Exactly') ? 'text-green-600' : 'text-red-600'}`}>\n              {farFeedback}\n            </p>\n          )}\n        </CardContent>\n      </Card>\n    </section>\n  )\n}\n```\n\n```tsx file=\"lib/utils.ts\"\nimport { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n```"
}