{
  "content": "An excellent and detailed instructional plan. Based on your design, I will now generate the Next.js webpage to teach this chemistry problem. The implementation will follow your pedagogical structure, incorporating the CRA model, F.O.P.S. scaffolding, and transfer-focused problems.\n\nHere is the complete code for the educational webpage.\n\n<Thinking>\nI will structure the project into a main page (`app/page.tsx`) that acts as the container, and several components for each distinct section of the lesson. This modular approach aligns with the instructional flow and keeps the code organized.\n\n**Project Structure Plan:**\n\n1.  **`app/page.tsx`**: The main server component that lays out the structure of the entire lesson page. It will import and arrange the section components.\n2.  **`app/components/lesson-section.tsx`**: A reusable wrapper component to provide consistent styling (title, content area) for each major section of the lesson.\n3.  **`app/components/introduction.tsx`**: A component for the introductory scenario, featuring our \"Dr. Beaker\" character and stating the core problem. This will be a static server component.\n4.  **`app/components/interactive-simulation.tsx`**: A client component (`'use client'`) demonstrating the \"Concrete\" step of the CRA model. It will use `useState` and simple CSS animations to visualize the chemical reaction and mass increase.\n5.  **`app/components/fops-walkthrough.tsx`**: A client component (`'use client'`) that interactively guides the student through the F.O.P.S. method. It will include inputs and feedback mechanisms.\n6.  **`app/components/transfer-tasks.tsx`**: A client component (`'use client'`) containing the Near-Transfer and Far-Transfer problems within an accordion for progressive reveal. It will handle student input and answer checking for both problems.\n7.  **`app/components/conclusion.tsx`**: A static server component to summarize the key takeaways and provide a metacognitive checklist.\n8.  **`components/ui/...`**: Standard shadcn/ui components will be used (`Card`, `Button`, `Input`, `Accordion`, `Alert`). I will assume these are already set up.\n9.  **`public/`**: I'll note where to place images for the lab assistant character.\n\n**Styling and Visuals:**\n\n*   **Framework**: Tailwind CSS.\n*   **UI Library**: shadcn/ui for pre-built, accessible components.\n*   **Color Palette**: A professional yet engaging palette. I'll use neutral grays, a primary color for highlights (e.g., slate or sky blue), green for success states, and red for error states.\n*   **Icons**: I will use `lucide-react` for icons to enhance visual communication (e.g., `FlaskConical`, `Scale`, `Lightbulb`, `CheckCircle`, `XCircle`).\n*   **Illustrations**: I'll create a placeholder for an SVG illustration of the lab assistant.\n\n**Frameworks and Libraries:**\n\n*   **Next.js**: App Router will be used.\n*   **React**: `useState` for interactivity in client components.\n*   **shadcn/ui & lucide-react**: For UI components and icons. I'll need to provide the setup commands.\n\n**Caveats & Execution Plan:**\n\n*   I will generate the files one by one, starting with the `package.json` and project setup instructions.\n*   Each component will be self-contained and clearly commented.\n*   Client components will be explicitly marked with `\"use client\"`.\n*   I will provide a placeholder for the `lab-assistant.svg` and instruct the user to create or find one.\n*   The final result will be a single, scrollable webpage that guides the student through the entire learning experience as planned.\n\nThis approach ensures a clean, maintainable, and interactive educational tool that directly implements the user's detailed instructional design.\n</Thinking>\n\nFirst, let's set up the Next.js project and install the necessary dependencies for shadcn/ui and icons.\n\n```sh\nnpx create-next-app@latest . --typescript --eslint --tailwind --app --turbopack --yes\nnpx shadcn-ui@latest init\n```\n\nWhen prompted by `shadcn-ui`, choose your preferred settings. For this example, we'll use:\n\n-   Style: **Default**\n-   Base color: **Slate**\n-   CSS variables: **Yes**\n\nNow, add the components we'll be using:\n\n```sh\nnpx shadcn-ui@latest add card button input accordion alert separator\nnpm install lucide-react\n```\n\nNext, create an image for the lab assistant. You can create your own SVG or use a placeholder. Save it in the `public/` directory.\n\n```text file=\"public/lab-assistant.svg\"\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flask-conical\"><path d=\"M10 2v7.31\"/><path d=\"M14 9.31V2\"/><path d=\"M3 13h18\"/><path d=\"m16 21-1.1-3.3a1 1 0 0 0-1.8 0L12 21h-2l-1.1-3.3a1 1 0 0 0-1.8 0L6 21H4l2.75-8.25A2 2 0 0 1 8.66 11h6.68a2 2 0 0 1 1.91 1.75L20 21h-4Z\"/></svg>\n```\n\nNow, let's create the components for our educational page.\n\nFirst, a reusable `LessonSection` component to keep styling consistent.\n\n```tsx file=\"app/components/lesson-section.tsx\"\nimport * as React from 'react'\nimport { Separator } from '@/components/ui/separator'\n\ninterface LessonSectionProps {\n  title: string\n  description?: string\n  children: React.ReactNode\n}\n\nexport function LessonSection({\n  title,\n  description,\n  children,\n}: LessonSectionProps) {\n  return (\n    <section className=\"py-12 md:py-16\">\n      <div className=\"flex flex-col items-center text-center\">\n        <h2 className=\"text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl\">\n          {title}\n        </h2>\n        {description && (\n          <p className=\"mt-4 max-w-2xl text-muted-foreground md:text-xl\">\n            {description}\n          </p>\n        )}\n      </div>\n      <div className=\"mt-8\">{children}</div>\n      <Separator className=\"mt-16\" />\n    </section>\n  )\n}\n```\n\nNext, the `Introduction` component.\n\n```tsx file=\"app/components/introduction.tsx\"\nimport Image from 'next/image'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Beaker } from 'lucide-react'\n\nexport function Introduction() {\n  return (\n    <div className=\"grid grid-cols-1 gap-8 md:grid-cols-2\">\n      <div className=\"flex flex-col justify-center space-y-4\">\n        <p className=\"text-lg text-muted-foreground\">\n          Hi there! I'm Dr. Beaker, your guide in the lab today. We're working\n          on a fascinating new fertilizer synthesis. We've discovered a\n          reaction where our key ingredient seems to magically 'grow' into a\n          much heavier product. Let's investigate the science behind this!\n        </p>\n        <Card className=\"bg-amber-50 border-amber-200\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Beaker className=\"h-6 w-6 text-amber-600\" />\n              The Core Problem\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-lg font-medium\">\n              A chemical reaction is known to produce a compound with a mass\n              that is <strong>3.5 times greater</strong> than the mass of the\n              reactant consumed. If you use <strong>10.0 grams</strong> of the\n              reactant, how many grams of the product will be formed?\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n      <div className=\"flex items-center justify-center\">\n        <Image\n          src=\"/lab-assistant.svg\"\n          alt=\"Dr. Beaker, the lab assistant.\"\n          width={250}\n          height={250}\n          className=\"text-primary h-64 w-64\"\n        />\n      </div>\n    </div>\n  )\n}\n```\n\nHere's the interactive simulation for the \"Concrete\" step.\n\n```tsx file=\"app/components/interactive-simulation.tsx\"\n'use client'\n\nimport { useState } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Scale, Atom, TestTube } from 'lucide-react'\n\nexport function InteractiveSimulation() {\n  const [isReacting, setIsReacting] = useState(false)\n  const [isFinished, setIsFinished] = useState(false)\n\n  const handleReaction = () => {\n    setIsReacting(true)\n    setTimeout(() => {\n      setIsFinished(true)\n    }, 2000)\n  }\n\n  const handleReset = () => {\n    setIsReacting(false)\n    setIsFinished(false)\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Visualizing the Reaction</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <p className=\"text-muted-foreground mb-4\">\n          Where does the extra mass come from? It's not magic! The original\n          reactant combines with other atoms from its environment (like oxygen\n          from the air or molecules in a solution) to form a new, heavier\n          compound. Mass is always conserved.\n        </p>\n        <div className=\"relative flex items-center justify-center h-48 w-full rounded-lg border bg-slate-50 p-4\">\n          {/* Reactants */}\n          <div\n            className={`absolute transition-all duration-1000 ${\n              isReacting ? 'opacity-0 -translate-x-16' : 'opacity-100'\n            }`}\n          >\n            <div className=\"flex gap-2\">\n              <Atom className=\"h-8 w-8 text-blue-500\" />\n              <Atom className=\"h-8 w-8 text-blue-500\" />\n              <Atom className=\"h-8 w-8 text-blue-500\" />\n            </div>\n          </div>\n          {/* Environmental Molecules */}\n          <div\n            className={`absolute transition-all duration-1000 ${\n              isReacting ? 'opacity-0 translate-x-16' : 'opacity-100'\n            }`}\n          >\n            <div className=\"flex gap-2\">\n              <div className=\"flex\">\n                <Atom className=\"h-6 w-6 text-red-500\" />\n                <Atom className=\"h-6 w-6 text-red-500\" />\n              </div>\n              <div className=\"flex\">\n                <Atom className=\"h-6 w-6 text-red-500\" />\n                <Atom className=\"h-6 w-6 text-red-500\" />\n              </div>\n            </div>\n          </div>\n          {/* Product */}\n          <div\n            className={`absolute transition-all duration-1000 delay-1000 ${\n              isFinished ? 'opacity-100 scale-110' : 'opacity-0 scale-90'\n            }`}\n          >\n            <div className=\"flex gap-2\">\n              <TestTube className=\"h-12 w-12 text-purple-600\" />\n              <TestTube className=\"h-12 w-12 text-purple-600\" />\n              <TestTube className=\"h-12 w-12 text-purple-600\" />\n            </div>\n          </div>\n        </div>\n        <div className=\"mt-4 flex flex-col items-center\">\n          <div className=\"flex items-center gap-2 font-mono\">\n            <Scale className=\"h-5 w-5\" />\n            <span>Mass:</span>\n            <span\n              className={`font-bold transition-all duration-1000 ${\n                isFinished ? 'w-16' : 'w-8'\n              }`}\n            >\n              {isFinished ? '35.0 g' : '10.0 g'}\n            </span>\n          </div>\n          <div className=\"mt-4 space-x-2\">\n            <Button onClick={handleReaction} disabled={isReacting}>\n              Start Reaction\n            </Button>\n            <Button onClick={handleReset} variant=\"outline\">\n              Reset\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n```\n\nNow, the F.O.P.S. walkthrough component.\n\n```tsx file=\"app/components/fops-walkthrough.tsx\"\n'use client'\n\nimport { useState } from 'react'\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card'\nimport { Input } from '@/components/ui/input'\nimport { Button } from '@/components/ui/button'\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert'\nimport {\n  Lightbulb,\n  ListOrdered,\n  Calculator,\n  Target,\n  CheckCircle,\n  XCircle,\n} from 'lucide-react'\n\nexport function FopsWalkthrough() {\n  const [inputValue, setInputValue] = useState('')\n  const [feedback, setFeedback] = useState<\n    'correct' | 'incorrect' | 'idle'\n  >('idle')\n\n  const checkAnswer = () => {\n    // Allows for some flexibility in input\n    if (inputValue.includes('35')) {\n      setFeedback('correct')\n    } else {\n      setFeedback('incorrect')\n    }\n  }\n\n  return (\n    <div className=\"grid gap-6 md:grid-cols-2\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Target className=\"h-6 w-6 text-blue-500\" />F - Find\n          </CardTitle>\n          <CardDescription>Find the Core Principle</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <p>\n            The core idea here is a <b className=\"font-semibold\">proportional relationship</b>.\n            The problem explicitly states a fixed ratio between the mass of the\n            reactant and the product.\n          </p>\n        </CardContent>\n      </Card>\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <ListOrdered className=\"h-6 w-6 text-orange-500\" />O - Organize\n          </CardTitle>\n          <CardDescription>Organize the Information</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <ul className=\"list-disc space-y-2 pl-5\">\n            <li>\n              <b>Known:</b> Mass of Reactant = 10.0 g\n            </li>\n            <li>\n              <b>Known:</b> Mass Ratio = 3.5 (Product Mass / Reactant Mass)\n            </li>\n            <li>\n              <b>Unknown:</b> Mass of Product = ? g\n            </li>\n          </ul>\n        </CardContent>\n      </Card>\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Lightbulb className=\"h-6 w-6 text-yellow-500\" />P - Plan\n          </CardTitle>\n          <CardDescription>Plan Your Approach</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <p>\n            The plan is to use the given ratio as a conversion factor. We can\n            set up a simple equation:\n          </p>\n          <div className=\"mt-2 rounded-md bg-muted p-3 font-mono text-center\">\n            Mass of Product = Mass of Reactant × 3.5\n          </div>\n        </CardContent>\n      </Card>\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Calculator className=\"h-6 w-6 text-green-500\" />S - Solve\n          </CardTitle>\n          <CardDescription>Solve the Problem</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <p className=\"font-mono\">Mass of Product = 10.0 g × 3.5</p>\n          <div className=\"mt-4 flex items-center gap-2\">\n            <Input\n              type=\"text\"\n              placeholder=\"Your answer...\"\n              value={inputValue}\n              onChange={(e) => {\n                setInputValue(e.target.value)\n                setFeedback('idle')\n              }}\n            />\n            <Button onClick={checkAnswer}>Check</Button>\n          </div>\n          {feedback === 'correct' && (\n            <Alert className=\"mt-4 border-green-500 text-green-700\">\n              <CheckCircle className=\"h-4 w-4\" stroke=\"currentColor\" />\n              <AlertTitle>Correct!</AlertTitle>\n              <AlertDescription>\n                Excellent work! The product will be 35.0 grams.\n              </AlertDescription>\n            </Alert>\n          )}\n          {feedback === 'incorrect' && (\n            <Alert variant=\"destructive\" className=\"mt-4\">\n              <XCircle className=\"h-4 w-4\" />\n              <AlertTitle>Not Quite</AlertTitle>\n              <AlertDescription>\n                Check your calculation. Remember to multiply 10.0 by 3.5.\n              </AlertDescription>\n            </Alert>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n```\n\nThe component for the transfer tasks.\n\n```tsx file=\"app/components/transfer-tasks.tsx\"\n'use client'\n\nimport { useState } from 'react'\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from '@/components/ui/accordion'\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card'\nimport { Input } from '@/components/ui/input'\nimport { Button } from '@/components/ui/button'\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert'\nimport { CheckCircle, XCircle } from 'lucide-react'\n\ninterface TaskState {\n  input: string\n  feedback: 'idle' | 'correct' | 'incorrect'\n  showSolution: boolean\n}\n\nexport function TransferTasks() {\n  const [nearTask, setNearTask] = useState<TaskState>({\n    input: '',\n    feedback: 'idle',\n    showSolution: false,\n  })\n  const [farTask, setFarTask] = useState<TaskState>({\n    input: '',\n    feedback: 'idle',\n    showSolution: false,\n  })\n\n  const checkNearAnswer = () => {\n    if (nearTask.input.includes('22')) {\n      setNearTask({ ...nearTask, feedback: 'correct' })\n    } else {\n      setNearTask({ ...nearTask, feedback: 'incorrect' })\n    }\n  }\n\n  const checkFarAnswer = () => {\n    const answer = parseFloat(farTask.input)\n    if (answer > 0.66 && answer < 0.68) {\n      setFarTask({ ...farTask, feedback: 'correct' })\n    } else {\n      setFarTask({ ...farTask, feedback: 'incorrect' })\n    }\n  }\n\n  return (\n    <Accordion type=\"single\" collapsible className=\"w-full\">\n      <AccordionItem value=\"item-1\">\n        <AccordionTrigger className=\"text-xl\">\n          📌 Near-Transfer Problem (Same structure, different content)\n        </AccordionTrigger>\n        <AccordionContent>\n          <Card>\n            <CardHeader>\n              <CardTitle>Problem A: The Silver Synthesis</CardTitle>\n              <CardDescription>\n                In a different experiment, you are creating silver chloride.\n                The reaction produces 4.0 g of silver chloride for every 1.0 g\n                of chlorine gas used. If you start with 5.5 g of chlorine gas,\n                how much silver chloride will you make?\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center gap-2\">\n                <Input\n                  placeholder=\"Answer in grams...\"\n                  value={nearTask.input}\n                  onChange={(e) =>\n                    setNearTask({\n                      ...nearTask,\n                      input: e.target.value,\n                      feedback: 'idle',\n                    })\n                  }\n                />\n                <Button onClick={checkNearAnswer}>Check</Button>\n              </div>\n              {nearTask.feedback === 'correct' && (\n                <Alert className=\"mt-4 border-green-500 text-green-700\">\n                  <CheckCircle className=\"h-4 w-4\" stroke=\"currentColor\" />\n                  <AlertTitle>Perfect!</AlertTitle>\n                  <AlertDescription>\n                    You correctly applied the same proportional logic.\n                  </AlertDescription>\n                </Alert>\n              )}\n              {nearTask.feedback === 'incorrect' && (\n                <Alert variant=\"destructive\" className=\"mt-4\">\n                  <XCircle className=\"h-4 w-4\" />\n                  <AlertTitle>Try Again</AlertTitle>\n                  <AlertDescription>\n                    This problem uses the same simple ratio as the first one.\n                  </AlertDescription>\n                </Alert>\n              )}\n              <div className=\"mt-4\">\n                <Button\n                  variant=\"link\"\n                  className=\"p-0\"\n                  onClick={() =>\n                    setNearTask({ ...nearTask, showSolution: !nearTask.showSolution })\n                  }\n                >\n                  {nearTask.showSolution ? 'Hide' : 'Show'} Solution\n                </Button>\n                {nearTask.showSolution && (\n                  <p className=\"mt-2 text-sm text-muted-foreground font-mono\">\n                    5.5 g chlorine × 4.0 = 22.0 g silver chloride\n                  </p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </AccordionContent>\n      </AccordionItem>\n      <AccordionItem value=\"item-2\">\n        <AccordionTrigger className=\"text-xl\">\n          📌 Far-Transfer Problem (Different surface, same structure)\n        </AccordionTrigger>\n        <AccordionContent>\n          <Card>\n            <CardHeader>\n              <CardTitle>Problem B: The Expanding Balloon</CardTitle>\n              <CardDescription>\n                You have a balloon with a volume of 2.0 L at a pressure of 1.0\n                atm. If you take it deep underwater where the pressure increases\n                to 3.0 atm (assuming temperature stays the same), what will the\n                new volume of the balloon be?\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center gap-2\">\n                <Input\n                  placeholder=\"Answer in Liters...\"\n                  value={farTask.input}\n                  onChange={(e) =>\n                    setFarTask({\n                      ...farTask,\n                      input: e.target.value,\n                      feedback: 'idle',\n                    })\n                  }\n                />\n                <Button onClick={checkFarAnswer}>Check</Button>\n              </div>\n              {farTask.feedback === 'correct' && (\n                <Alert className=\"mt-4 border-green-500 text-green-700\">\n                  <CheckCircle className=\"h-4 w-4\" stroke=\"currentColor\" />\n                  <AlertTitle>Fantastic!</AlertTitle>\n                  <AlertDescription>\n                    You recognized the underlying inverse relationship.\n                  </AlertDescription>\n                </Alert>\n              )}\n              {farTask.feedback === 'incorrect' && (\n                <Alert variant=\"destructive\" className=\"mt-4\">\n                  <XCircle className=\"h-4 w-4\" />\n                  <AlertTitle>Think Deeper</AlertTitle>\n                  <AlertDescription>\n                    This is about an inverse relationship (P₁V₁ = P₂V₂). As\n                    pressure goes up, volume goes down.\n                  </AlertDescription>\n                </Alert>\n              )}\n              <div className=\"mt-4\">\n                <Button\n                  variant=\"link\"\n                  className=\"p-0\"\n                  onClick={() =>\n                    setFarTask({ ...farTask, showSolution: !farTask.showSolution })\n                  }\n                >\n                  {farTask.showSolution ? 'Hide' : 'Show'} Solution\n                </Button>\n                {farTask.showSolution && (\n                  <p className=\"mt-2 text-sm text-muted-foreground font-mono\">\n                    (1.0 atm × 2.0 L) / 3.0 atm = 0.67 L\n                  </p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </AccordionContent>\n      </AccordionItem>\n    </Accordion>\n  )\n}\n```\n\nA final component for the `Conclusion`.\n\n```tsx file=\"app/components/conclusion.tsx\"\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card'\nimport { Check, Star } from 'lucide-react'\n\nexport function Conclusion() {\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Star className=\"h-6 w-6 text-yellow-400\" />\n          You're a Scientific Thinker!\n        </CardTitle>\n        <CardDescription>\n          Here's a summary of the core concepts you've mastered.\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"flex items-start gap-3\">\n          <Check className=\"mt-1 h-5 w-5 flex-shrink-0 text-green-500\" />\n          <div>\n            <h4 className=\"font-semibold\">Principles over Procedures</h4>\n            <p className=\"text-muted-foreground\">\n              You learned that many chemistry problems are about understanding\n              relationships (like proportions), not just memorizing steps.\n            </p>\n          </div>\n        </div>\n        <div className=\"flex items-start gap-3\">\n          <Check className=\"mt-1 h-5 w-5 flex-shrink-0 text-green-500\" />\n          <div>\n            <h4 className=\"font-semibold\">F.O.P.S. is Your Toolkit</h4>\n            <p className=\"text-muted-foreground\">\n              The F.O.P.S. method (Find, Organize, Plan, Solve) is a powerful\n              strategy to break down any scientific problem into manageable steps.\n            </p>\n          </div>\n        </div>\n        <div className=\"flex items-start gap-3\">\n          <Check className=\"mt-1 h-5 w-5 flex-shrink-0 text-green-500\" />\n          <div>\n            <h4 className=\"font-semibold\">Transferable Skills</h4>\n            <p className=\"text-muted-foreground\">\n              You saw how the same reasoning skill can solve problems that look\n              completely different on the surface—from chemical reactions to gas\n              laws. That's the power of abstract thinking!\n            </p>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n```\n\nFinally, assemble all the components in the main `app/page.tsx` file.\n\n```tsx file=\"app/page.tsx\"\nimport { LessonSection } from './components/lesson-section'\nimport { Introduction } from './components/introduction'\nimport { InteractiveSimulation } from './components/interactive-simulation'\nimport { FopsWalkthrough } from './components/fops-walkthrough'\nimport { TransferTasks } from './components/transfer-tasks'\nimport { Conclusion } from './components/conclusion'\n\nexport default function ChemistryLessonPage() {\n  return (\n    <main className=\"container mx-auto px-4 md:px-6\">\n      <LessonSection\n        title=\"The Magical Multiplying Mixture\"\n        description=\"An interactive lesson on proportional reasoning in chemistry.\"\n      >\n        <Introduction />\n      </LessonSection>\n\n      <LessonSection\n        title=\"Step 1: What's Happening in the Beaker?\"\n        description=\"Moving from a concrete observation to a representational model (CRA Step 1).\"\n      >\n        <InteractiveSimulation />\n      </LessonSection>\n\n      <LessonSection\n        title=\"Step 2: Cracking the Code with F.O.P.S.\"\n        description=\"Using a structured method to build a scientific model and solve the problem.\"\n      >\n        <FopsWalkthrough />\n      </LessonSection>\n\n      <LessonSection\n        title=\"Step 3: Transfer Your New Skills\"\n        description=\"Apply your understanding to new challenges to test your reasoning.\"\n      >\n        <TransferTasks />\n      </LessonSection>\n\n      <LessonSection title=\"Lesson Complete!\">\n        <Conclusion />\n      </LessonSection>\n    </main>\n  )\n}\n```"
}