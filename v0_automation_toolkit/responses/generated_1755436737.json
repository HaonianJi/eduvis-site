{
  "content": "<Thinking>\nI will now begin the planning phase for the chemistry teaching webpage.\n\n### Project Structure\n\nThe project will be a single-page Next.js application using the App Router. The page will be structured into distinct, sequential sections to guide the learner through the material. I will break down the UI into smaller, reusable components.\n\n-   `app/layout.tsx`: Root layout with basic HTML structure and Tailwind CSS configuration.\n-   `app/page.tsx`: The main page that assembles all the instructional sections.\n-   `components/ui/`: This directory will house the components from `shadcn/ui` like `Card`, `Accordion`, `Button`, `Input`, and `Separator`.\n-   `components/instructional-section.tsx`: A wrapper component to provide consistent styling (title, padding, etc.) for each major section of the page.\n-   `components/hero-section.tsx`: The introduction with the lab scenario and the main problem.\n-   `components/cra-model.tsx`: The section explaining the Concrete-Representational-Abstract model with visual aids.\n-   `components/fops-solver.tsx`: An interactive accordion component that walks through the Find, Organize, Plan, Solve strategy.\n-   `components/metacognitive-check.tsx`: A section with self-reflection questions to reinforce learning.\n-   `components/transfer-problems.tsx`: A client component (`\"use client\"`) containing the interactive near-transfer and far-transfer problems. It will manage state for user input and feedback.\n-   `lib/utils.ts`: Standard file for `cn` utility from `shadcn/ui`.\n\n### Styling\n\n-   **Framework**: I will use Tailwind CSS for all styling.\n-   **Component Library**: `shadcn/ui` will be used for pre-built, accessible components like `Card`, `Accordion`, `Button`, and `Input`. This ensures a clean, modern, and consistent look.\n-   **Color Palette**: The design will use a neutral palette (slate, gray) with a primary accent color (e.g., a calm green or teal) for interactive elements and headings to create a professional and focused learning environment.\n-   **Typography**: I'll use a clean, sans-serif font like Inter (default with Tailwind) for readability. Headings will be larger and bolder to create a clear visual hierarchy.\n-   **Responsiveness**: The layout will be fully responsive, ensuring a seamless experience on desktops, tablets, and mobile devices using Tailwind's responsive prefixes (e.g., `md:`, `lg:`).\n\n### Images and Media\n\n-   I will use `lucide-react` for icons to add visual cues and improve user experience (e.g., flask, brain, target icons).\n-   For the illustrations (like the student chemist \"Alex\"), I will create styled placeholder divs with descriptive comments, as I cannot generate images myself. These placeholders will be designed to be easily replaceable with actual image files.\n\n### Formatting\n\n-   The code will be formatted using Prettier, which is integrated with the default Next.js setup.\n-   TypeScript will be used for all components to ensure type safety.\n-   Comments will be added to explain complex logic, especially within the interactive `transfer-problems.tsx` component.\n\n### Frameworks and Libraries\n\n-   **Next.js**: The core framework, using the App Router.\n-   **React**: For building the UI components. `useState` and other hooks will be used for interactivity.\n-   **Tailwind CSS**: For utility-first styling.\n-   **shadcn/ui**: For the base UI components.\n-   **lucide-react**: For iconography.\n\n### Caveats & Interactivity Plan\n\n-   The core page (`app/page.tsx`) will be a Server Component to serve static content quickly.\n-   The `transfer-problems.tsx` component must be a Client Component (`\"use client\"`) because it will use `useState` to handle user input, check answers, and toggle the visibility of solutions.\n-   The F.O.P.S. section will use the `Accordion` component from `shadcn/ui` to present the information in a digestible, step-by-step manner without overwhelming the user.\n-   Each transfer problem will have an input field, a \"Check Answer\" button, and a feedback area. The feedback will initially be hidden and will show whether the answer is correct or incorrect, along with a \"Show Solution\" button for a detailed explanation. This promotes active recall and self-assessment.\n\nThis comprehensive plan covers the user's request for an instructionally rich, visually engaging, and transfer-focused webpage, detailing the structure, styling, and implementation strategy. I am now ready to generate the code.\n\n</Thinking>\n```\nnpx create-next-app@latest . --typescript --eslint --tailwind --app --turbopack --yes\n```\n```\nnpx shadcn-ui@latest init\n```\nYou will be asked a few questions to configure `components.json`:\n- Would you like to use TypeScript (recommended)? **yes**\n- Which style would you like to use? **Default**\n- Which color would you like to use as base color? **Slate**\n- Where is your global CSS file? **app/globals.css**\n- Do you want to use CSS variables for colors? **yes**\n- Where is your Tailwind config file? **tailwind.config.ts**\n- Configure the import alias for components: **@/components**\n- Configure the import alias for utils: **@/lib/utils**\n- Are you using React Server Components? **yes**\n\nNow, add the required `shadcn/ui` components:\n```\nnpx shadcn-ui@latest add card accordion button input separator\n```\nAnd install the `lucide-react` icon library:\n```\nnpm install lucide-react\n```\n\nNow, create the project files:\n\n```tsx file=\"app/layout.tsx\"\nimport type { Metadata } from \"next\";\nimport { Inter } from \"next/font/google\";\nimport \"./globals.css\";\nimport { cn } from \"@/lib/utils\";\n\nconst inter = Inter({ subsets: [\"latin\"] });\n\nexport const metadata: Metadata = {\n  title: \"Chemistry Problem Solver\",\n  description: \"An interactive guide to solving chemistry problems with a focus on skill transfer.\",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\">\n      <body className={cn(\"min-h-screen bg-background font-sans antialiased\", inter.className)}>\n        {children}\n      </body>\n    </html>\n  );\n}\n```\n\n```tsx file=\"app/page.tsx\"\nimport HeroSection from \"@/components/hero-section\";\nimport CraModel from \"@/components/cra-model\";\nimport FopsSolver from \"@/components/fops-solver\";\nimport MetacognitiveCheck from \"@/components/metacognitive-check\";\nimport TransferProblems from \"@/components/transfer-problems\";\nimport InstructionalSection from \"@/components/instructional-section\";\nimport { Beaker, Brain, Target } from \"lucide-react\";\n\nexport default function Home() {\n  return (\n    <main className=\"flex flex-col items-center p-4 md:p-8 lg:p-12 bg-slate-50 dark:bg-slate-900\">\n      <div className=\"w-full max-w-4xl space-y-12\">\n        <HeroSection />\n        \n        <InstructionalSection\n          icon={<Beaker className=\"h-8 w-8 text-cyan-600\" />}\n          title=\"From Lab Bench to Formula\"\n          subtitle=\"The Concrete-Representational-Abstract (CRA) Approach\"\n        >\n          <CraModel />\n        </InstructionalSection>\n\n        <InstructionalSection\n          icon={<Brain className=\"h-8 w-8 text-amber-600\" />}\n          title=\"A Strategy for Success\"\n          subtitle=\"Solving the Problem with the F.O.P.S. Method\"\n        >\n          <FopsSolver />\n        </InstructionalSection>\n\n        <InstructionalSection\n          icon={<Brain className=\"h-8 w-8 text-purple-600\" />}\n          title=\"Metacognitive Checkpoint\"\n          subtitle=\"Thinking About Your Thinking\"\n        >\n          <MetacognitiveCheck />\n        </InstructionalSection>\n\n        <InstructionalSection\n          icon={<Target className=\"h-8 w-8 text-red-600\" />}\n          title=\"Strengthen Your Skills\"\n          subtitle=\"Practice Transferring Your Knowledge\"\n        >\n          <TransferProblems />\n        </InstructionalSection>\n\n        <footer className=\"text-center text-sm text-slate-500 py-8\">\n          <p>Built with v0 - Vercel's AI Assistant</p>\n        </footer>\n      </div>\n    </main>\n  );\n}\n```\n\n```tsx file=\"components/instructional-section.tsx\"\nimport { ReactNode } from 'react';\nimport { Separator } from '@/components/ui/separator';\n\ninterface InstructionalSectionProps {\n  icon: ReactNode;\n  title: string;\n  subtitle: string;\n  children: ReactNode;\n}\n\nexport default function InstructionalSection({ icon, title, subtitle, children }: InstructionalSectionProps) {\n  return (\n    <section className=\"w-full\">\n      <div className=\"flex items-center space-x-4 mb-4\">\n        <div className=\"bg-slate-100 dark:bg-slate-800 p-3 rounded-full\">\n          {icon}\n        </div>\n        <div>\n          <h2 className=\"text-2xl md:text-3xl font-bold tracking-tight text-slate-800 dark:text-slate-100\">{title}</h2>\n          <p className=\"text-md text-slate-500 dark:text-slate-400\">{subtitle}</p>\n        </div>\n      </div>\n      <Separator className=\"my-6\" />\n      <div className=\"space-y-6\">\n        {children}\n      </div>\n    </section>\n  );\n}\n```\n\n```tsx file=\"components/hero-section.tsx\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { FlaskConical } from \"lucide-react\";\n\nexport default function HeroSection() {\n  return (\n    <header className=\"text-center py-8\">\n      <h1 className=\"text-4xl md:text-5xl font-extrabold tracking-tight text-slate-900 dark:text-slate-50\">\n        The Chemist's Challenge\n      </h1>\n      <p className=\"mt-4 max-w-2xl mx-auto text-lg text-slate-600 dark:text-slate-400\">\n        Learn to solve chemistry problems and build skills that go beyond the classroom.\n      </p>\n\n      <Card className=\"mt-8 text-left bg-white dark:bg-slate-800/50 shadow-lg\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-3\">\n            <FlaskConical className=\"h-6 w-6 text-green-500\" />\n            <span className=\"text-xl font-semibold\">The Lab Scenario</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex flex-col md:flex-row items-center gap-6\">\n            <div className=\"w-full md:w-1/3 h-40 bg-slate-200 dark:bg-slate-700 rounded-lg flex items-center justify-center\">\n              <p className=\"text-slate-500 dark:text-slate-400 text-sm\">\n                // Placeholder for an illustration of Alex, a student chemist in a lab.\n              </p>\n            </div>\n            <p className=\"md:w-2/3 text-slate-700 dark:text-slate-300\">\n              Meet Alex, a student chemist working on synthesizing a new medicine. Alex's lab notebook shows that a previous reaction yielded <strong>12.0 grams</strong> of the medicine from <strong>3.0 grams</strong> of a key ingredient, Reactant A.\n              <br /><br />\n              Today, Alex has <strong>7.5 grams</strong> of Reactant A available. The challenge is to figure out the maximum amount of medicine that can be produced.\n            </p>\n          </div>\n          <div className=\"mt-6 p-4 bg-amber-50 dark:bg-amber-900/20 border-l-4 border-amber-400 rounded-r-lg\">\n            <h3 className=\"font-bold text-amber-800 dark:text-amber-200\">The Core Problem:</h3>\n            <p className=\"text-amber-700 dark:text-amber-300\">\n              If 3.0 g of Reactant A produces 12.0 g of product, how much product will be formed from 7.5 g of Reactant A?\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </header>\n  );\n}\n```\n\n```tsx file=\"components/cra-model.tsx\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Weight, Atom, FunctionSquare } from \"lucide-react\";\n\nexport default function CraModel() {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Weight className=\"text-blue-500\" />\n            <span>1. Concrete</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-slate-600 dark:text-slate-400 mb-4\">\n            We start with what we can see and measure. Imagine two weighing scales in the lab.\n          </p>\n          <div className=\"space-y-2 text-center\">\n            <div className=\"p-4 bg-slate-100 dark:bg-slate-800 rounded-lg\">\n              <p className=\"font-mono\">3.0 g Reactant A</p>\n            </div>\n            <p className=\"font-bold\">→</p>\n            <div className=\"p-4 bg-green-100 dark:bg-green-900/30 rounded-lg\">\n              <p className=\"font-mono\">12.0 g Product</p>\n            </div>\n          </div>\n          <p className=\"mt-4 text-sm text-slate-500\">This is our observable fact—a specific input gives a specific output.</p>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Atom className=\"text-purple-500\" />\n            <span>2. Representational</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-slate-600 dark:text-slate-400 mb-4\">\n            Next, we represent this relationship visually. We can think of it as a ratio or a balanced system.\n          </p>\n           <div className=\"w-full h-24 bg-slate-200 dark:bg-slate-700 rounded-lg flex items-center justify-center mb-4\">\n              <p className=\"text-slate-500 dark:text-slate-400 text-sm\">\n                // Placeholder for diagram showing a balance scale.\n              </p>\n            </div>\n          <p className=\"text-center font-semibold text-slate-700 dark:text-slate-300\">\n            Mass of Product is 4 times the Mass of Reactant A\n          </p>\n          <p className=\"mt-4 text-sm text-slate-500\">This model helps us see the underlying principle, not just the numbers.</p>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <FunctionSquare className=\"text-red-500\" />\n            <span>3. Abstract</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-slate-600 dark:text-slate-400 mb-4\">\n            Finally, we use abstract symbols and math to generalize the rule. This is where we create a formula.\n          </p>\n          <div className=\"p-4 bg-slate-800 dark:bg-black text-white rounded-lg font-mono text-sm\">\n            <p>Ratio = <frac>Mass of Product</frac> / <frac>Mass of Reactant A</frac></p>\n            <p className=\"mt-2\">= 12.0 g / 3.0 g = 4</p>\n          </div>\n          <p className=\"mt-4 text-center font-semibold text-slate-700 dark:text-slate-300\">\n            Product Mass = Reactant Mass × 4\n          </p>\n          <p className=\"mt-4 text-sm text-slate-500\">This abstract rule can be applied to any amount of Reactant A.</p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n```\n\n```tsx file=\"components/fops-solver.tsx\"\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\n\nexport default function FopsSolver() {\n  return (\n    <Accordion type=\"single\" collapsible className=\"w-full\" defaultValue=\"item-1\">\n      <AccordionItem value=\"item-1\">\n        <AccordionTrigger className=\"text-xl font-bold text-green-700 dark:text-green-400\">\n          F - Find the Core Principle\n        </AccordionTrigger>\n        <AccordionContent className=\"text-base text-slate-700 dark:text-slate-300\">\n          The core idea here is the <strong>Law of Definite Proportions</strong>. It states that a chemical compound always contains its component elements in a fixed ratio by mass. In simple terms, the ratio of product mass to reactant mass is constant for this specific reaction.\n        </AccordionContent>\n      </AccordionItem>\n\n      <AccordionItem value=\"item-2\">\n        <AccordionTrigger className=\"text-xl font-bold text-blue-700 dark:text-blue-400\">\n          O - Organize the Information\n        </AccordionTrigger>\n        <AccordionContent>\n          <p className=\"mb-4 text-slate-700 dark:text-slate-300\">Let's lay out what we know and what we need to find in a table:</p>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full text-left border-collapse\">\n              <thead>\n                <tr>\n                  <th className=\"border-b-2 p-2 bg-slate-100 dark:bg-slate-800\">Quantity</th>\n                  <th className=\"border-b-2 p-2 bg-slate-100 dark:bg-slate-800\">Value</th>\n                  <th className=\"border-b-2 p-2 bg-slate-100 dark:bg-slate-800\">Type</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td className=\"border-b p-2\">Initial Reactant A Mass</td>\n                  <td className=\"border-b p-2 font-mono\">3.0 g</td>\n                  <td className=\"border-b p-2 text-green-600 dark:text-green-400\">Known</td>\n                </tr>\n                <tr>\n                  <td className=\"border-b p-2\">Initial Product Mass</td>\n                  <td className=\"border-b p-2 font-mono\">12.0 g</td>\n                  <td className=\"border-b p-2 text-green-600 dark:text-green-400\">Known</td>\n                </tr>\n                <tr>\n                  <td className=\"border-b p-2\">New Reactant A Mass</td>\n                  <td className=\"border-b p-2 font-mono\">7.5 g</td>\n                  <td className=\"border-b p-2 text-green-600 dark:text-green-400\">Known</td>\n                </tr>\n                 <tr>\n                  <td className=\"border-b p-2 bg-amber-50 dark:bg-amber-900/30\">New Product Mass</td>\n                  <td className=\"border-b p-2 bg-amber-50 dark:bg-amber-900/30 font-mono\">? g</td>\n                  <td className=\"border-b p-2 bg-amber-50 dark:bg-amber-900/30 text-red-600 dark:text-red-400\">Unknown</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </AccordionContent>\n      </AccordionItem>\n\n      <AccordionItem value=\"item-3\">\n        <AccordionTrigger className=\"text-xl font-bold text-purple-700 dark:text-purple-400\">\n          P - Plan the Approach\n        </AccordionTrigger>\n        <AccordionContent className=\"text-base text-slate-700 dark:text-slate-300 space-y-2\">\n          <p>Our plan has two simple steps:</p>\n          <p><strong>Step 1:</strong> Use the known data (3.0 g of A produces 12.0 g of product) to calculate the constant mass ratio.</p>\n          <p><strong>Step 2:</strong> Apply this ratio to the new amount of reactant (7.5 g) to find the unknown product mass.</p>\n        </AccordionContent>\n      </AccordionItem>\n      \n      <AccordionItem value=\"item-4\">\n        <AccordionTrigger className=\"text-xl font-bold text-red-700 dark:text-red-400\">\n          S - Solve the Problem\n        </AccordionTrigger>\n        <AccordionContent className=\"text-base text-slate-700 dark:text-slate-300 space-y-4\">\n          <div>\n            <h4 className=\"font-semibold\">Step 1: Calculate the Mass Ratio</h4>\n            <div className=\"mt-2 p-3 bg-slate-100 dark:bg-slate-800 rounded-lg font-mono text-sm\">\n              Ratio = (12.0 g Product) / (3.0 g Reactant A) = 4.0\n            </div>\n            <p className=\"text-sm mt-1\">This means for every 1g of Reactant A, we get 4g of product.</p>\n          </div>\n          <div>\n            <h4 className=\"font-semibold\">Step 2: Apply the Ratio</h4>\n             <div className=\"mt-2 p-3 bg-slate-100 dark:bg-slate-800 rounded-lg font-mono text-sm\">\n              New Product Mass = (New Reactant A Mass) × Ratio\n              <br/>\n              New Product Mass = 7.5 g × 4.0 = 30.0 g\n            </div>\n          </div>\n          <div className=\"p-4 bg-green-100 dark:bg-green-900/30 border-l-4 border-green-500 rounded-r-lg\">\n            <p className=\"font-bold text-lg text-green-800 dark:text-green-200\">\n              Final Answer: Alex can produce 30.0 g of medicine.\n            </p>\n          </div>\n        </AccordionContent>\n      </AccordionItem>\n    </Accordion>\n  );\n}\n```\n\n```tsx file=\"components/metacognitive-check.tsx\"\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Lightbulb } from \"lucide-react\";\n\nexport default function MetacognitiveCheck() {\n  return (\n    <Card className=\"bg-blue-50 border border-blue-200 dark:bg-blue-900/20 dark:border-blue-700\">\n      <CardContent className=\"pt-6\">\n        <ul className=\"space-y-4\">\n          <li className=\"flex items-start space-x-3\">\n            <Lightbulb className=\"h-5 w-5 mt-1 text-blue-500 flex-shrink-0\" />\n            <div>\n              <h4 className=\"font-semibold text-slate-800 dark:text-slate-200\">Does the answer make sense?</h4>\n              <p className=\"text-slate-600 dark:text-slate-400\">\n                We started with more reactant (7.5 g is more than 3.0 g), so we should expect to get more product. Our answer (30.0 g) is more than the initial product (12.0 g), so it passes the \"common sense\" check.\n              </p>\n            </div>\n          </li>\n          <li className=\"flex items-start space-x-3\">\n            <Lightbulb className=\"h-5 w-5 mt-1 text-blue-500 flex-shrink-0\" />\n            <div>\n              <h4 className=\"font-semibold text-slate-800 dark:text-slate-200\">What principle did we use?</h4>\n              <p className=\"text-slate-600 dark:text-slate-400\">\n                The core principle was proportional reasoning, based on the Law of Definite Proportions. We found a constant factor (the ratio) and applied it.\n              </p>\n            </div>\n          </li>\n          <li className=\"flex items-start space-x-3\">\n            <Lightbulb className=\"h-5 w-5 mt-1 text-blue-500 flex-shrink-0\" />\n            <div>\n              <h4 className=\"font-semibold text-slate-800 dark:text-slate-200\">Is there another way to solve it?</h4>\n              <p className=\"text-slate-600 dark:text-slate-400\">\n                Yes! We could set up a direct proportion: <br />\n                <span className=\"font-mono mt-2 block p-2 bg-slate-100 dark:bg-slate-800 rounded\">(12.0 g Product / 3.0 g A) = (X g Product / 7.5 g A)</span>\n                Solving for X gives the same result: X = (12.0 * 7.5) / 3.0 = 30.0 g.\n              </p>\n            </div>\n          </li>\n        </ul>\n      </CardContent>\n    </Card>\n  );\n}\n```\n\n```tsx file=\"components/transfer-problems.tsx\"\n'use client'\n\nimport { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\n\nexport default function TransferProblems() {\n  const [nearAnswer, setNearAnswer] = useState('');\n  const [nearFeedback, setNearFeedback] = useState('');\n  const [showNearSolution, setShowNearSolution] = useState(false);\n\n  const [farAnswer, setFarAnswer] = useState('');\n  const [farFeedback, setFarFeedback] = useState('');\n  const [showFarSolution, setShowFarSolution] = useState(false);\n\n  const checkNearAnswer = () => {\n    setShowNearSolution(false);\n    if (parseFloat(nearAnswer) === 20) {\n      setNearFeedback('Correct! You successfully applied the same ratio-based reasoning.');\n    } else {\n      setNearFeedback('Not quite. Remember to find the ratio first. Try again!');\n    }\n  };\n\n  const checkFarAnswer = () => {\n    setShowFarSolution(false);\n    if (parseFloat(farAnswer) === 2.5) {\n      setFarFeedback('Excellent! You correctly identified the inverse relationship.');\n    } else {\n      setFarFeedback('Almost! This problem involves an inverse relationship (as one value goes up, the other goes down). Give it another shot!');\n    }\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      <Card className=\"bg-white dark:bg-slate-800/50\">\n        <CardHeader>\n          <CardTitle>📌 Near-Transfer Problem</CardTitle>\n          <CardDescription>Same structure, different context.</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <p className=\"mb-4 text-slate-700 dark:text-slate-300\">\n            <strong>Scenario:</strong> You're baking. A recipe for a special glaze says you need <strong>20 grams of sugar</strong> to make <strong>50 mL of glaze</strong>. If you only have <strong>8 grams of sugar</strong>, how much glaze can you make (in mL)?\n          </p>\n          <div className=\"flex flex-col sm:flex-row items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n            <Input \n              type=\"number\" \n              placeholder=\"Enter your answer in mL\" \n              value={nearAnswer}\n              onChange={(e) => setNearAnswer(e.target.value)}\n              className=\"flex-grow\"\n            />\n            <Button onClick={checkNearAnswer}>Check Answer</Button>\n          </div>\n          {nearFeedback && (\n            <div className={`mt-4 p-3 rounded-lg text-sm ${nearFeedback.startsWith('Correct') ? 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300' : 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300'}`}>\n              <p>{nearFeedback}</p>\n              {!nearFeedback.startsWith('Correct') && <Button variant=\"link\" className=\"p-0 h-auto mt-1\" onClick={() => setShowNearSolution(true)}>Show Solution</Button>}\n            </div>\n          )}\n          {showNearSolution && (\n            <div className=\"mt-4 p-3 bg-slate-100 dark:bg-slate-800 rounded-lg text-sm text-slate-700 dark:text-slate-300\">\n              <p><strong>Solution:</strong></p>\n              <p>1. Find the ratio: 50 mL glaze / 20 g sugar = 2.5 mL/g.</p>\n              <p>2. Apply the ratio: 8 g sugar × 2.5 mL/g = 20 mL glaze.</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n      \n      <Separator />\n\n      <Card className=\"bg-white dark:bg-slate-800/50\">\n        <CardHeader>\n          <CardTitle>📌 Far-Transfer Problem</CardTitle>\n          <CardDescription>Different surface, same underlying reasoning pattern.</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <p className=\"mb-4 text-slate-700 dark:text-slate-300\">\n            <strong>Scenario:</strong> You have a syringe containing <strong>50 mL of air</strong> at <strong>1.0 atm</strong> of pressure. If you push the plunger until the volume is <strong>20 mL</strong>, what is the new pressure inside the syringe (in atm), assuming temperature is constant?\n          </p>\n          <div className=\"flex flex-col sm:flex-row items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n            <Input \n              type=\"number\" \n              placeholder=\"Enter your answer in atm\"\n              value={farAnswer}\n              onChange={(e) => setFarAnswer(e.target.value)}\n              className=\"flex-grow\"\n            />\n            <Button onClick={checkFarAnswer}>Check Answer</Button>\n          </div>\n           {farFeedback && (\n            <div className={`mt-4 p-3 rounded-lg text-sm ${farFeedback.startsWith('Excellent') ? 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300' : 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300'}`}>\n              <p>{farFeedback}</p>\n              {!farFeedback.startsWith('Excellent') && <Button variant=\"link\" className=\"p-0 h-auto mt-1\" onClick={() => setShowFarSolution(true)}>Show Solution</Button>}\n            </div>\n          )}\n          {showFarSolution && (\n            <div className=\"mt-4 p-3 bg-slate-100 dark:bg-slate-800 rounded-lg text-sm text-slate-700 dark:text-slate-300\">\n              <p><strong>Solution:</strong></p>\n              <p>This follows Boyle's Law (P₁V₁ = P₂V₂), an inverse relationship.</p>\n              <p>1. (1.0 atm) × (50 mL) = P₂ × (20 mL)</p>\n              <p>2. 50 = P₂ × 20</p>\n              <p>3. P₂ = 50 / 20 = 2.5 atm.</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n```"
}