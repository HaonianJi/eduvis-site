{
  "content": "<Thinking>\n## v0 Plan: Educational Chemistry Webpage\n\n### 1. Project Goal & Core Requirements\n\nThe user wants an educational webpage to teach a specific chemistry problem, focusing on building deeper scientific reasoning skills like modeling, abstract thinking, and analogical transfer.\n\n**Problem:** \"A chemical reaction produces 15.0 g of a compound from 5.0 g of a reactant. What is the mass ratio of the product to the reactant? How much reactant would be needed to produce 60.0 g of the product?\"\n\n**Key Pedagogical Features:**\n- **Contextualization:** Use a real-world/lab scenario.\n- **Visuals:** Incorporate diagrams and interactive elements.\n- **CRA Approach:** Move from Concrete -> Representational -> Abstract.\n- **Scaffolding:** Use a step-by-step method like F.O.P.S. (Find, Organize, Plan, Solve).\n- **Metacognition:** Include prompts for self-reflection.\n- **Transfer Problems:** Design both \"near-transfer\" and \"far-transfer\" tasks to test and reinforce learning.\n\n### 2. Tech Stack & Project Structure\n\n- **Framework:** Next.js (App Router).\n- **Styling:** Tailwind CSS.\n- **UI Components:** `shadcn/ui` and `lucide-react` for a clean, modern, and accessible UI. I'll use `Card`, `Button`, `Accordion`, `Tabs`, `Input`, `Alert`, and icons.\n- **File Organization:**\n    - `app/layout.tsx`: Root layout.\n    - `app/page.tsx`: Main page component, assembling the lesson sections.\n    - `components/ui/`: Standard `shadcn/ui` components.\n    - `components/icons.tsx`: A simple component for icons to keep code clean.\n    - `components/lesson/`: A new directory for custom components related to the chemistry lesson. This keeps the logic modular.\n        - `1-ContextSection.tsx`: Introduces the lab scenario. (Server Component)\n        - `2-ProblemStatement.tsx`: Displays the core problem. (Server Component)\n        - `3-CRASection.tsx`: Explains the concept using the CRA model. (Server Component)\n        - `4-FOPSMethod.tsx`: A detailed, step-by-step walkthrough of the solution using an Accordion. (Server Component)\n        - `5-InteractivePractice.tsx`: An interactive slider to explore the ratio. **(Client Component)**\n        - `6-TransferProblems.tsx`: Tabs for Near and Far Transfer problems with input fields and answer checking. **(Client Component)**\n        - `7-MetacognitionChecklist.tsx`: A final section with reflective questions. (Server Component)\n    - `lib/utils.ts`: For `cn` utility.\n    - `public/`: No images needed for this implementation, as icons and diagrams will be done with components/SVG.\n\n### 3. Page Flow & Component Design\n\nThe `app/page.tsx` will be the main container, rendering the lesson components in sequence to create a guided learning path.\n\n1.  **`1-ContextSection.tsx`**:\n    -   **Content:** Sets the scene in a \"SynthChem Innovations\" lab. Explains the importance of understanding reactant-product relationships.\n    -   **Visuals:** Use `FlaskConical` and `Beaker` icons from `lucide-react`.\n    -   **Component Type:** Server.\n\n2.  **`2-ProblemStatement.tsx`**:\n    -   **Content:** Clearly states the core problem inside a `Card` component for emphasis.\n    -   **Visuals:** Use a `Lightbulb` icon to signify \"The Challenge\".\n    -   **Component Type:** Server.\n\n3.  **`3-CRASection.tsx`**:\n    -   **Content:** Breaks down the concept into three parts:\n        -   **Concrete:** Baking analogy (flour -> cookies).\n        -   **Representational:** Particle diagram (Reactant particle -> Product particles). I will create a simple SVG component for this.\n        -   **Abstract:** Mathematical ratio `Product / Reactant`.\n    -   **Visuals:** Simple graphics and icons for each stage.\n    -   **Component Type:** Server.\n\n4.  **`4-FOPSMethod.tsx`**:\n    -   **Content:** Uses a `shadcn/ui` `Accordion` with four items: Find, Organize, Plan, Solve.\n        -   **Find:** Identifies the \"Law of Definite Proportions\".\n        -   **Organize:** Uses a simple table to list knowns and unknowns.\n        -   **Plan:** Outlines the two-part calculation strategy.\n        -   **Solve:** Shows the detailed calculations and includes a \"Think Aloud\" box for a plausibility check.\n    -   **Component Type:** Server.\n\n5.  **`5-InteractivePractice.tsx`**:\n    -   **Content:** A section titled \"Experiment with the Ratio\". It will have an input field for the reactant mass. As the user types, the corresponding product mass will be calculated and displayed in real-time.\n    -   **State Management:** `useState` to hold the reactant value.\n    -   **Component Type:** Client (`\"use client\"`).\n\n6.  **`6-TransferProblems.tsx`**:\n    -   **Content:** Uses `Tabs` for \"Near Transfer\" and \"Far Transfer\".\n        -   Each tab contains a problem statement, an `Input` for the answer, a `Button` to check, and an `Alert` to show feedback (correct/incorrect).\n    -   **State Management:** `useState` for each input's value and feedback state.\n    -   **Component Type:** Client (`\"use client\"`).\n\n7.  **`7-MetacognitionChecklist.tsx`**:\n    -   **Content:** A final `Card` with a list of self-monitoring questions to encourage students to reflect on their problem-solving process.\n    -   **Visuals:** Use `CheckSquare` icons.\n    -   **Component Type:** Server.\n\n### 4. Styling & Accessibility\n\n-   **Layout:** A single-column, responsive layout centered on the page (`max-w-3xl mx-auto`) for optimal readability.\n-   **Theme:** A clean, academic theme. Default `shadcn/ui` styles will be used with minor tweaks. I'll use a neutral color palette.\n-   **Typography:** Default Tailwind sans-serif fonts for clarity. Headings (`h1`, `h2`, `h3`) will structure the content hierarchy.\n-   **Accessibility:**\n    -   Semantic HTML (`<main>`, `<section>`, headings).\n    -   Labels for all form inputs.\n    -   Sufficient color contrast.\n    -   Focus management will be handled well by `shadcn/ui` components.\n    -   Icons will be decorative or have appropriate `aria` labels if they convey meaning.\n\nThis plan ensures all user requirements are met, creating a structured, interactive, and pedagogically sound learning experience. It follows best practices for Next.js (App Router, Server/Client component separation) and web development in general.\n\n</Thinking>\n\n```json\n[\n  {\"pnpm\": \"i lucide-react\"},\n  {\"pnpm\": \"i -D @types/node tailwindcss postcss autoprefixer\"},\n  {\"pnpm\": \"pnpm dlx tailwindcss init -p\"},\n  {\"pnpm\": \"pnpm dlx shadcn-ui@latest init\"},\n  {\"pnpm\": \"pnpm dlx shadcn-ui@latest add card button accordion input label alert tabs table\"}\n]\n```\n\n```tsx file=\"app/layout.tsx\"\nimport type { Metadata } from \"next\";\nimport { Inter } from \"next/font/google\";\nimport \"./globals.css\";\n\nconst inter = Inter({ subsets: [\"latin\"] });\n\nexport const metadata: Metadata = {\n  title: \"Chemistry Problem Solver\",\n  description: \"An interactive webpage to learn proportional reasoning in chemistry.\",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\">\n      <body className={inter.className}>\n        {children}\n      </body>\n    </html>\n  );\n}\n```\n\n```css file=\"app/globals.css\"\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 84% 4.9%;\n\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 84% 4.9%;\n\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 84% 4.9%;\n\n    --primary: 222.2 47.4% 11.2%;\n    --primary-foreground: 210 40% 98%;\n\n    --secondary: 210 40% 96.1%;\n    --secondary-foreground: 222.2 47.4% 11.2%;\n\n    --muted: 210 40% 96.1%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n\n    --accent: 210 40% 96.1%;\n    --accent-foreground: 222.2 47.4% 11.2%;\n\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 210 40% 98%;\n\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: 222.2 84% 4.9%;\n\n    --radius: 0.5rem;\n  }\n\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n\n    --primary: 210 40% 98%;\n    --primary-foreground: 222.2 47.4% 11.2%;\n\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n\n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 215 20.2% 65.1%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n```\n\n```tsx file=\"components/icons.tsx\"\nimport {\n  FlaskConical,\n  Beaker,\n  Lightbulb,\n  Scale,\n  Atom,\n  TestTube,\n  Calculator,\n  BrainCircuit,\n  CheckSquare,\n  ChevronRight,\n  type LucideProps,\n} from 'lucide-react';\n\nexport const Icons = {\n  Flask: (props: LucideProps) => <FlaskConical {...props} />,\n  Beaker: (props: LucideProps) => <Beaker {...props} />,\n  Lightbulb: (props: LucideProps) => <Lightbulb {...props} />,\n  Scale: (props: LucideProps) => <Scale {...props} />,\n  Atom: (props: LucideProps) => <Atom {...props} />,\n  TestTube: (props: LucideProps) => <TestTube {...props} />,\n  Calculator: (props: LucideProps) => <Calculator {...props} />,\n  Brain: (props: LucideProps) => <BrainCircuit {...props} />,\n  CheckSquare: (props: LucideProps) => <CheckSquare {...props} />,\n  ChevronRight: (props: LucideProps) => <ChevronRight {...props} />,\n};\n```\n\n```tsx file=\"components/lesson/1-ContextSection.tsx\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Icons } from \"@/components/icons\";\n\nexport default function ContextSection() {\n  return (\n    <Card className=\"bg-secondary\">\n      <CardHeader>\n        <div className=\"flex items-center gap-4\">\n          <div className=\"flex -space-x-2\">\n            <Icons.Flask className=\"h-8 w-8 text-primary\" />\n            <Icons.Beaker className=\"h-8 w-8 text-muted-foreground\" />\n          </div>\n          <CardTitle className=\"text-2xl\">The Scenario: SynthChem Innovations</CardTitle>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <p className=\"text-muted-foreground\">\n          Welcome, Lab Technician! You're working at a cutting-edge pharmaceutical company, and your task is to synthesize a crucial new compound. Efficiency is everything. To avoid wasting expensive materials, you must master the relationship between your starting materials (reactants) and your final product. Let's dive into the core principle that governs these transformations: **proportional reasoning**.\n        </p>\n      </CardContent>\n    </Card>\n  );\n}\n```\n\n```tsx file=\"components/lesson/2-ProblemStatement.tsx\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Icons } from \"@/components/icons\";\n\nexport default function ProblemStatement() {\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center gap-3\">\n          <Icons.Lightbulb className=\"h-6 w-6 text-yellow-500\" />\n          <CardTitle>The Core Problem</CardTitle>\n        </div>\n        <CardDescription>This is the central challenge we will solve together.</CardDescription>\n      </CardHeader>\n      <CardContent className=\"bg-muted/50 p-6 rounded-lg text-lg font-medium\">\n        <p>A chemical reaction produces <strong>15.0 g</strong> of a compound from <strong>5.0 g</strong> of a reactant.</p>\n        <ol className=\"list-decimal list-inside mt-4 space-y-2\">\n          <li>What is the mass ratio of the product to the reactant?</li>\n          <li>How much reactant would be needed to produce <strong>60.0 g</strong> of the product?</li>\n        </ol>\n      </CardContent>\n    </Card>\n  );\n}\n```\n\n```tsx file=\"components/lesson/3-CRASection.tsx\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nfunction ParticleDiagram() {\n    return (\n        <div className=\"flex items-center justify-center gap-4 my-4\">\n            <div className=\"flex items-center gap-2\">\n                <div className=\"w-8 h-8 rounded-full bg-blue-500\" />\n                <span className=\"font-bold text-lg\">+ ...</span>\n            </div>\n            <svg width=\"40\" height=\"40\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                <path d=\"M5 12h14\" /><path d=\"m12 5 7 7-7 7\" />\n            </svg>\n            <div className=\"flex items-center gap-2\">\n                <div className=\"w-8 h-8 rounded-full bg-green-500\" />\n                <div className=\"w-8 h-8 rounded-full bg-green-500\" />\n                <div className=\"w-8 h-8 rounded-full bg-green-500\" />\n                 <span className=\"font-bold text-lg\">+ ...</span>\n            </div>\n        </div>\n    )\n}\n\nexport default function CRASection() {\n  return (\n    <section className=\"space-y-4\">\n        <h2 className=\"text-2xl font-bold\">From Concrete to Abstract: Understanding Ratios</h2>\n        <div className=\"grid md:grid-cols-3 gap-4\">\n            <Card>\n                <CardHeader>\n                    <CardTitle>1. Concrete</CardTitle>\n                    <CardDescription>Observable World</CardDescription>\n                </CardHeader>\n                <CardContent>\n                    <p>Imagine baking. If 1 cup of flour (reactant) makes 3 cookies (product), the relationship is fixed. Doubling the flour doubles the cookies. This is a real-world ratio.</p>\n                </CardContent>\n            </Card>\n             <Card>\n                <CardHeader>\n                    <CardTitle>2. Representational</CardTitle>\n                    <CardDescription>Visual Models</CardDescription>\n                </CardHeader>\n                <CardContent>\n                    <p>We can model this at a particle level. For every one blue \"reactant\" particle, we get three green \"product\" particles.</p>\n                    <ParticleDiagram />\n                </CardContent>\n            </Card>\n             <Card>\n                <CardHeader>\n                    <CardTitle>3. Abstract</CardTitle>\n                    <CardDescription>Symbolic & Mathematical</CardDescription>\n                </CardHeader>\n                <CardContent>\n                    <p>In chemistry, we use math. The relationship is a mass ratio. We can write a formula:</p>\n                    <div className=\"bg-muted p-2 rounded-md text-center my-4 font-mono\">\n                        Ratio = Mass of Product / Mass of Reactant\n                    </div>\n                </CardContent>\n            </Card>\n        </div>\n    </section>\n  );\n}\n```\n\n```tsx file=\"components/lesson/4-FOPSMethod.tsx\"\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { Icons } from \"@/components/icons\";\n\nexport default function FOPSMethod() {\n  return (\n    <section>\n      <h2 className=\"text-2xl font-bold mb-4\">A Strategy for Success: The F.O.P.S. Method</h2>\n      <Accordion type=\"single\" collapsible className=\"w-full\">\n        <AccordionItem value=\"item-1\">\n          <AccordionTrigger className=\"text-lg\">F - Find the Core Principle</AccordionTrigger>\n          <AccordionContent>\n            The key idea here is the <strong>Law of Definite Proportions</strong>. This law states that a chemical compound always contains its component elements in a fixed ratio by mass. This is why our reactant-to-product ratio will be constant.\n          </AccordionContent>\n        </AccordionItem>\n        <AccordionItem value=\"item-2\">\n          <AccordionTrigger className=\"text-lg\">O - Organize the Information</AccordionTrigger>\n          <AccordionContent>\n            Let's create a table to see what we have and what we need.\n            <Table className=\"my-4\">\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Quantity</TableHead>\n                  <TableHead>Value</TableHead>\n                  <TableHead>Status</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                <TableRow>\n                  <TableCell>Initial Reactant Mass</TableCell>\n                  <TableCell>5.0 g</TableCell>\n                  <TableCell className=\"text-green-600 font-semibold\">Known</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Initial Product Mass</TableCell>\n                  <TableCell>15.0 g</TableCell>\n                  <TableCell className=\"text-green-600 font-semibold\">Known</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Mass Ratio (Product:Reactant)</TableCell>\n                  <TableCell>?</TableCell>\n                  <TableCell className=\"text-red-600 font-semibold\">Goal 1</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Reactant for 60.0 g Product</TableCell>\n                  <TableCell>?</TableCell>\n                  <TableCell className=\"text-red-600 font-semibold\">Goal 2</TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n          </AccordionContent>\n        </AccordionItem>\n        <AccordionItem value=\"item-3\">\n          <AccordionTrigger className=\"text-lg\">P - Plan the Solution</AccordionTrigger>\n          <AccordionContent className=\"space-y-2\">\n            <p><strong>Part 1 (Finding the Ratio):</strong> We will use the abstract formula from our CRA model. Divide the product mass by the reactant mass.</p>\n            <p><strong>Part 2 (Finding the new reactant mass):</strong> Once we have the constant ratio, we can set up a proportion to solve for the unknown reactant mass required for 60.0 g of product.</p>\n          </AccordionContent>\n        </AccordionItem>\n        <AccordionItem value=\"item-4\">\n          <AccordionTrigger className=\"text-lg\">S - Solve the Problem</AccordionTrigger>\n          <AccordionContent>\n            <div className=\"space-y-4\">\n              <div>\n                <h4 className=\"font-semibold\">Part 1: Calculate the Mass Ratio</h4>\n                <p className=\"font-mono bg-muted p-3 rounded-md my-2\">\n                  Ratio = 15.0 g Product / 5.0 g Reactant = 3\n                </p>\n                <p>The mass ratio of product to reactant is <strong>3 to 1</strong> (or 3:1).</p>\n              </div>\n\n              <div>\n                <h4 className=\"font-semibold\">Part 2: Calculate Reactant Needed for 60.0 g of Product</h4>\n                <p>We can set up a proportion:</p>\n                <p className=\"font-mono bg-muted p-3 rounded-md my-2 text-center\">\n                  (15.0 g Product / 5.0 g Reactant) = (60.0 g Product / X g Reactant)\n                </p>\n                <p>Solving for X:</p>\n                 <p className=\"font-mono bg-muted p-3 rounded-md my-2\">\n                  X = (60.0 g Product * 5.0 g Reactant) / 15.0 g Product <br/>\n                  X = 300 / 15.0 <br/>\n                  <strong>X = 20.0 g Reactant</strong>\n                </p>\n              </div>\n\n              <Alert>\n                <Icons.Brain className=\"h-4 w-4\" />\n                <AlertTitle>Think Aloud: Does this make sense?</AlertTitle>\n                <AlertDescription>\n                  We want to produce 60.0 g of product, which is 4 times the original 15.0 g (60 / 15 = 4). Because the ratio is constant, we should need 4 times the original reactant. 4 * 5.0 g = 20.0 g. Our answer is consistent!\n                </AlertDescription>\n              </Alert>\n            </div>\n          </AccordionContent>\n        </AccordionItem>\n      </Accordion>\n    </section>\n  );\n}\n```\n\n```tsx file=\"components/lesson/5-InteractivePractice.tsx\"\n'use client'\n\nimport { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Icons } from \"@/components/icons\";\n\nexport default function InteractivePractice() {\n    const [reactantMass, setReactantMass] = useState(5.0);\n    const ratio = 3;\n\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const value = e.target.value;\n        setReactantMass(value === '' ? 0 : parseFloat(value));\n    };\n    \n    const productMass = (reactantMass * ratio).toFixed(2);\n\n    return (\n        <Card>\n            <CardHeader>\n                <div className=\"flex items-center gap-3\">\n                    <Icons.TestTube className=\"h-6 w-6 text-blue-500\" />\n                    <CardTitle>Interactive Lab Bench</CardTitle>\n                </div>\n                <CardDescription>Experiment with the ratio yourself. Enter a mass for the reactant and see how much product you can make.</CardDescription>\n            </CardHeader>\n            <CardContent>\n                <div className=\"grid md:grid-cols-3 items-center gap-4\">\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"reactant-mass\">Reactant Mass (g)</Label>\n                        <Input \n                            id=\"reactant-mass\" \n                            type=\"number\" \n                            value={reactantMass}\n                            onChange={handleInputChange}\n                            min=\"0\"\n                            step=\"0.1\"\n                        />\n                    </div>\n                     <div className=\"flex justify-center text-muted-foreground\">\n                       <Icons.ChevronRight className=\"h-8 w-8\" />\n                       <span className=\"font-mono font-bold text-lg self-center p-2 rounded-md bg-secondary\">Ratio 3:1</span>\n                       <Icons.ChevronRight className=\"h-8 w-8\" />\n                    </div>\n                    <div className=\"space-y-2\">\n                         <Label>Predicted Product Mass (g)</Label>\n                         <div className=\"w-full p-2 h-10 border rounded-md bg-muted flex items-center font-bold text-lg\">\n                            {productMass}\n                         </div>\n                    </div>\n                </div>\n            </CardContent>\n        </Card>\n    )\n}\n```\n\n```tsx file=\"components/lesson/6-TransferProblems.tsx\"\n'use client'\n\nimport { useState } from 'react';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\nimport { CheckCircle2, XCircle, BrainCircuit } from 'lucide-react';\n\ninterface Feedback {\n  type: 'correct' | 'incorrect' | null;\n  message: string;\n}\n\nexport default function TransferProblems() {\n  const [nearAnswer, setNearAnswer] = useState('');\n  const [nearFeedback, setNearFeedback] = useState<Feedback>({ type: null, message: '' });\n  const [farAnswer, setFarAnswer] = useState('');\n  const [farFeedback, setFarFeedback] = useState<Feedback>({ type: null, message: '' });\n\n  const checkNearTransfer = () => {\n    if (parseFloat(nearAnswer) === 3.0) {\n      setNearFeedback({ type: 'correct', message: 'Excellent! The ratio is 4:1, so 12.0 g / 4 = 3.0 g. You correctly applied the same proportional logic.' });\n    } else {\n      setNearFeedback({ type: 'incorrect', message: 'Not quite. Remember the product-to-reactant ratio is 4:1. Try dividing the product mass by the ratio.' });\n    }\n  };\n  \n  const checkFarTransfer = () => {\n    // P1*V1 = P2*V2 -> 2.0 * 10.0 = 4.0 * V2 -> V2 = 20.0 / 4.0 = 5.0\n    if (parseFloat(farAnswer) === 5.0) {\n      setFarFeedback({ type: 'correct', message: 'Fantastic! You recognized the underlying inverse relationship model (P₁V₁ = P₂V₂), which is structurally similar to solving proportions. Great transfer of skills!' });\n    } else {\n      setFarFeedback({ type: 'incorrect', message: 'Almost! Think about the relationship: if pressure doubles, what happens to volume? Use the formula P₁V₁ = P₂V₂ to solve for the new volume (V₂).' });\n    }\n  };\n\n  return (\n    <section>\n       <div className=\"flex items-center gap-3 mb-4\">\n          <BrainCircuit className=\"h-7 w-7 text-primary\" />\n          <h2 className=\"text-2xl font-bold\">Transfer Your Knowledge</h2>\n        </div>\n      <Tabs defaultValue=\"near\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"near\">📌 Near Transfer</TabsTrigger>\n          <TabsTrigger value=\"far\">📌 Far Transfer</TabsTrigger>\n        </TabsList>\n        <TabsContent value=\"near\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Same Structure, Different Content</CardTitle>\n              <CardDescription>\n                This problem uses the exact same reasoning as our main example, just with different numbers and context.\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"font-medium\">\"In a different synthesis, the mass ratio of product to reactant is 4:1. If a reaction produces 12.0 g of product, how much reactant was used?\"</p>\n              <div className=\"flex items-end gap-2\">\n                <div className=\"flex-grow space-y-1\">\n                  <Label htmlFor=\"near-answer\">Reactant Mass (g)</Label>\n                  <Input id=\"near-answer\" type=\"number\" value={nearAnswer} onChange={(e) => setNearAnswer(e.target.value)} />\n                </div>\n                <Button onClick={checkNearTransfer}>Check Answer</Button>\n              </div>\n              {nearFeedback.type && (\n                <Alert variant={nearFeedback.type === 'correct' ? undefined : 'destructive'}>\n                  {nearFeedback.type === 'correct' ? <CheckCircle2 className=\"h-4 w-4\" /> : <XCircle className=\"h-4 w-4\" />}\n                  <AlertTitle>{nearFeedback.type === 'correct' ? 'Correct!' : 'Try Again!'}</AlertTitle>\n                  <AlertDescription>{nearFeedback.message}</AlertDescription>\n                </Alert>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n        <TabsContent value=\"far\">\n           <Card>\n            <CardHeader>\n              <CardTitle>Different Surface, Same Core Logic</CardTitle>\n              <CardDescription>\n                This problem looks totally different (it's about gases!), but the underlying mathematical structure is very similar.\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"font-medium\">\"A sample of nitrogen gas (N₂) occupies a volume of 10.0 L at a pressure of 2.0 atm. If the temperature is held constant, what volume will the gas occupy if the pressure is increased to 4.0 atm?\" (Hint: Boyle's Law, P₁V₁ = P₂V₂)</p>\n               <div className=\"flex items-end gap-2\">\n                <div className=\"flex-grow space-y-1\">\n                  <Label htmlFor=\"far-answer\">New Volume (L)</Label>\n                  <Input id=\"far-answer\" type=\"number\" value={farAnswer} onChange={(e) => setFarAnswer(e.target.value)} />\n                </div>\n                <Button onClick={checkFarTransfer}>Check Answer</Button>\n              </div>\n              {farFeedback.type && (\n                <Alert variant={farFeedback.type === 'correct' ? undefined : 'destructive'}>\n                  {farFeedback.type === 'correct' ? <CheckCircle2 className=\"h-4 w-4\" /> : <XCircle className=\"h-4 w-4\" />}\n                  <AlertTitle>{farFeedback.type === 'correct' ? 'Correct!' : 'Try Again!'}</AlertTitle>\n                  <AlertDescription>{farFeedback.message}</AlertDescription>\n                </Alert>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </section>\n  );\n}\n```\n\n```tsx file=\"components/lesson/7-MetacognitionChecklist.tsx\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Icons } from \"@/components/icons\";\n\nexport default function MetacognitionChecklist() {\n  const checklistItems = [\n    \"What is this problem really about? (e.g., ratios, energy, equilibrium)\",\n    \"What information is given, and what is the ultimate goal?\",\n    \"What scientific principle or formula connects what's given to the goal?\",\n    \"After solving, does my answer seem reasonable? Did I check my units?\",\n  ];\n\n  return (\n    <Card className=\"bg-secondary\">\n      <CardHeader>\n        <div className=\"flex items-center gap-3\">\n          <Icons.Brain className=\"h-6 w-6 text-primary\" />\n          <CardTitle>Build Your Metacognitive Skills</CardTitle>\n        </div>\n        <CardDescription>\n          Great scientists think about their thinking. Before tackling a new problem, ask yourself these questions.\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <ul className=\"space-y-3\">\n          {checklistItems.map((item, index) => (\n            <li key={index} className=\"flex items-start gap-3\">\n              <Icons.CheckSquare className=\"h-5 w-5 text-green-600 mt-0.5 flex-shrink-0\" />\n              <span>{item}</span>\n            </li>\n          ))}\n        </ul>\n      </CardContent>\n    </Card>\n  );\n}\n```\n\n```tsx file=\"app/page.tsx\"\nimport ContextSection from \"@/components/lesson/1-ContextSection\";\nimport ProblemStatement from \"@/components/lesson/2-ProblemStatement\";\nimport CRASection from \"@/components/lesson/3-CRASection\";\nimport FOPSMethod from \"@/components/lesson/4-FOPSMethod\";\nimport InteractivePractice from \"@/components/lesson/5-InteractivePractice\";\nimport TransferProblems from \"@/components/lesson/6-TransferProblems\";\nimport MetacognitionChecklist from \"@/components/lesson/7-MetacognitionChecklist\";\n\nexport default function Home() {\n  return (\n    <main className=\"flex min-h-screen flex-col items-center p-4 sm:p-8 md:p-12 bg-background\">\n      <div className=\"w-full max-w-4xl space-y-12\">\n        <header className=\"text-center\">\n          <h1 className=\"text-4xl md:text-5xl font-extrabold tracking-tight\">\n            Mastering Proportional Reasoning in Chemistry\n          </h1>\n          <p className=\"mt-4 text-lg text-muted-foreground\">\n            A guided lesson to build your problem-solving and scientific thinking skills.\n          </p>\n        </header>\n\n        <div className=\"space-y-8\">\n          {/* Sequentially render the lesson components */}\n          <ContextSection />\n          <ProblemStatement />\n          <CRASection />\n          <FOPSMethod />\n          <InteractivePractice />\n          <TransferProblems />\n          <MetacognitionChecklist />\n        </div>\n\n         <footer className=\"text-center text-sm text-muted-foreground pt-8\">\n            <p>&copy; {new Date().getFullYear()} v0 Educational Designs. Built with Next.js and shadcn/ui.</p>\n        </footer>\n      </div>\n    </main>\n  );\n}\n```"
}