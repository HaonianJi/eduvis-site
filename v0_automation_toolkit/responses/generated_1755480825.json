{
  "content": "<Thinking>\nThe user wants me to create an educational webpage that teaches a specific chemistry problem while building scientific reasoning skills.\n\n**1. Project Structure & Framework**\n*   **Framework:** Next.js with App Router. This is the standard v0 approach.\n*   **Language:** TypeScript.\n*   **Styling:** Tailwind CSS.\n*   **UI Components:** I'll use `shadcn/ui` for a clean, modern look. Specifically, I'll need `Card` for sectioning content, `Button` for interactive elements, `Accordion` for the step-by-step guide, and `Separator` for visual division. I'll also use icons from `lucide-react` to enhance visual communication.\n*   **File Structure:**\n    *   `app/page.tsx`: The main component for the entire webpage. Since it will have interactive elements (like \"Reveal Answer\" buttons), it needs to be a Client Component (`\"use client\"`).\n    *   `app/layout.tsx`: Standard root layout.\n    *   `components/ui/`: Directory for shadcn/ui components.\n    *   `lib/utils.ts`: The `cn` utility function for merging Tailwind classes.\n    *   `public/`: No images needed initially. I will use SVGs directly in the JSX or from `lucide-react`.\n\n**2. Pedagogical Flow & Content Implementation**\nI will structure the `app/page.tsx` component to follow the user's detailed instructional plan.\n\n*   **Introduction & Context:**\n    *   **Scenario:** I'll create a simple, relatable lab scenario: \"Synthesizing a compound to create a new fertilizer.\" This avoids complex chemical names but feels authentic.\n    *   **Visuals:** I'll use a `FlaskConical` icon from `lucide-react` and create a simple SVG diagram showing starting material -> product.\n\n*   **The Main Problem:**\n    *   Clearly state the problem provided by the user: \"A chemical reaction produces 15.0 g of a compound from 5.0 g of a starting material...\"\n\n*   **Conceptual Understanding (CRA Model):**\n    *   I'll break this down into three distinct visual steps within a `Card`.\n    *   **Concrete:** Describe the physical observation (e.g., \"mixing a white powder with a clear liquid to get a blue crystal\").\n    *   **Representational:** Use simple circle SVGs to represent particles reacting. I will also show a simplified chemical equation `A -> P`.\n    *   **Abstract:** Transition to the mathematical relationship (mass ratio).\n\n*   **Problem Solving Strategy (F.O.P.S.):**\n    *   This is a perfect use case for the `Accordion` component. Each letter of F.O.P.S will be an `AccordionItem`.\n    *   **F (Find):** Title: \"Find the Core Principle.\" Content: Explain the Law of Definite Proportions simply.\n    *   **O (Organize):** Title: \"Organize the Information.\" Content: Use an HTML table to list knowns and unknowns.\n    *   **P (Plan):** Title: \"Plan Your Approach.\" Content: State the plan to use a ratio.\n    *   **S (Solve):** Title: \"Solve the Problem.\" Content: Show the step-by-step calculation. The final answer will be hidden behind a \"Reveal Answer\" `Button`. I'll use `useState` to manage its visibility.\n\n*   **Metacognition:**\n    *   I'll create a \"Metacognitive Checkpoint\" section using a `Card`.\n    *   It will feature a `BrainCircuit` icon.\n    *   I'll list self-check questions and a simple checklist as requested.\n\n*   **Transfer Tasks:**\n    *   This section will contain two sub-sections, each in its own `Card`.\n    *   **Near-Transfer Problem:** I'll create a problem with the same proportional structure but a different context (e.g., baking or another simple synthesis). It will have its own \"Reveal Solution\" button, managed by a separate `useState` variable.\n    *   **Far-Transfer Problem:** I'll use the user's idea of a problem with a different surface but similar underlying mathematical structure. A density problem is a great fit as it maintains direct proportionality (`mass = density * volume`). It will also have its own \"Reveal Solution\" button.\n\n**3. Interactivity & State Management**\n*   The page component (`app/page.tsx`) will start with `\"use client\"`.\n*   I will use multiple `useState` hooks to manage the visibility of the different solutions (one for the main problem, one for the near-transfer, and one for the far-transfer). This keeps the state management simple and localized.\n\n**4. Accessibility & Design**\n*   Use semantic HTML (`<main>`, `<section>`, `<h2>`, etc.).\n*   Ensure interactive elements like buttons have clear text.\n*   The design will be clean, with ample whitespace. I'll use a neutral color palette (grays, whites) with a single accent color (like a teal or green) for buttons and icons to guide the user's attention.\n*   The layout will be a single column, making it responsive by default. I'll use flexbox and grid for internal component layouts.\n\nBy following this plan, I can generate a single, comprehensive Next.js project that fulfills all the user's requirements for an instructionally rich, interactive, and visually engaging educational webpage."
}