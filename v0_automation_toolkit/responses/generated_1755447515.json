{
  "content": "<Thinking>\n### 1. Project Structure and Planning\n\nI will create a single-page Next.js application using the App Router. The entire page will be contained within `app/page.tsx`. I'll use shadcn/ui components for styling and interactivity, specifically `Card` for layout and `Accordion` for the step-by-step guides and problem solutions. This will keep the code organized and maintainable. The entire page will be a client component (`'use client'`) to handle the state of the accordions.\n\n**File Structure:**\n\n*   `app/layout.tsx`: Root layout.\n*   `app/globals.css`: Tailwind CSS global styles.\n*   `app/page.tsx`: The main component for the educational webpage.\n*   `components/ui/accordion.tsx`: shadcn/ui component.\n*   `components/ui/card.tsx`: shadcn/ui component.\n*   `components/ui/button.tsx`: shadcn/ui component.\n*   `lib/utils.ts`: Utility functions for shadcn/ui.\n*   `tailwind.config.ts`: Tailwind configuration.\n*   `package.json`: Project dependencies.\n\n### 2. Styling and Visuals\n\n*   **Framework:** Tailwind CSS.\n*   **Component Library:** shadcn/ui. I'll need to install `Card`, `Accordion`, and `Button`.\n*   **Color Palette:** A clean, academic theme. I'll use a neutral background (slate/gray) with a primary accent color (e.g., sky blue or emerald green) for headings, buttons, and important notes to guide the user's attention.\n*   **Typography:** I'll use clear, legible fonts from the default Tailwind config (`sans-serif`). Font sizes will be responsive to ensure readability on all devices.\n*   **Icons and Diagrams:** I will create simple, custom SVG icons as React components directly within the `page.tsx` file. This avoids external dependencies and keeps the project self-contained. I will create icons for a beaker, a flask, a molecule, a sandwich, and a cookie to visually support the content.\n\n### 3. Frameworks and Libraries\n\n*   **Next.js (App Router):** The core framework.\n*   **React:** For building the UI components.\n*   **TypeScript:** For type safety.\n*   **shadcn/ui:** For pre-built, accessible UI components (`Accordion`, `Card`, `Button`).\n*   **Lucide React:** For icons, installed as a dependency for shadcn/ui.\n\n### 4. Content and Pedagogy Breakdown\n\nThe page will be structured to follow the user's detailed instructional plan.\n\n1.  **Introduction & Context:** Start with a title and a brief intro. Use the sandwich analogy as a concrete, real-world hook.\n2.  **Lab Scenario (Concrete):** Introduce the baking soda and vinegar reaction. I'll use a `Card` component with an SVG icon of a bubbling flask to present the problem.\n3.  **Representational Step:** Display the balanced chemical equation and explain its components. I will use molecular SVG icons to visualize the reactants and products at a particle level.\n4.  **Abstract Problem Solving (F.O.P.S.):** This will be the core interactive section. I'll use an `Accordion` component, with each item representing a step: Find, Organize, Plan, and Solve. This scaffolds the learning process, allowing students to reveal one step at a time.\n    *   **F (Find):** Identify the core principle.\n    *   **O (Organize):** Use a formatted table to organize the given information.\n    *   **P (Plan):** List the calculation steps.\n    *   **S (Solve):** Show the detailed calculations with \"Think Aloud\" text to model the reasoning process.\n5.  **Metacognition:** A section with self-check questions to encourage students to reflect on their answer and process.\n6.  **Transfer Problems:**\n    *   **Near-Transfer:** A structurally similar stoichiometry problem (Haber-Bosch process). The problem and its solution will be in an `Accordion` to allow for self-assessment.\n    *   **Far-Transfer:** A problem with a different surface context (baking cookies) but the same underlying limiting-reactant logic. This will also use an `Accordion`.\n\n### 5. Caveats and Implementation Details\n\n*   The entire page will be rendered as a client component (`'use client'`) because the `Accordion` from shadcn/ui requires client-side state and event handlers. This is acceptable for a highly interactive educational page.\n*   Math equations and chemical formulas will be written as plain text. For a production app, one might use a library like KaTeX, but for this implementation, clear text formatting will suffice. I will use subscripts and superscripts where appropriate.\n*   The SVG icons will be defined as separate functional components at the bottom of the `page.tsx` file for better code organization. This keeps the main component body cleaner.\n\nThis plan ensures all pedagogical requirements from the user's prompt are met in a structured, visually engaging, and interactive web page built with modern web development best practices.\n\n</Thinking>\n\n```json\n{\n  \"project_name\": \"chemistry-learning-webpage\",\n  \"app_entry\": \"app/page.tsx\",\n  \"files\": [\n    \"app/page.tsx\",\n    \"app/layout.tsx\",\n    \"app/globals.css\",\n    \"components/ui/accordion.tsx\",\n    \"components/ui/card.tsx\",\n    \"components/ui/button.tsx\",\n    \"lib/utils.ts\",\n    \"tailwind.config.ts\",\n    \"package.json\"\n  ]\n}\n```\n\n```tsx file=\"app/page.tsx\"\n'use client'\n\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from '@/components/ui/accordion'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport {\n  FlaskConical,\n  Beaker,\n  Sandwich,\n  Cookie,\n  Atom,\n  ChevronRight,\n  HelpCircle,\n  BrainCircuit,\n  Target,\n} from 'lucide-react'\n\nexport default function ChemistryPage() {\n  return (\n    <div className=\"bg-slate-50 min-h-screen text-slate-800\">\n      <main className=\"container mx-auto px-4 py-12\">\n        <header className=\"text-center mb-12\">\n          <h1 className=\"text-4xl md:text-5xl font-extrabold text-sky-700 mb-2\">\n            Mastering Limiting Reactants\n          </h1>\n          <p className=\"text-lg text-slate-600 max-w-3xl mx-auto\">\n            A guided journey from everyday examples to complex chemical\n            reactions.\n          </p>\n        </header>\n\n        {/* Section 1: The Context */}\n        <section className=\"mb-12\">\n          <Card className=\"bg-white shadow-lg\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-3 text-2xl font-bold text-slate-700\">\n                <Sandwich className=\"w-8 h-8 text-amber-600\" />\n                <span>Step 1: Understand the Context</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4 text-slate-600\">\n              <p>\n                Imagine you're making sandwiches. A perfect sandwich needs 2\n                slices of bread and 1 slice of cheese.\n              </p>\n              <div className=\"flex flex-col md:flex-row items-center justify-center gap-6 p-6 bg-slate-100 rounded-lg\">\n                <div className=\"text-center\">\n                  <p className=\"font-semibold\">You have:</p>\n                  <p>10 slices of bread</p>\n                  <p>3 slices of cheese</p>\n                </div>\n                <ChevronRight className=\"w-8 h-8 text-slate-400 hidden md:block\" />\n                <div className=\"text-center\">\n                  <p className=\"font-semibold\">How many can you make?</p>\n                  <p className=\"text-2xl font-bold text-sky-600\">3 sandwiches</p>\n                </div>\n              </div>\n              <p>\n                Even though you have enough bread for 5 sandwiches, you run out\n                of cheese after making 3. The cheese{' '}\n                <strong className=\"text-red-600\">limits</strong> how many\n                sandwiches you can make. It's the \"limiting reactant.\"\n              </p>\n              <p>\n                Chemistry works the exact same way. Let's apply this idea to a\n                lab experiment!\n              </p>\n            </CardContent>\n          </Card>\n        </section>\n\n        {/* Section 2: The Lab Scenario */}\n        <section className=\"mb-12\">\n          <Card className=\"bg-white shadow-lg\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-3 text-2xl font-bold text-slate-700\">\n                <FlaskConical className=\"w-8 h-8 text-emerald-600\" />\n                <span>Step 2: The Lab Scenario (Concrete)</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-slate-600\">\n                Let's explore the classic \"volcano\" reaction between baking soda\n                (sodium bicarbonate) and vinegar (acetic acid). Mixing them\n                produces bubbles of carbon dioxide gas.\n              </p>\n              <div className=\"p-6 bg-emerald-50 border border-emerald-200 rounded-lg text-center\">\n                <h3 className=\"font-bold text-lg text-emerald-800 mb-2\">\n                  The Problem\n                </h3>\n                <p className=\"text-lg text-slate-700\">\n                  If you mix{' '}\n                  <strong className=\"text-emerald-700\">\n                    10.0 g of sodium bicarbonate\n                  </strong>{' '}\n                  with{' '}\n                  <strong className=\"text-emerald-700\">\n                    15.0 g of acetic acid\n                  </strong>\n                  , what is the maximum mass of carbon dioxide that can be\n                  produced?\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </section>\n\n        {/* Section 3: Representing the Reaction */}\n        <section className=\"mb-12\">\n          <Card className=\"bg-white shadow-lg\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-3 text-2xl font-bold text-slate-700\">\n                <Atom className=\"w-8 h-8 text-indigo-600\" />\n                <span>Step 3: From Beakers to Molecules (Representational)</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-slate-600\">\n                To solve this, we first need to represent what's happening with\n                a balanced chemical equation. This shows the \"recipe\" at a\n                molecular level.\n              </p>\n              <div className=\"text-center p-6 bg-indigo-50 border border-indigo-200 rounded-lg\">\n                <p className=\"text-lg font-mono tracking-wider\">\n                  <span className=\"text-red-600\">NaHCO₃</span> +{' '}\n                  <span className=\"text-red-600\">CH₃COOH</span> →{' '}\n                  <span className=\"text-blue-600\">CH₃COONa</span> +{' '}\n                  <span className=\"text-blue-600\">H₂O</span> +{' '}\n                  <span className=\"text-blue-600\">CO₂</span>\n                </p>\n                <p className=\"text-sm text-slate-500 mt-2\">\n                  (Reactants → Products)\n                </p>\n              </div>\n              <p className=\"text-slate-600\">\n                This equation is already balanced! It tells us that{' '}\n                <strong>1 mole</strong> of sodium bicarbonate reacts with{' '}\n                <strong>1 mole</strong> of acetic acid. This 1:1 ratio is crucial.\n              </p>\n            </CardContent>\n          </Card>\n        </section>\n\n        {/* Section 4: Building the Model with F.O.P.S. */}\n        <section className=\"mb-12\">\n          <Card className=\"bg-white shadow-lg\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-3 text-2xl font-bold text-slate-700\">\n                <BrainCircuit className=\"w-8 h-8 text-cyan-600\" />\n                <span>Step 4: Solving with F.O.P.S. (Abstract)</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-slate-600 mb-4\">\n                Let's use the F.O.P.S. strategy to break down the problem into\n                manageable steps. Click each step to reveal its content.\n              </p>\n              <Accordion type=\"single\" collapsible className=\"w-full\">\n                <AccordionItem value=\"item-1\">\n                  <AccordionTrigger className=\"text-xl font-bold text-cyan-700\">\n                    F - Find\n                  </AccordionTrigger>\n                  <AccordionContent className=\"text-slate-600 text-base space-y-2\">\n                    <p>\n                      <strong>Core Principle:</strong> The problem is about\n                      stoichiometry and finding the limiting reactant.\n                    </p>\n                    <p>\n                      <strong>Goal:</strong> Calculate the maximum mass of CO₂ produced.\n                    </p>\n                  </AccordionContent>\n                </AccordionItem>\n                <AccordionItem value=\"item-2\">\n                  <AccordionTrigger className=\"text-xl font-bold text-cyan-700\">\n                    O - Organize\n                  </AccordionTrigger>\n                  <AccordionContent className=\"text-slate-600 text-base space-y-2\">\n                    <p>\n                      We need to organize our known and unknown values. A table\n                      is perfect for this.\n                    </p>\n                    <div className=\"overflow-x-auto\">\n                      <table className=\"w-full text-left border-collapse\">\n                        <thead>\n                          <tr className=\"bg-slate-100\">\n                            <th className=\"p-2 border\">Substance</th>\n                            <th className=\"p-2 border\">Molar Mass (g/mol)</th>\n                            <th className=\"p-2 border\">Given Mass (g)</th>\n                            <th className=\"p-2 border\">Moles</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          <tr>\n                            <td className=\"p-2 border\">NaHCO₃</td>\n                            <td className=\"p-2 border\">84.01</td>\n                            <td className=\"p-2 border\">10.0</td>\n                            <td className=\"p-2 border\">?</td>\n                          </tr>\n                          <tr>\n                            <td className=\"p-2 border\">CH₃COOH</td>\n                            <td className=\"p-2 border\">60.05</td>\n                            <td className=\"p-2 border\">15.0</td>\n                            <td className=\"p-2 border\">?</td>\n                          </tr>\n                          <tr>\n                            <td className=\"p-2 border\">CO₂</td>\n                            <td className=\"p-2 border\">44.01</td>\n                            <td className=\"p-2 border\">?</td>\n                            <td className=\"p-2 border\">?</td>\n                          </tr>\n                        </tbody>\n                      </table>\n                    </div>\n                  </AccordionContent>\n                </AccordionItem>\n                <AccordionItem value=\"item-3\">\n                  <AccordionTrigger className=\"text-xl font-bold text-cyan-700\">\n                    P - Plan\n                  </AccordionTrigger>\n                  <AccordionContent className=\"text-slate-600 text-base space-y-2 list-decimal pl-5\">\n                    <li>\n                      Convert the mass of each reactant (NaHCO₃ and CH₃COOH)\n                      into moles using their molar masses.\n                    </li>\n                    <li>\n                      Compare the mole ratio of the reactants to the 1:1 ratio\n                      from the balanced equation to find the limiting reactant.\n                    </li>\n                    <li>\n                      Use the moles of the limiting reactant to calculate the\n                      moles of CO₂ that will be produced.\n                    </li>\n                    <li>\n                      Convert the moles of CO₂ into mass using its molar mass.\n                    </li>\n                  </AccordionContent>\n                </AccordionItem>\n                <AccordionItem value=\"item-4\">\n                  <AccordionTrigger className=\"text-xl font-bold text-cyan-700\">\n                    S - Solve\n                  </AccordionTrigger>\n                  <AccordionContent className=\"text-slate-600 text-base space-y-4\">\n                    <div>\n                      <h4 className=\"font-bold\">1. Calculate moles of reactants:</h4>\n                      <p className=\"font-mono bg-slate-100 p-2 rounded mt-1\">\n                        Moles NaHCO₃ = 10.0 g / 84.01 g/mol = 0.119 mol\n                      </p>\n                      <p className=\"font-mono bg-slate-100 p-2 rounded mt-1\">\n                        Moles CH₃COOH = 15.0 g / 60.05 g/mol = 0.250 mol\n                      </p>\n                    </div>\n                    <div>\n                      <h4 className=\"font-bold\">2. Find the limiting reactant:</h4>\n                      <p>\n                        The reaction needs a 1:1 ratio. We have 0.119 mol of\n                        NaHCO₃ and 0.250 mol of CH₃COOH. Since we have less\n                        NaHCO₃, it will run out first.\n                      </p>\n                      <p className=\"mt-2 p-3 bg-red-100 border border-red-200 rounded-lg text-red-800 font-semibold\">\n                        Therefore, NaHCO₃ is the limiting reactant.\n                      </p>\n                    </div>\n                    <div>\n                      <h4 className=\"font-bold\">3. Calculate moles of CO₂ produced:</h4>\n                      <p>\n                        The calculation must be based on the limiting reactant. The\n                        mole ratio of NaHCO₃ to CO₂ is 1:1.\n                      </p>\n                      <p className=\"font-mono bg-slate-100 p-2 rounded mt-1\">\n                        Moles CO₂ = 0.119 mol NaHCO₃ * (1 mol CO₂ / 1 mol NaHCO₃) =\n                        0.119 mol CO₂\n                      </p>\n                    </div>\n                    <div>\n                      <h4 className=\"font-bold\">4. Convert moles of CO₂ to mass:</h4>\n                      <p className=\"font-mono bg-slate-100 p-2 rounded mt-1\">\n                        Mass CO₂ = 0.119 mol * 44.01 g/mol = 5.24 g\n                      </p>\n                    </div>\n                    <div className=\"mt-4 p-4 bg-green-100 border border-green-200 rounded-lg text-center\">\n                      <h4 className=\"font-bold text-lg text-green-800\">Final Answer</h4>\n                      <p className=\"text-2xl font-bold text-green-700\">\n                        5.24 g of CO₂\n                      </p>\n                    </div>\n                  </AccordionContent>\n                </AccordionItem>\n              </Accordion>\n            </CardContent>\n          </Card>\n        </section>\n\n        {/* Section 5: Metacognitive Check */}\n        <section className=\"mb-12\">\n          <Card className=\"bg-white shadow-lg\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-3 text-2xl font-bold text-slate-700\">\n                <HelpCircle className=\"w-8 h-8 text-orange-500\" />\n                <span>Step 5: Check Your Understanding</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3 text-slate-600\">\n              <p>\n                Great scientists always check their work! Ask yourself these\n                questions:\n              </p>\n              <ul className=\"list-disc pl-5 space-y-2\">\n                <li>\n                  <strong>Does my answer make sense?</strong> The mass of the\n                  product (5.24 g) is less than the mass of either starting\n                  reactant, which is reasonable. It's also less than the total\n                  mass (10 g + 15 g = 25 g), which it must be (Law of\n                  Conservation of Mass).\n                </li>\n                <li>\n                  <strong>Did I use the correct limiting reactant?</strong> Yes,\n                  the calculation was based on NaHCO₃, which we identified as\n                  the reactant that would run out first.\n                </li>\n                <li>\n                  <strong>Are my units correct?</strong> I converted grams to\n                  moles, used the mole ratio, and then converted moles back to\n                  grams. The units canceled out correctly at each step.\n                </li>\n              </ul>\n            </CardContent>\n          </Card>\n        </section>\n\n        {/* Section 6: Practice & Transfer */}\n        <section>\n          <Card className=\"bg-white shadow-lg\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-3 text-2xl font-bold text-slate-700\">\n                <Target className=\"w-8 h-8 text-purple-600\" />\n                <span>Apply Your Skills: Transfer Problems</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <Accordion type=\"single\" collapsible className=\"w-full\">\n                <AccordionItem value=\"near-transfer\">\n                  <AccordionTrigger className=\"text-xl font-bold text-purple-700 no-underline hover:no-underline\">\n                    <div className=\"flex flex-col md:flex-row md:items-center text-left\">\n                      <span className=\"bg-purple-100 text-purple-800 text-sm font-medium mr-3 px-2.5 py-0.5 rounded-full mb-2 md:mb-0\">\n                        Near-Transfer Problem\n                      </span>\n                      <span>Synthesizing Ammonia</span>\n                    </div>\n                  </AccordionTrigger>\n                  <AccordionContent className=\"text-slate-600 text-base space-y-4 pt-4\">\n                    <p className=\"font-semibold\">\n                      In the synthesis of ammonia (NH₃), nitrogen gas (N₂)\n                      reacts with hydrogen gas (H₂). If you have 28.0 g of N₂\n                      and 9.0 g of H₂, what is the maximum mass of ammonia that\n                      can be produced?\n                    </p>\n                    <p className=\"font-mono bg-slate-100 p-2 rounded\">\n                      Balanced Equation: N₂ + 3H₂ → 2NH₃\n                    </p>\n                    <Accordion type=\"single\" collapsible>\n                      <AccordionItem value=\"near-solution\">\n                        <AccordionTrigger>\n                          <Button variant=\"outline\">Show Solution</Button>\n                        </AccordionTrigger>\n                        <AccordionContent className=\"space-y-3 pt-4\">\n                          <p>\n                            1. <strong>Moles N₂:</strong> 28.0g / 28.02 g/mol = 1.00 mol\n                          </p>\n                          <p>\n                            2. <strong>Moles H₂:</strong> 9.0g / 2.02 g/mol = 4.46 mol\n                          </p>\n                          <p>\n                            3. <strong>Limiting Reactant:</strong> The ratio is 1:3. For\n                            1.00 mol of N₂, you need 3.00 mol of H₂. You have 4.46 mol H₂, so you have enough. N₂ is the limiting reactant.\n                          </p>\n                          <p>\n                            4. <strong>Moles NH₃:</strong> 1.00 mol N₂ * (2 mol NH₃ / 1\n                            mol N₂) = 2.00 mol NH₃\n                          </p>\n                          <p>\n                            5. <strong>Mass NH₃:</strong> 2.00 mol * 17.03 g/mol = 34.06 g\n                          </p>\n                          <p className=\"font-bold text-purple-800\">\n                            Answer: 34.06 g of NH₃\n                          </p>\n                        </AccordionContent>\n                      </AccordionItem>\n                    </Accordion>\n                  </AccordionContent>\n                </AccordionItem>\n                <AccordionItem value=\"far-transfer\">\n                  <AccordionTrigger className=\"text-xl font-bold text-purple-700 no-underline hover:no-underline\">\n                    <div className=\"flex flex-col md:flex-row md:items-center text-left\">\n                      <span className=\"bg-teal-100 text-teal-800 text-sm font-medium mr-3 px-2.5 py-0.5 rounded-full mb-2 md:mb-0\">\n                        Far-Transfer Problem\n                      </span>\n                      <span>Baking Cookies</span>\n                    </div>\n                  </AccordionTrigger>\n                  <AccordionContent className=\"text-slate-600 text-base space-y-4 pt-4\">\n                    <p>\n                      <Cookie className=\"inline w-5 h-5 text-amber-700 mr-1\" />\n                      This problem looks different, but uses the same\n                      \"limiting reactant\" logic!\n                    </p>\n                    <p className=\"font-semibold\">\n                      A cookie recipe requires 2 cups of flour for every 1 cup\n                      of sugar to make 24 cookies. If you have 7 cups of flour\n                      and 4 cups of sugar, what is the maximum number of\n                      cookies you can bake?\n                    </p>\n                    <Accordion type=\"single\" collapsible>\n                      <AccordionItem value=\"far-solution\">\n                        <AccordionTrigger>\n                          <Button variant=\"outline\">Show Solution</Button>\n                        </AccordionTrigger>\n                        <AccordionContent className=\"space-y-3 pt-4\">\n                          <p>\n                            1. <strong>Check flour:</strong> 7 cups flour / 2\n                            cups/batch = 3.5 batches possible.\n                          </p>\n                          <p>\n                            2. <strong>Check sugar:</strong> 4 cups sugar / 1 cup/batch\n                            = 4 batches possible.\n                          </p>\n                          <p>\n                            3. <strong>Limiting \"Reactant\":</strong> You can only make\n                            3.5 batches before you run out of flour. Flour is the\n                            limiting ingredient.\n                          </p>\n                          <p>\n                            4. <strong>Max Cookies:</strong> 3.5 batches * 24\n                            cookies/batch = 84 cookies.\n                          </p>\n                          <p className=\"font-bold text-teal-800\">\n                            Answer: 84 cookies\n                          </p>\n                        </AccordionContent>\n                      </AccordionItem>\n                    </Accordion>\n                  </AccordionContent>\n                </AccordionItem>\n              </Accordion>\n            </CardContent>\n          </Card>\n        </section>\n      </main>\n    </div>\n  )\n}\n```\n```tsx file=\"app/layout.tsx\"\nimport type { Metadata } from 'next'\nimport { Inter } from 'next/font/google'\nimport './globals.css'\nimport { cn } from '@/lib/utils'\n\nconst inter = Inter({ subsets: ['latin'], variable: '--font-sans' })\n\nexport const metadata: Metadata = {\n  title: 'Chemistry Learning Page',\n  description: 'An interactive page to learn about limiting reactants.',\n}\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode\n}>) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body\n        className={cn(\n          'min-h-screen bg-background font-sans antialiased',\n          inter.variable\n        )}\n      >\n        {children}\n      </body>\n    </html>\n  )\n}\n```\n```css file=\"app/globals.css\"\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 84% 4.9%;\n\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 84% 4.9%;\n\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 84% 4.9%;\n\n    --primary: 222.2 47.4% 11.2%;\n    --primary-foreground: 210 40% 98%;\n\n    --secondary: 210 40% 96.1%;\n    --secondary-foreground: 222.2 47.4% 11.2%;\n\n    --muted: 210 40% 96.1%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n\n    --accent: 210 40% 96.1%;\n    --accent-foreground: 222.2 47.4% 11.2%;\n\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 210 40% 98%;\n\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: 222.2 84% 4.9%;\n\n    --radius: 0.5rem;\n  }\n\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n\n    --primary: 210 40% 98%;\n    --primary-foreground: 222.2 47.4% 11.2%;\n\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n\n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 212.7 26.8% 83.9%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n```\n```tsx file=\"components/ui/accordion.tsx\"\n'use client'\n\nimport * as React from 'react'\nimport * as AccordionPrimitive from '@radix-ui/react-accordion'\nimport { ChevronDown } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn('border-b', className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = 'AccordionItem'\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        'flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180',\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn('pb-4 pt-0', className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n```\n```tsx file=\"components/ui/card.tsx\"\nimport * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      'rounded-lg border bg-card text-card-foreground shadow-sm',\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = 'Card'\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn('flex flex-col space-y-1.5 p-6', className)}\n    {...props}\n  />\n))\nCardHeader.displayName = 'CardHeader'\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      'text-2xl font-semibold leading-none tracking-tight',\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = 'CardTitle'\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn('text-sm text-muted-foreground', className)}\n    {...props}\n  />\n))\nCardDescription.displayName = 'CardDescription'\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn('p-6 pt-0', className)} {...props} />\n))\nCardContent.displayName = 'CardContent'\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn('flex items-center p-6 pt-0', className)}\n    {...props}\n  />\n))\nCardFooter.displayName = 'CardFooter'\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n```\n```tsx file=\"components/ui/button.tsx\"\nimport * as React from 'react'\nimport { Slot } from '@radix-ui/react-slot'\nimport { cva, type VariantProps } from 'class-variance-authority'\n\nimport { cn } from '@/lib/utils'\n\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',\n  {\n    variants: {\n      variant: {\n        default: 'bg-primary text-primary-foreground hover:bg-primary/90',\n        destructive:\n          'bg-destructive text-destructive-foreground hover:bg-destructive/90',\n        outline:\n          'border border-input bg-background hover:bg-accent hover:text-accent-foreground',\n        secondary:\n          'bg-secondary text-secondary-foreground hover:bg-secondary/80',\n        ghost: 'hover:bg-accent hover:text-accent-foreground',\n        link: 'text-primary underline-offset-4 hover:underline',\n      },\n      size: {\n        default: 'h-10 px-4 py-2',\n        sm: 'h-9 rounded-md px-3',\n        lg: 'h-11 rounded-md px-8',\n        icon: 'h-10 w-10',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : 'button'\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = 'Button'\n\nexport { Button, buttonVariants }\n```\n```ts file=\"lib/utils.ts\"\nimport { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n```\n```ts file=\"tailwind.config.ts\"\nimport type { Config } from 'tailwindcss'\n\nconst config = {\n  darkMode: ['class'],\n  content: [\n    './pages/**/*.{ts,tsx}',\n    './components/**/*.{ts,tsx}',\n    './app/**/*.{ts,tsx}',\n    './src/**/*.{ts,tsx}',\n  ],\n  prefix: '',\n  theme: {\n    container: {\n      center: true,\n      padding: '2rem',\n      screens: {\n        '2xl': '1400px',\n      },\n    },\n    extend: {\n      fontFamily: {\n        sans: ['var(--font-sans)'],\n      },\n      keyframes: {\n        'accordion-down': {\n          from: { height: '0' },\n          to: { height: 'var(--radix-accordion-content-height)' },\n        },\n        'accordion-up': {\n          from: { height: 'var(--radix-accordion-content-height)' },\n          to: { height: '0' },\n        },\n      },\n      animation: {\n        'accordion-down': 'accordion-down 0.2s ease-out',\n        'accordion-up': 'accordion-up 0.2s ease-out',\n      },\n    },\n  },\n  plugins: [require('tailwindcss-animate')],\n} satisfies Config\n\nexport default config\n```\n```json file=\"package.json\"\n{\n  \"name\": \"chemistry-learning-webpage\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"next dev --turbo\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\"\n  },\n  \"dependencies\": {\n    \"@radix-ui/react-accordion\": \"^1.1.2\",\n    \"@radix-ui/react-slot\": \"^1.0.2\",\n    \"class-variance-authority\": \"^0.7.0\",\n    \"clsx\": \"^2.1.1\",\n    \"lucide-react\": \"^0.378.0\",\n    \"next\": \"14.2.3\",\n    \"react\": \"^18\",\n    \"react-dom\": \"^18\",\n    \"tailwind-merge\": \"^2.3.0\",\n    \"tailwindcss-animate\": \"^1.0.7\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^20\",\n    \"@types/react\": \"^18\",\n    \"@types/react-dom\": \"^18\",\n    \"eslint\": \"^8\",\n    \"eslint-config-next\": \"14.2.3\",\n    \"postcss\": \"^8\",\n    \"tailwindcss\": \"^3.4.1\",\n    \"typescript\": \"^5\"\n  }\n}\n```"
}