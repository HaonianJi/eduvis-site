{
  "content": "Of course. I will act as an instructional web designer to plan and generate a webpage for teaching a specific chemistry problem, focusing on building scientific modeling, reasoning, and transfer skills.\n\nFirst, here is the plan for the educational webpage.\n\n<Thinking>\n**1. Project Structure:**\n\nThe project will be a single-page Next.js application, organized for clarity and maintainability.\n\n-   `app/page.tsx`: The main page component, which will assemble the various sections of the lesson. It will be a Server Component.\n-   `app/layout.tsx`: The root layout file for HTML structure.\n-   `app/globals.css`: Tailwind CSS global styles and directives.\n-   `components/ui/`: This directory will hold the shadcn/ui components (`Accordion`, `Button`, `Card`, `Input`, `Separator`, `Tabs`).\n-   `components/lesson/`: This directory will contain custom components specifically designed for this chemistry lesson. All will be Client Components (`\"use client\"`) to handle interactivity.\n    -   `1-ContextScenario.tsx`: A component to introduce the problem with a simple visual. It will use CSS animations.\n    -   `2-CRAPhase.tsx`: A component that visually guides the student through the Concrete (animation), Representational (particle diagram), and Abstract (equation) stages.\n    -   `3-FOPSScaffolding.tsx`: An interactive component that breaks down the problem-solving process using the F.O.P.S. strategy. It will use state to manage student progress through the steps.\n    -   `4-MetacognitionChecklist.tsx`: A component with reflective questions and checklists to promote metacognitive skills.\n    -   `5-TransferProblems.tsx`: A component containing the near and far transfer problems, with input fields and a simple feedback mechanism.\n-   `lib/utils.ts`: The utility file for `cn` from shadcn/ui.\n-   `public/icons/`: A directory for SVG icons used in the lesson, such as a magnifying glass for \"Find\" or a checklist for \"Organize\".\n\n**2. Styling:**\n\n-   **Framework:** I will use Tailwind CSS for all styling, ensuring a responsive design that works on desktops, tablets, and mobile devices.\n-   **Component Library:** I will leverage shadcn/ui for pre-built, accessible components. This provides a consistent and clean look and feel.\n-   **Color Palette:** The design will feature a professional, academic color scheme using neutral grays, with a warm accent color like orange (`#F59E0B`) for interactive elements, highlights, and calls to action. This avoids the specified blue/indigo.\n-   **Typography:** I will use the default `Inter` sans-serif font for readability. Headings will be clearly distinguished by size and weight to create a strong visual hierarchy. Chemical formulas and code snippets will use a monospace font for clarity.\n\n**3. Images and Media:**\n\n-   The page will rely on simple, illustrative SVGs and CSS animations rather than realistic images to keep it lightweight and focused.\n-   **Context Scenario:** A simple CSS-animated volcano will provide the \"Concrete\" visual.\n-   **Representational View:** I will use styled `div` elements to represent molecules (NaHCO₃, CH₃COOH, etc.) to show the reaction at a particle level.\n-   **Icons:** I'll use SVG icons from the `lucide-react` library to visually support the F.O.P.S. steps, making them more intuitive.\n\n**4. Formatting:**\n\n-   The webpage will be a single, scrollable narrative, divided into logical sections using `Card` components.\n-   Chemical formulas like `H₂O` will use the `<sub>` HTML tag for correct subscript formatting.\n-   Key concepts will be highlighted using bold text or the accent color.\n-   The F.O.P.S. strategy will be presented in an `Accordion` component, allowing students to tackle one step at a time without feeling overwhelmed.\n-   The Near and Far Transfer problems will be organized within a `Tabs` component for easy navigation.\n\n**5. Frameworks and Libraries:**\n\n-   **Framework:** Next.js (App Router).\n-   **Styling:** Tailwind CSS.\n-   **UI Components:** shadcn/ui.\n-   **Interactivity:** React hooks (`useState`) will manage the state for all interactive elements within Client Components.\n-   **Icons:** `lucide-react` will be used for iconography.\n\n**6. Caveats and Implementation Details:**\n\n-   **Problem Definition:** I will create a specific stoichiometry problem based on the classic \"baking soda volcano\" experiment. This provides a familiar and engaging context.\n    -   **Problem:** *In a classic ‘baking soda volcano’ experiment, a student mixes 10.0 g of baking soda (sodium bicarbonate, NaHCO₃) with excess vinegar (acetic acid, CH₃COOH). The reaction produces sodium acetate (NaCH₃COO), water (H₂O), and carbon dioxide (CO₂) gas. How many grams of carbon dioxide gas are produced?*\n-   **Interactivity:** The interactive components will be designed to be simple and direct. For instance, the F.O.P.S. scaffolding will guide the user step-by-step, asking for inputs (like molar mass) and providing immediate, simple validation (e.g., checking if the input is a number).\n-   **State Management:** State will be managed locally within each interactive component. There is no need for complex global state management.\n-   **Accessibility:** I will follow accessibility best practices by using semantic HTML (`<main>`, `<section>`), associating `label`s with `input`s, ensuring keyboard navigability for interactive elements, and using `sr-only` for screen-reader-only text where appropriate.\n-   **Pedagogical Flow:** The final page layout will mirror the instructional plan precisely, guiding the learner from concrete context to abstract problem-solving and finally to transfer tasks.\n</Thinking>\n\nHere is the code for the educational webpage.\n\n### 1. Setup Your Project\n\nFirst, set up a new Next.js project with Tailwind CSS and TypeScript.\n\n```sh\nnpx create-next-app@latest . --typescript --eslint --tailwind --app --turbopack --yes\n```\n\nNext, install the shadcn/ui component library and the necessary icons.\n\n```sh\nnpx shadcn-ui@latest init\n# Follow the prompts. Choose 'Default' and 'New York'.\n\n# Install the components we'll use\nnpx shadcn-ui@latest add accordion button card input label separator tabs\nnpm install lucide-react\n```\n\n### 2. Create the Lesson Components\n\nCreate a new directory `components/lesson` and add the following files.\n\n```tsx file=\"components/lesson/1-ContextScenario.tsx\"\n\"use client\";\n\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Mountain } from \"lucide-react\";\n\n// Simple CSS for the volcano animation\nconst VolcanoStyles = () => (\n  <style jsx>{`\n    .volcano-container {\n      position: relative;\n      width: 150px;\n      height: 100px;\n      margin: 2rem auto;\n    }\n    .volcano-base {\n      position: absolute;\n      bottom: 0;\n      left: 50%;\n      transform: translateX(-50%);\n      width: 150px;\n      height: 100px;\n      background-color: #8b4513; /* Brown */\n      clip-path: polygon(20% 100%, 80% 100%, 100% 100%, 65% 0, 35% 0, 0 100%);\n    }\n    .eruption {\n      position: absolute;\n      bottom: 95px;\n      left: 50%;\n      transform: translateX(-50%);\n      width: 20px;\n      height: 60px;\n      background: linear-gradient(to top, #fef08a, #facc15, #fbbf24);\n      border-radius: 50% 50% 0 0;\n      animation: erupt 1.5s ease-out forwards;\n      opacity: 0;\n    }\n    .bubbles {\n      position: absolute;\n      bottom: 80px;\n      left: 50%;\n      transform: translateX(-50%);\n    }\n    .bubble {\n      position: absolute;\n      width: 8px;\n      height: 8px;\n      background-color: #e2e8f0;\n      border-radius: 50%;\n      animation: rise 1s ease-in-out infinite;\n      opacity: 0;\n    }\n    .bubble:nth-child(2) {\n      width: 5px;\n      height: 5px;\n      left: -10px;\n      animation-delay: 0.3s;\n      animation-duration: 1.2s;\n    }\n    .bubble:nth-child(3) {\n      width: 6px;\n      height: 6px;\n      left: 10px;\n      animation-delay: 0.5s;\n      animation-duration: 0.8s;\n    }\n    @keyframes erupt {\n      0% {\n        height: 0;\n        opacity: 1;\n      }\n      100% {\n        height: 60px;\n        opacity: 1;\n      }\n    }\n    @keyframes rise {\n      0% {\n        transform: translateY(0);\n        opacity: 1;\n      }\n      100% {\n        transform: translateY(-40px);\n        opacity: 0;\n      }\n    }\n  `}</style>\n);\n\nexport default function ContextScenario() {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Mountain className=\"text-orange-500\" />\n          The Problem: A Chemical Volcano\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <p className=\"mb-4\">\n          A student is performing the classic &quot;baking soda volcano&quot; experiment for a science fair. They want to predict exactly how much carbon dioxide gas will be produced to create the fizzing eruption.\n        </p>\n        <div className=\"rounded-lg border bg-slate-50 p-6 text-center\">\n          <p className=\"font-mono text-lg\">\n            If you mix <strong>10.0 g</strong> of baking soda (NaHCO\n            <sub>3</sub>) with excess vinegar, how many grams of carbon dioxide (CO<sub>2</sub>) are produced?\n          </p>\n        </div>\n        <VolcanoStyles />\n        <div className=\"volcano-container\">\n          <div className=\"volcano-base\" />\n          <div className=\"eruption\" />\n          <div className=\"bubbles\">\n            <div className=\"bubble\" />\n            <div className=\"bubble\" />\n            <div className=\"bubble\" />\n          </div>\n        </div>\n        <p className=\"text-center text-sm text-slate-600\">\n          This experiment is a great example of a chemical reaction where we can use stoichiometry to predict the outcome.\n        </p>\n      </CardContent>\n    </Card>\n  );\n}\n```\n\n```tsx file=\"components/lesson/2-CRAPhase.tsx\"\n\"use client\";\n\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Eye, Shapes, Sigma } from \"lucide-react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\nconst Particle = ({ label, colorClass }: { label: string, colorClass: string }) => (\n    <div className=\"flex flex-col items-center gap-1\">\n        <div className={`w-8 h-8 rounded-full ${colorClass} flex items-center justify-center text-white text-xs font-bold`}>\n            {label.split('')[0]}\n        </div>\n        <span className=\"text-xs font-mono\">{label}</span>\n    </div>\n);\n\nexport default function CRAPhase() {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>From Concrete to Abstract</CardTitle>\n        <CardDescription>\n          Let&apos;s understand the reaction at three levels, following the Concrete-Representational-Abstract (CRA) model.\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <Tabs defaultValue=\"concrete\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"concrete\"><Eye className=\"w-4 h-4 mr-2\" />Concrete</TabsTrigger>\n            <TabsTrigger value=\"representational\"><Shapes className=\"w-4 h-4 mr-2\" />Representational</TabsTrigger>\n            <TabsTrigger value=\"abstract\"><Sigma className=\"w-4 h-4 mr-2\" />Abstract</TabsTrigger>\n          </TabsList>\n          <TabsContent value=\"concrete\" className=\"mt-4 p-4 border rounded-md\">\n            <h3 className=\"font-semibold text-lg mb-2\">1. The Concrete (What we see)</h3>\n            <p>\n              When you mix baking soda (a white powder) and vinegar (a clear liquid), you see fizzing and bubbling. This is a physical observation of a gas being produced. The volcano erupts!\n            </p>\n          </TabsContent>\n          <TabsContent value=\"representational\" className=\"mt-4 p-4 border rounded-md\">\n            <h3 className=\"font-semibold text-lg mb-2\">2. The Representational (What the particles are doing)</h3>\n            <p className=\"mb-4\">\n              At the molecular level, sodium bicarbonate particles are reacting with acetic acid particles. They break apart and rearrange to form new particles: sodium acetate, water, and carbon dioxide.\n            </p>\n            <div className=\"flex justify-around items-center p-4 bg-slate-50 rounded-lg\">\n                <div className=\"flex gap-2 items-center\">\n                    <Particle label=\"NaHCO₃\" colorClass=\"bg-green-500\" />\n                    <span>+</span>\n                    <Particle label=\"CH₃COOH\" colorClass=\"bg-blue-500\" />\n                </div>\n                <div className=\"text-2xl font-bold text-slate-400\">→</div>\n                 <div className=\"flex gap-2 items-center\">\n                    <Particle label=\"NaCH₃COO\" colorClass=\"bg-purple-500\" />\n                    <span>+</span>\n                    <Particle label=\"H₂O\" colorClass=\"bg-sky-500\" />\n                     <span>+</span>\n                    <Particle label=\"CO₂\" colorClass=\"bg-slate-600\" />\n                </div>\n            </div>\n          </TabsContent>\n          <TabsContent value=\"abstract\" className=\"mt-4 p-4 border rounded-md\">\n            <h3 className=\"font-semibold text-lg mb-2\">3. The Abstract (The chemical equation)</h3>\n            <p>\n              Scientists use a symbolic language to represent this change. The balanced chemical equation provides the exact recipe for the reaction.\n            </p>\n            <div className=\"text-center font-mono text-xl p-4 mt-2 bg-slate-800 text-white rounded-md\">\n              NaHCO<sub>3</sub> + CH<sub>3</sub>COOH → NaCH<sub>3</sub>COO + H<sub>2</sub>O + CO<sub>2</sub>\n            </div>\n             <p className=\"text-sm mt-2 text-slate-600\">\n                This equation tells us that <strong>one mole</strong> of sodium bicarbonate reacts with <strong>one mole</strong> of acetic acid to produce <strong>one mole</strong> of carbon dioxide. This 1:1 ratio is the key!\n            </p>\n          </TabsContent>\n        </Tabs>\n      </CardContent>\n    </Card>\n  );\n}\n```\n\n```tsx file=\"components/lesson/3-FOPSScaffolding.tsx\"\n\"use client\";\n\nimport { useState } from \"react\";\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Lightbulb, ListOrdered, FileJson, CheckCircle2, AlertCircle } from \"lucide-react\";\n\ntype StepState = {\n    value: string;\n    isCorrect: boolean | null;\n    feedback: string;\n};\n\nexport default function FOPSScaffolding() {\n  const [step1Input, setStep1Input] = useState<StepState>({ value: \"\", isCorrect: null, feedback: \"\" });\n  const [step2Input, setStep2Input] = useState<StepState>({ value: \"\", isCorrect: null, feedback: \"\" });\n  const [step3Input, setStep3Input] = useState<StepState>({ value: \"\", isCorrect: null, feedback: \"\" });\n  const [finalAnswer, setFinalAnswer] = useState<StepState>({ value: \"\", isCorrect: null, feedback: \"\" });\n\n  const checkMolarMass = () => {\n    const correctMass = 84.01;\n    const userMass = parseFloat(step1Input.value);\n    if (Math.abs(userMass - correctMass) < 0.02) {\n      setStep1Input({ ...step1Input, isCorrect: true, feedback: \"Excellent! The molar mass of NaHCO₃ is about 84.01 g/mol.\" });\n    } else {\n      setStep1Input({ ...step1Input, isCorrect: false, feedback: \"Not quite. Check your periodic table. Na=22.99, H=1.01, C=12.01, O=16.00. Sum them up!\" });\n    }\n  };\n  \n  const checkMoles = () => {\n     if (step1Input.isCorrect) {\n        const correctMoles = 10.0 / 84.01;\n        const userMoles = parseFloat(step2Input.value);\n        if (Math.abs(userMoles - correctMoles) < 0.005) {\n            setStep2Input({ ...step2Input, isCorrect: true, feedback: \"Correct! That's the right number of moles for NaHCO₃.\" });\n        } else {\n            setStep2Input({ ...step2Input, isCorrect: false, feedback: \"Close, but re-check your calculation. Moles = mass / molar mass.\" });\n        }\n     } else {\n        setStep2Input({ ...step2Input, isCorrect: false, feedback: \"Please calculate the correct molar mass in Step 1 first.\" });\n     }\n  };\n\n  const checkFinalMass = () => {\n    if (step2Input.isCorrect) {\n        const correctMolesCO2 = 10.0 / 84.01;\n        const molarMassCO2 = 44.01;\n        const correctMass = correctMolesCO2 * molarMassCO2;\n        const userMass = parseFloat(finalAnswer.value);\n        if (Math.abs(userMass - correctMass) < 0.05) {\n            setFinalAnswer({ ...finalAnswer, isCorrect: true, feedback: `Perfect! Approximately ${correctMass.toFixed(2)} g of CO₂ is produced.` });\n        } else {\n            setFinalAnswer({ ...finalAnswer, isCorrect: false, feedback: \"Almost there! Remember, mass = moles × molar mass of CO₂ (44.01 g/mol).\" });\n        }\n    } else {\n        setFinalAnswer({ ...finalAnswer, isCorrect: false, feedback: \"Please complete the previous steps correctly before calculating the final mass.\" });\n    }\n  };\n\n  const FeedbackIcon = ({ isCorrect }: { isCorrect: boolean | null }) => {\n    if (isCorrect === true) return <CheckCircle2 className=\"text-green-500\" />;\n    if (isCorrect === false) return <AlertCircle className=\"text-red-500\" />;\n    return null;\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Let&apos;s Solve It: The F.O.P.S. Method</CardTitle>\n        <CardDescription>\n          We&apos;ll use the Find, Organize, Plan, Solve (F.O.P.S.) strategy to break down the problem.\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <Accordion type=\"single\" collapsible className=\"w-full\">\n          {/* FIND */}\n          <AccordionItem value=\"item-1\">\n            <AccordionTrigger className=\"text-lg font-semibold\">\n              <div className=\"flex items-center gap-3\">\n                <Lightbulb className=\"w-8 h-8 text-orange-500 bg-orange-100 p-1.5 rounded-full\" /> F: Find the Core Principle\n              </div>\n            </AccordionTrigger>\n            <AccordionContent className=\"pl-12 pt-2 border-l-2 border-orange-200\">\n              <p>The core principle is <strong>stoichiometry</strong>, which is the quantitative relationship between reactants and products in a chemical reaction. We are converting the mass of a reactant (NaHCO<sub>3</sub>) to the mass of a product (CO<sub>2</sub>).</p>\n            </AccordionContent>\n          </AccordionItem>\n          {/* ORGANIZE */}\n          <AccordionItem value=\"item-2\">\n            <AccordionTrigger className=\"text-lg font-semibold\">\n              <div className=\"flex items-center gap-3\">\n                <FileJson className=\"w-8 h-8 text-orange-500 bg-orange-100 p-1.5 rounded-full\" /> O: Organize the Information\n              </div>\n            </AccordionTrigger>\n            <AccordionContent className=\"pl-12 pt-2 border-l-2 border-orange-200\">\n              <ul className=\"list-disc pl-5 space-y-2\">\n                  <li><strong>Known:</strong> Mass of NaHCO<sub>3</sub> = 10.0 g</li>\n                  <li><strong>Unknown:</strong> Mass of CO<sub>2</sub> = ? g</li>\n                  <li><strong>Relationship:</strong> The mole ratio from the balanced equation is 1 mole NaHCO<sub>3</sub> : 1 mole CO<sub>2</sub>.</li>\n              </ul>\n            </AccordionContent>\n          </AccordionItem>\n          {/* PLAN */}\n          <AccordionItem value=\"item-3\">\n            <AccordionTrigger className=\"text-lg font-semibold\">\n              <div className=\"flex items-center gap-3\">\n                <ListOrdered className=\"w-8 h-8 text-orange-500 bg-orange-100 p-1.5 rounded-full\" /> P: Plan the Steps\n              </div>\n            </AccordionTrigger>\n            <AccordionContent className=\"pl-12 pt-2 border-l-2 border-orange-200\">\n              <p className=\"mb-2\">Our \"map\" to the solution is a \"grams-to-moles-to-moles-to-grams\" conversion:</p>\n              <div className=\"flex items-center justify-center space-x-2 font-mono text-sm my-4 text-center\">\n                  <span className=\"p-2 bg-green-100 rounded\">g NaHCO₃</span>\n                  <span>→</span>\n                  <span className=\"p-2 bg-yellow-100 rounded\">mol NaHCO₃</span>\n                   <span>→</span>\n                  <span className=\"p-2 bg-blue-100 rounded\">mol CO₂</span>\n                   <span>→</span>\n                  <span className=\"p-2 bg-purple-100 rounded\">g CO₂</span>\n              </div>\n            </AccordionContent>\n          </AccordionItem>\n          {/* SOLVE */}\n          <AccordionItem value=\"item-4\">\n            <AccordionTrigger className=\"text-lg font-semibold\">\n              <div className=\"flex items-center gap-3\">\n                <CheckCircle2 className=\"w-8 h-8 text-orange-500 bg-orange-100 p-1.5 rounded-full\" /> S: Solve Step-by-Step\n              </div>\n            </AccordionTrigger>\n            <AccordionContent className=\"pl-12 pt-2 border-l-2 border-orange-200 space-y-6\">\n                {/* Step 1 */}\n                <div>\n                    <Label htmlFor=\"molar-mass\" className=\"font-semibold\">Step 1: Convert grams of NaHCO₃ to moles. First, what is the molar mass of NaHCO₃ (in g/mol)?</Label>\n                    <div className=\"flex items-center gap-2 mt-2\">\n                        <Input id=\"molar-mass\" value={step1Input.value} onChange={(e) => setStep1Input({ ...step1Input, value: e.target.value })} placeholder=\"e.g., 84.01\" />\n                        <Button onClick={checkMolarMass}>Check</Button>\n                        <FeedbackIcon isCorrect={step1Input.isCorrect} />\n                    </div>\n                    {step1Input.feedback && <p className={`text-sm mt-1 ${step1Input.isCorrect ? 'text-green-600' : 'text-red-600'}`}>{step1Input.feedback}</p>}\n                </div>\n                {/* Step 2 */}\n                <div>\n                    <Label htmlFor=\"moles\" className=\"font-semibold\">Step 2: Now calculate the moles of NaHCO₃ (10.0 g / molar mass).</Label>\n                    <div className=\"flex items-center gap-2 mt-2\">\n                        <Input id=\"moles\" value={step2Input.value} onChange={(e) => setStep2Input({ ...step2Input, value: e.target.value })} placeholder=\"e.g., 0.119\" />\n                        <Button onClick={checkMoles}>Check</Button>\n                        <FeedbackIcon isCorrect={step2Input.isCorrect} />\n                    </div>\n                     {step2Input.feedback && <p className={`text-sm mt-1 ${step2Input.isCorrect ? 'text-green-600' : 'text-red-600'}`}>{step2Input.feedback}</p>}\n                </div>\n                {/* Step 3 */}\n                <p className=\"font-semibold\">Step 3: Use the mole ratio. Since the ratio is 1:1, the moles of CO₂ produced are equal to the moles of NaHCO₃ reacted. So, we have ~0.119 moles of CO₂.</p>\n                {/* Step 4 */}\n                <div>\n                    <Label htmlFor=\"final-mass\" className=\"font-semibold\">Step 4: Convert moles of CO₂ to grams. (moles × molar mass of CO₂).</Label>\n                    <div className=\"flex items-center gap-2 mt-2\">\n                        <Input id=\"final-mass\" value={finalAnswer.value} onChange={(e) => setFinalAnswer({ ...finalAnswer, value: e.target.value })} placeholder=\"e.g., 5.24\" />\n                        <Button onClick={checkFinalMass}>Check</Button>\n                        <FeedbackIcon isCorrect={finalAnswer.isCorrect} />\n                    </div>\n                    {finalAnswer.feedback && <p className={`text-sm mt-1 ${finalAnswer.isCorrect ? 'text-green-600' : 'text-red-600'}`}>{finalAnswer.feedback}</p>}\n                </div>\n            </AccordionContent>\n          </AccordionItem>\n        </Accordion>\n      </CardContent>\n    </Card>\n  );\n}\n```\n\n```tsx file=\"components/lesson/4-MetacognitionChecklist.tsx\"\n\"use client\";\n\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { BrainCircuit } from \"lucide-react\";\n\nconst checklistItems = [\n    { id: 'c1', text: 'Did I identify the knowns and unknowns?' },\n    { id: 'c2', text: 'Is the chemical equation balanced?' },\n    { id: 'c3', text: 'Did I use the correct molar masses?' },\n    { id: 'c4', text: 'Did I apply the correct mole ratio?' },\n    { id: 'c5', text: 'Are my units correct throughout the calculation?' },\n    { id: 'c6', text: 'Does my final answer seem reasonable?' },\n];\n\nexport default function MetacognitionChecklist() {\n  return (\n    <Card className=\"bg-slate-50\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n            <BrainCircuit className=\"text-slate-600\"/>\n            Metacognition Check: Think Like a Scientist\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <p className=\"mb-4\">Before moving on, ask yourself these questions to strengthen your scientific reasoning skills.</p>\n        <div className=\"space-y-2\">\n            {checklistItems.map(item => (\n                <div key={item.id} className=\"flex items-center gap-2\">\n                    <input type=\"checkbox\" id={item.id} className=\"h-4 w-4 rounded border-gray-300 text-orange-600 focus:ring-orange-500\" />\n                    <label htmlFor={item.id} className=\"text-sm\">{item.text}</label>\n                </div>\n            ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n```\n\n```tsx file=\"components/lesson/5-TransferProblems.tsx\"\n\"use client\";\n\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useState } from \"react\";\nimport { ArrowRightLeft, Thermometer } from \"lucide-react\";\n\nexport default function TransferProblems() {\n  const [nearAnswer, setNearAnswer] = useState('');\n  const [nearFeedback, setNearFeedback] = useState('');\n  const [farAnswer, setFarAnswer] = useState('');\n  const [farFeedback, setFarFeedback] = useState('');\n\n  const checkNearTransfer = () => {\n    const isCorrect = Math.abs(parseFloat(nearAnswer) - 30.0) < 0.1;\n    setNearFeedback(isCorrect ? \"Correct! You recognized the same 4:1 mass ratio.\" : \"Not quite. The mass ratio of product to reactant is 4:1. Try setting up a proportion.\");\n  };\n\n  const checkFarTransfer = () => {\n    // P1V1 = P2V2  => (2.0)(10.0) = (4.0)V2 => V2 = 5.0\n    const isCorrect = Math.abs(parseFloat(farAnswer) - 5.0) < 0.1;\n    setFarFeedback(isCorrect ? \"Exactly! You correctly applied the inverse relationship from Boyle's Law.\" : \"Think about the relationship. If pressure doubles, what happens to volume? It's an inverse relationship (P₁V₁ = P₂V₂).\");\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Test Your Skills: Transfer Problems</CardTitle>\n        <CardDescription>\n          Apply what you&apos;ve learned to new scenarios.\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <Tabs defaultValue=\"near\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"near\"><ArrowRightLeft className=\"w-4 h-4 mr-2\"/>Near Transfer</TabsTrigger>\n            <TabsTrigger value=\"far\"><Thermometer className=\"w-4 h-4 mr-2\"/>Far Transfer</TabsTrigger>\n          </TabsList>\n          <TabsContent value=\"near\" className=\"mt-4 p-4 border rounded-md\">\n            <h3 className=\"font-semibold text-lg mb-2\">Same Structure, Different Content</h3>\n            <p className=\"mb-4\">\n              A different reaction produces 12.0 g of a compound when 3.0 g of reactant A is used. The mass ratio between the product and reactant A is constant. How much product (in g) will form from 7.5 g of A?\n            </p>\n            <div className=\"flex items-center gap-2\">\n                <Label htmlFor=\"near-input\" className=\"sr-only\">Answer</Label>\n                <Input id=\"near-input\" value={nearAnswer} onChange={(e) => setNearAnswer(e.target.value)} placeholder=\"Your answer in g\" />\n                <Button onClick={checkNearTransfer}>Check</Button>\n            </div>\n            {nearFeedback && <p className={`text-sm mt-2 ${nearFeedback.includes('Correct') ? 'text-green-600' : 'text-red-600'}`}>{nearFeedback}</p>}\n          </TabsContent>\n          <TabsContent value=\"far\" className=\"mt-4 p-4 border rounded-md\">\n            <h3 className=\"font-semibold text-lg mb-2\">Different Surface, Same Core Logic</h3>\n            <p className=\"mb-4\">\n              A gas occupies 10.0 L at 2.0 atm of pressure. What was its original volume (in L) if it started at a pressure of 4.0 atm? (Assume temperature and amount of gas are constant).\n            </p>\n             <div className=\"flex items-center gap-2\">\n                <Label htmlFor=\"far-input\" className=\"sr-only\">Answer</Label>\n                <Input id=\"far-input\" value={farAnswer} onChange={(e) => setFarAnswer(e.target.value)} placeholder=\"Your answer in L\" />\n                <Button onClick={checkFarTransfer}>Check</Button>\n            </div>\n            {farFeedback && <p className={`text-sm mt-2 ${farFeedback.includes('Exactly') ? 'text-green-600' : 'text-red-600'}`}>{farFeedback}</p>}\n          </TabsContent>\n        </Tabs>\n      </CardContent>\n    </Card>\n  );\n}\n```\n\n### 3. Assemble the Page\n\nNow, replace the content of `app/page.tsx` with the following code to assemble all the lesson components into a complete webpage.\n\n```tsx file=\"app/page.tsx\"\nimport ContextScenario from \"@/components/lesson/1-ContextScenario\";\nimport CRAPhase from \"@/components/lesson/2-CRAPhase\";\nimport FOPSScaffolding from \"@/components/lesson/3-FOPSScaffolding\";\nimport MetacognitionChecklist from \"@/components/lesson/4-MetacognitionChecklist\";\nimport TransferProblems from \"@/components/lesson/5-TransferProblems\";\nimport { Separator } from \"@/components/ui/separator\";\n\nexport default function ChemistryLessonPage() {\n  return (\n    <main className=\"bg-slate-100 min-h-screen p-4 sm:p-6 md:p-8\">\n      <div className=\"max-w-4xl mx-auto space-y-8\">\n        <header className=\"text-center\">\n          <h1 className=\"text-4xl font-bold tracking-tight text-slate-900\">\n            Mastering Stoichiometry\n          </h1>\n          <p className=\"mt-2 text-lg text-slate-600\">\n            An Interactive Guide to Solving Chemistry Problems\n          </p>\n        </header>\n        \n        <Separator />\n\n        {/* Section 1: The Problem Context */}\n        <ContextScenario />\n\n        {/* Section 2: CRA Model */}\n        <CRAPhase />\n        \n        {/* Section 3: FOPS Guided Solution */}\n        <FOPSScaffolding />\n\n        {/* Section 4: Metacognition */}\n        <MetacognitionChecklist />\n\n        {/* Section 5: Transfer Problems */}\n        <TransferProblems />\n\n        <footer className=\"text-center text-sm text-slate-500 py-4\">\n          <p>Built with v0 - Vercel&apos;s AI</p>\n        </footer>\n      </div>\n    </main>\n  );\n}\n```\n\n### 4. Final Styling Touches\n\nUpdate `app/globals.css` to ensure a clean background color.\n\n```css file=\"app/globals.css\"\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 84% 4.9%;\n\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 84% 4.9%;\n\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 84% 4.9%;\n\n    --primary: 222.2 47.4% 11.2%;\n    --primary-foreground: 210 40% 98%;\n\n    --secondary: 210 40% 96.1%;\n    --secondary-foreground: 222.2 47.4% 11.2%;\n\n    --muted: 210 40% 96.1%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n\n    --accent: 210 40% 96.1%;\n    --accent-foreground: 222.2 47.4% 11.2%;\n\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 210 40% 98%;\n\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: 222.2 84% 4.9%;\n\n    --radius: 0.5rem;\n  }\n\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n\n    --primary: 210 40% 98%;\n    --primary-foreground: 222.2 47.4% 11.2%;\n\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n\n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 215 20.2% 65.1%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n```\n\nNow, run your development server to see the completed educational webpage.\n\n```sh\nnpm run dev\n```"
}