{
  "content": "<Thinking>\nI will now begin to plan the project.\n\n### 1. Project Structure\n\nI'll create a standard Next.js App Router project. The entire lesson will be on the main page, `app/page.tsx`. I'll break down the page into smaller, manageable components to keep the code clean and organized.\n\n-   `app/layout.tsx`: Root layout for fonts and metadata.\n-   `app/page.tsx`: The main server component that assembles the educational webpage.\n-   `components/ui/`: This is where the shadcn/ui components will live after initialization (e.g., `accordion.tsx`, `button.tsx`, `card.tsx`, `slider.tsx`, `input.tsx`, `checkbox.tsx`, `label.tsx`).\n-   `components/lesson/`: I'll create a dedicated folder for the lesson-specific components.\n    -   `Introduction.tsx`: The first section that sets the context with a real-world scenario.\n    -   `ConcreteToAbstract.tsx`: The section explaining the CRA model with visual aids.\n    -   `FopsStrategy.tsx`: The accordion component for the F.O.P.S. problem-solving steps.\n    -   `InteractiveLab.tsx`: The interactive client component with a slider to explore the chemical ratio.\n    -   `MetacognitionChecklist.tsx`: The component with self-check questions for students.\n    -   `TransferProblems.tsx`: The final section containing the near and far transfer quiz cards.\n    -   `QuizCard.tsx`: A reusable client component for the transfer problems with a show/hide answer feature.\n    -   `icons.tsx`: A file to hold simple SVG icon components for beakers, molecules, etc., to keep JSX clean.\n-   `lib/utils.ts`: For the `cn` utility function from shadcn/ui.\n-   `public/`: This directory is not strictly needed as I will use inline SVGs for simplicity, but in a real project, it would hold images and other static assets.\n\n### 2. Styling and Frameworks\n\n-   **Framework**: Next.js with App Router.\n-   **Styling**: Tailwind CSS.\n-   **UI Components**: I'll use `shadcn/ui` for pre-built, accessible components like `Card`, `Accordion`, `Button`, `Slider`, `Input`, and `Checkbox`. This ensures a professional and consistent look while accelerating development. I will choose a modern, clean aesthetic with a simple color palette (e.g., slate gray, a touch of green for accents) to create a focused learning environment. All components will be designed to be responsive.\n\n### 3. Content and Pedagogical Flow\n\nThe webpage will be a single, scrollable page divided into clear sections, guiding the learner progressively.\n\n1.  **Introduction**: Start with a relatable analogy (baking) and then transition to the core chemistry problem in a lab context. Use a simple illustration of a scientist to make it engaging.\n2.  **CRA Section**:\n    *   **Concrete**: Use SVG icons of beakers to visually represent the 3.0g of reactant yielding 12.0g of product.\n    *   **Representational**: Show a particle-level diagram with simple shapes (circles) to illustrate molecules combining in a fixed ratio.\n    *   **Abstract**: Present the final symbolic representation: the mass ratio equation (`12.0g / 3.0g = 4/1`).\n3.  **F.O.P.S. Scaffolding**: Use an `Accordion` component. Each letter (F, O, P, S) will be an accordion item, revealing a detailed explanation of that step applied to the core problem. This breaks down the problem-solving process into manageable chunks.\n4.  **Interactive Lab**: This will be the centerpiece of the hands-on learning. It will be a `\"use client\"` component. A slider and an input field will allow students to change the amount of \"Reactant A\". The corresponding amount of \"Product\" will update instantly, both numerically and visually (e.g., the fill level in an SVG beaker). This provides immediate feedback and helps internalize the concept of proportionality.\n5.  **Metacognition**: A simple checklist using `Checkbox` components from shadcn/ui. This encourages students to reflect on their learning process, a key skill for scientific thinking.\n6.  **Transfer Problems**: Two `Card` components, one for the \"Near Transfer\" problem and one for the \"Far Transfer\" problem. Each card will contain the problem statement and a \"Show Answer\" button that toggles the visibility of the solution. This will be handled by a client component (`QuizCard.tsx`).\n\n### 4. Code Implementation Strategy\n\n-   I will start by setting up the project and initializing shadcn/ui.\n-   Next, I'll create the SVG icons in `components/lesson/icons.tsx`.\n-   I'll then build each component one by one, starting with the static ones (`Introduction`, `ConcreteToAbstract`, `FopsStrategy`) and then the interactive client components (`InteractiveLab`, `QuizCard`, `MetacognitionChecklist`).\n-   Finally, I'll assemble everything in `app/page.tsx`, ensuring proper layout, spacing, and flow. I'll add comments where necessary to explain the purpose of different parts of the code.\n-   I will ensure all components are responsive by using Tailwind's responsive design prefixes (e.g., `md:`, `lg:`).\n-   Accessibility will be a priority, using semantic HTML, ARIA attributes, and ensuring keyboard navigability, which `shadcn/ui` helps with out-of-the-box.\n\nThis plan provides a comprehensive roadmap to generate a high-quality, instructionally-rich webpage that meets all the user's requirements.\n\n</Thinking>\nI have completed the planning phase. I will now generate the code for your educational webpage.\n\nThis project uses Next.js with the App Router, Tailwind CSS, and shadcn/ui for components.\n\nFirst, set up your project with the following commands:\n\n```bash\nnpx create-next-app@latest . --typescript --tailwind --eslint --app\nnpx shadcn-ui@latest init\n```\n\nWhen prompted by `shadcn-ui`, accept the defaults. Then, add the necessary components:\n\n```bash\nnpx shadcn-ui@latest add card accordion button slider input label checkbox\n```\n\nNow, you can create the files below.\n\n```tsx file=\"app/layout.tsx\"\nimport type { Metadata } from 'next'\nimport { Inter } from 'next/font/google'\nimport './globals.css'\n\nconst inter = Inter({ subsets: ['latin'] })\n\nexport const metadata: Metadata = {\n  title: 'Chemistry Modeling Lab',\n  description: 'An interactive lesson on scientific modeling and proportional reasoning in chemistry.',\n}\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\" className=\"scroll-smooth\">\n      <body className={`${inter.className} bg-slate-50 text-slate-900`}>\n        {children}\n      </body>\n    </html>\n  )\n}\n```\n\n```tsx file=\"app/page.tsx\"\nimport { Introduction } from '@/components/lesson/Introduction'\nimport { ConcreteToAbstract } from '@/components/lesson/ConcreteToAbstract'\nimport { FopsStrategy } from '@/components/lesson/FopsStrategy'\nimport { InteractiveLab } from '@/components/lesson/InteractiveLab'\nimport { MetacognitionChecklist } from '@/components/lesson/MetacognitionChecklist'\nimport { TransferProblems } from '@/components/lesson/TransferProblems'\nimport { FlaskConical } from '@/components/lesson/icons'\n\nexport default function Home() {\n  return (\n    <main className=\"flex min-h-screen flex-col items-center justify-start p-4 sm:p-8 md:p-12\">\n      <div className=\"w-full max-w-4xl\">\n        <header className=\"mb-12 text-center\">\n          <div className=\"inline-flex items-center gap-4\">\n            <FlaskConical className=\"h-12 w-12 text-green-500\" />\n            <h1 className=\"text-4xl font-bold tracking-tight text-slate-800 sm:text-5xl\">\n              The Chemist's Toolkit\n            </h1>\n          </div>\n          <p className=\"mt-4 text-lg text-slate-600\">\n            Mastering Ratios for Scientific Discovery\n          </p>\n        </header>\n\n        <div className=\"space-y-16\">\n          <Introduction />\n          <ConcreteToAbstract />\n          <FopsStrategy />\n          <InteractiveLab />\n          <MetacognitionChecklist />\n          <TransferProblems />\n        </div>\n\n        <footer className=\"mt-20 border-t pt-8 text-center text-slate-500\">\n          <p>&copy; {new Date().getFullYear()} Vercel Learning Labs. All rights reserved.</p>\n        </footer>\n      </div>\n    </main>\n  )\n}\n```\n\n```tsx file=\"components/lesson/Introduction.tsx\"\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { LabCoatIcon } from './icons'\n\nexport function Introduction() {\n  return (\n    <section id=\"introduction\" className=\"scroll-mt-20\">\n      <Card className=\"bg-white shadow-md\">\n        <CardHeader>\n          <CardTitle className=\"text-2xl font-semibold text-slate-700\">1. Setting the Scene: From Kitchen to Lab</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6 text-base text-slate-600\">\n          <p>\n            Think about baking cookies. If a recipe for 12 cookies needs 1 cup of flour, how much flour do you need for 36 cookies? You intuitively know to triple the flour. You just used proportional reasoning!\n          </p>\n          <p>\n            Chemical reactions are like recipes. The 'ingredients' (reactants) combine in fixed ratios to create a 'dish' (product). Understanding these ratios is key to a chemist's work.\n          </p>\n          <div className=\"flex flex-col items-center gap-6 rounded-lg border border-green-200 bg-green-50/50 p-6 md:flex-row\">\n            <LabCoatIcon className=\"h-24 w-24 flex-shrink-0 text-green-500\" />\n            <div>\n              <h3 className=\"mb-2 text-lg font-semibold text-slate-800\">Your Chemistry Challenge:</h3>\n              <p className=\"text-slate-700\">\n                You're a chemist synthesizing a new medicine. In a small-scale experiment, you find that{' '}\n                <strong className=\"font-semibold text-green-700\">3.0 grams of Reactant A</strong> produces exactly{' '}\n                <strong className=\"font-semibold text-green-700\">12.0 grams of the medicine (Product)</strong>.\n                Today, you need to scale up. How much medicine can you make with{' '}\n                <strong className=\"font-semibold text-slate-800\">7.5 grams of Reactant A</strong>?\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </section>\n  )\n}\n```\n\n```tsx file=\"components/lesson/ConcreteToAbstract.tsx\"\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { BeakerIcon, MoleculeIcon, ShapesIcon, SigmaIcon } from './icons'\n\nexport function ConcreteToAbstract() {\n  return (\n    <section id=\"cra\" className=\"scroll-mt-20\">\n      <Card className=\"bg-white shadow-md\">\n        <CardHeader>\n          <CardTitle className=\"text-2xl font-semibold text-slate-700\">2. Visualizing the Problem (C-R-A)</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-8\">\n          <div className=\"grid grid-cols-1 gap-8 md:grid-cols-3\">\n            {/* Concrete */}\n            <div className=\"flex flex-col items-center space-y-3 rounded-lg border p-4\">\n              <div className=\"flex h-12 w-12 items-center justify-center rounded-full bg-blue-100\">\n                <BeakerIcon className=\"h-7 w-7 text-blue-600\" />\n              </div>\n              <h4 className=\"font-semibold text-slate-800\">Concrete: The Lab Bench</h4>\n              <p className=\"text-center text-sm text-slate-600\">\n                We observe that a certain amount of Reactant A results in a larger amount of Product.\n              </p>\n              <div className=\"flex w-full items-end justify-center gap-4 pt-2\">\n                <div className=\"text-center\">\n                  <BeakerIcon className=\"h-16 w-16 text-blue-500\" fillLevel={30} />\n                  <span className=\"text-xs font-medium\">3.0g A</span>\n                </div>\n                <p className=\"text-2xl font-bold text-slate-400\">→</p>\n                <div className=\"text-center\">\n                  <BeakerIcon className=\"h-24 w-24 text-green-500\" fillLevel={60} />\n                  <span className=\"text-xs font-medium\">12.0g Product</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Representational */}\n            <div className=\"flex flex-col items-center space-y-3 rounded-lg border p-4\">\n              <div className=\"flex h-12 w-12 items-center justify-center rounded-full bg-purple-100\">\n                <ShapesIcon className=\"h-7 w-7 text-purple-600\" />\n              </div>\n              <h4 className=\"font-semibold text-slate-800\">Representational: Particles</h4>\n              <p className=\"text-center text-sm text-slate-600\">\n                At the molecular level, particles of reactants combine in a fixed ratio to form product particles.\n              </p>\n              <div className=\"flex w-full items-center justify-center gap-2 pt-2\">\n                <MoleculeIcon className=\"h-8 w-8 text-blue-500\" />\n                <p className=\"text-xl font-bold text-slate-400\">+</p>\n                <p className=\"text-slate-400\">(Other Reactants)</p>\n                <p className=\"text-2xl font-bold text-slate-400\">→</p>\n                <div className=\"flex\">\n                  <MoleculeIcon className=\"h-8 w-8 text-green-500\" />\n                  <MoleculeIcon className=\"h-8 w-8 text-green-500\" />\n                  <MoleculeIcon className=\"h-8 w-8 text-green-500\" />\n                  <MoleculeIcon className=\"h-8 w-8 text-green-500\" />\n                </div>\n              </div>\n               <p className=\"text-center text-xs text-slate-500 pt-4\">(Illustration shows for every 1 particle of A, we get 4 particles of product by mass)</p>\n            </div>\n\n            {/* Abstract */}\n            <div className=\"flex flex-col items-center space-y-3 rounded-lg border p-4\">\n              <div className=\"flex h-12 w-12 items-center justify-center rounded-full bg-amber-100\">\n                <SigmaIcon className=\"h-7 w-7 text-amber-600\" />\n              </div>\n              <h4 className=\"font-semibold text-slate-800\">Abstract: The Math</h4>\n              <p className=\"text-center text-sm text-slate-600\">\n                We express this relationship using a symbolic mass ratio, the \"recipe\" for our reaction.\n              </p>\n              <div className=\"flex h-full flex-col items-center justify-center pt-2\">\n                <div className=\"text-center font-mono text-lg text-slate-800\">\n                  <div className=\"border-b border-slate-400 pb-1\">Mass of Product</div>\n                  <div>Mass of Reactant A</div>\n                </div>\n                <div className=\"my-2 font-mono text-lg text-slate-800\">\n                  =\n                  <span className=\"ml-2 rounded bg-amber-100 px-2 py-1 font-bold text-amber-800\">4 : 1</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </section>\n  )\n}\n```\n\n```tsx file=\"components/lesson/FopsStrategy.tsx\"\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from '@/components/ui/accordion'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\n\nexport function FopsStrategy() {\n  return (\n    <section id=\"fops\" className=\"scroll-mt-20\">\n      <Card className=\"bg-white shadow-md\">\n        <CardHeader>\n          <CardTitle className=\"text-2xl font-semibold text-slate-700\">3. A Strategy for Success: F.O.P.S.</CardTitle>\n          <p className=\"pt-2 text-base text-slate-600\">Use this structured approach to break down any chemistry problem.</p>\n        </CardHeader>\n        <CardContent>\n          <Accordion type=\"single\" collapsible className=\"w-full\">\n            <AccordionItem value=\"item-1\">\n              <AccordionTrigger className=\"text-lg font-medium\">\n                <span className=\"mr-3 flex h-8 w-8 items-center justify-center rounded-full bg-red-100 font-bold text-red-700\">F</span> Find the core principle\n              </AccordionTrigger>\n              <AccordionContent className=\"text-base text-slate-600\">\n                The core chemical principle here is the <strong className=\"font-semibold\">Law of Definite Proportions</strong>. This law states that a chemical compound always contains its component elements in fixed ratios by mass, regardless of its source or method of preparation. Our 4:1 mass ratio is constant for this reaction.\n              </AccordionContent>\n            </AccordionItem>\n            <AccordionItem value=\"item-2\">\n              <AccordionTrigger className=\"text-lg font-medium\">\n                <span className=\"mr-3 flex h-8 w-8 items-center justify-center rounded-full bg-orange-100 font-bold text-orange-700\">O</span> Organize information\n              </AccordionTrigger>\n              <AccordionContent className=\"text-base text-slate-600\">\n                Let's list what we know and what we need to find.\n                <ul className=\"mt-2 list-disc space-y-2 pl-6\">\n                  <li><strong>Knowns:</strong>\n                    <ul className=\"mt-1 list-inside list-[circle] space-y-1\">\n                      <li>Initial Reactant A: 3.0 g</li>\n                      <li>Initial Product: 12.0 g</li>\n                      <li>Mass Ratio (Product to A): 12.0g / 3.0g = 4/1</li>\n                      <li>New amount of Reactant A: 7.5 g</li>\n                    </ul>\n                  </li>\n                  <li><strong>Unknown:</strong>\n                    <ul className=\"mt-1 list-inside list-[circle]\">\n                      <li>New amount of Product (let's call it 'x')</li>\n                    </ul>\n                  </li>\n                </ul>\n              </AccordionContent>\n            </AccordionItem>\n            <AccordionItem value=\"item-3\">\n              <AccordionTrigger className=\"text-lg font-medium\">\n                <span className=\"mr-3 flex h-8 w-8 items-center justify-center rounded-full bg-yellow-100 font-bold text-yellow-700\">P</span> Plan your approach\n              </AccordionTrigger>\n              <AccordionContent className=\"text-base text-slate-600\">\n                Since the mass ratio is constant, we can set up a proportion to solve for the unknown product mass. The ratio from our first experiment will equal the ratio in our scaled-up experiment.\n                <div className=\"mt-4 flex items-center justify-center rounded-md bg-slate-50 p-4 font-mono text-sm md:text-base\">\n                  <div>\n                    <div className=\"border-b border-slate-400 pb-1 text-center\">Initial Product</div>\n                    <div className=\"pt-1 text-center\">Initial Reactant A</div>\n                  </div>\n                  <div className=\"mx-4 text-xl\">=</div>\n                  <div>\n                    <div className=\"border-b border-slate-400 pb-1 text-center\">New Product (x)</div>\n                    <div className=\"pt-1 text-center\">New Reactant A</div>\n                  </div>\n                </div>\n              </AccordionContent>\n            </AccordionItem>\n            <AccordionItem value=\"item-4\">\n              <AccordionTrigger className=\"text-lg font-medium\">\n                <span className=\"mr-3 flex h-8 w-8 items-center justify-center rounded-full bg-green-100 font-bold text-green-700\">S</span> Solve and check\n              </AccordionTrigger>\n              <AccordionContent className=\"space-y-4 text-base text-slate-600\">\n                <p>Now, we plug in the numbers and solve for 'x'.</p>\n                <div className=\"rounded-md bg-slate-50 p-4 font-mono text-sm md:text-base\">\n                  <p>12.0 g / 3.0 g = x / 7.5 g</p>\n                  <p>4 = x / 7.5 g</p>\n                  <p>x = 4 * 7.5 g</p>\n                  <p>x = 30.0 g</p>\n                </div>\n                <p>\n                  <strong className=\"font-semibold text-green-700\">Answer:</strong> You can produce 30.0 grams of the medicine.\n                </p>\n                <p>\n                  <strong className=\"font-semibold\">Check:</strong> Does this make sense? 7.5g is 2.5 times more reactant than 3.0g. So, we should get 2.5 times more product: 12.0g * 2.5 = 30.0g. The answer is reasonable!\n                </p>\n              </AccordionContent>\n            </AccordionItem>\n          </Accordion>\n        </CardContent>\n      </Card>\n    </section>\n  )\n}\n```\n\n```tsx file=\"components/lesson/InteractiveLab.tsx\"\n'use client'\n\nimport { useState } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Slider } from '@/components/ui/slider'\nimport { Input } from '@/components/ui/input'\nimport { BeakerIcon } from './icons'\nimport { Label } from '@/components/ui/label'\n\nexport function InteractiveLab() {\n  const [reactantAmount, setReactantAmount] = useState(7.5)\n  const productAmount = reactantAmount * 4\n  const maxReactant = 20\n\n  const handleSliderChange = (value: number[]) => {\n    setReactantAmount(value[0])\n  }\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const value = parseFloat(event.target.value)\n    if (!isNaN(value) && value >= 0 && value <= maxReactant) {\n      setReactantAmount(value)\n    } else if (event.target.value === '') {\n      setReactantAmount(0)\n    }\n  }\n\n  return (\n    <section id=\"interactive\" className=\"scroll-mt-20\">\n      <Card className=\"bg-white shadow-md\">\n        <CardHeader>\n          <CardTitle className=\"text-2xl font-semibold text-slate-700\">4. Experiment in the Virtual Lab</CardTitle>\n          <p className=\"pt-2 text-base text-slate-600\">\n            Adjust the amount of Reactant A to see how it affects the amount of Product formed. The mass ratio remains constant at 4:1.\n          </p>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 gap-8 md:grid-cols-2\">\n            {/* Controls */}\n            <div className=\"space-y-6\">\n              <div>\n                <Label htmlFor=\"reactant-input\" className=\"text-base font-medium text-slate-700\">Reactant A (grams)</Label>\n                <div className=\"mt-2 flex items-center gap-4\">\n                  <Input\n                    id=\"reactant-input\"\n                    type=\"number\"\n                    value={reactantAmount}\n                    onChange={handleInputChange}\n                    min=\"0\"\n                    max={maxReactant}\n                    step=\"0.1\"\n                    className=\"w-28 text-lg\"\n                  />\n                  <Slider\n                    value={[reactantAmount]}\n                    onValueChange={handleSliderChange}\n                    max={maxReactant}\n                    step={0.1}\n                  />\n                </div>\n              </div>\n              <div className=\"rounded-lg bg-green-50 p-4 text-center\">\n                 <Label className=\"text-base font-medium text-slate-700\">Predicted Product (grams)</Label>\n                <p className=\"text-4xl font-bold text-green-600\">{productAmount.toFixed(1)}</p>\n              </div>\n            </div>\n\n            {/* Visualization */}\n            <div className=\"flex items-end justify-center gap-6 rounded-lg border bg-slate-50/50 p-4\">\n              <div className=\"text-center\">\n                <BeakerIcon className=\"h-24 w-24 text-blue-500 transition-all\" fillLevel={reactantAmount / maxReactant * 100} />\n                <span className=\"text-sm font-semibold\">{reactantAmount.toFixed(1)}g A</span>\n              </div>\n              <p className=\"pb-8 text-4xl font-bold text-slate-400\">→</p>\n              <div className=\"text-center\">\n                <BeakerIcon className=\"h-32 w-32 text-green-500 transition-all\" fillLevel={productAmount / (maxReactant * 4) * 100} />\n                <span className=\"text-sm font-semibold\">{productAmount.toFixed(1)}g Product</span>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </section>\n  )\n}\n```\n\n```tsx file=\"components/lesson/MetacognitionChecklist.tsx\"\n'use client'\n\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Checkbox } from '@/components/ui/checkbox'\nimport { Label } from '@/components/ui/label'\n\nconst checklistItems = [\n  { id: 'c1', label: 'Do I understand the goal of the question?' },\n  { id: 'c2', label: 'What is the key principle or law at play here?' },\n  { id: 'c3', label: 'Have I organized my known and unknown values clearly?' },\n  { id: 'c4', label: 'Does my final answer seem reasonable in this context?' },\n  { id: 'c5', label: 'How would I check my work for potential errors?' },\n]\n\nexport function MetacognitionChecklist() {\n  return (\n    <section id=\"metacognition\" className=\"scroll-mt-20\">\n      <Card className=\"bg-white shadow-md\">\n        <CardHeader>\n          <CardTitle className=\"text-2xl font-semibold text-slate-700\">5. Think Like a Scientist</CardTitle>\n          <p className=\"pt-2 text-base text-slate-600\">\n            Great scientists constantly reflect on their thinking process. Use this checklist to build your metacognitive skills.\n          </p>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {checklistItems.map((item) => (\n              <div key={item.id} className=\"flex items-center space-x-3\">\n                <Checkbox id={item.id} />\n                <Label htmlFor={item.id} className=\"text-base font-normal text-slate-700\">\n                  {item.label}\n                </Label>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </section>\n  )\n}\n```\n\n```tsx file=\"components/lesson/TransferProblems.tsx\"\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { QuizCard } from './QuizCard'\n\nexport function TransferProblems() {\n  return (\n    <section id=\"transfer\" className=\"scroll-mt-20\">\n      <Card className=\"bg-white shadow-md\">\n        <CardHeader>\n          <CardTitle className=\"text-2xl font-semibold text-slate-700\">6. Transfer Your Knowledge</CardTitle>\n          <p className=\"pt-2 text-base text-slate-600\">\n            True mastery means applying a concept in new situations. Test your skills with these transfer problems.\n          </p>\n        </CardHeader>\n        <CardContent className=\"space-y-8\">\n          <QuizCard\n            type=\"Near Transfer\"\n            typeColor=\"bg-sky-100 text-sky-800\"\n            question=\"In the synthesis of ammonia (NH₃), it's found that 28.0 g of nitrogen (N₂) produces 34.0 g of ammonia. What mass of nitrogen is required to produce 170.0 g of ammonia?\"\n            answer=\"The ratio of Nitrogen to Ammonia is 28.0g / 34.0g. We want to find 'x' grams of Nitrogen for 170.0g of Ammonia. Set up the proportion: (28/34) = (x/170). Solving for x gives x = (28/34) * 170 = 140.0 g of Nitrogen.\"\n          />\n          <QuizCard\n            type=\"Far Transfer\"\n            typeColor=\"bg-purple-100 text-purple-800\"\n            question=\"A sample of gas in a flexible container occupies 5.0 L at a pressure of 100 kPa. If the temperature remains constant, what will the new pressure be if the container is compressed to a volume of 2.0 L?\"\n            answer=\"This problem uses an inverse relationship (Boyle's Law: P₁V₁ = P₂V₂), a different type of proportional reasoning. (100 kPa)(5.0 L) = (P₂)(2.0 L). Solving for P₂ gives P₂ = (100 * 5.0) / 2.0 = 250 kPa.\"\n          />\n        </CardContent>\n      </Card>\n    </section>\n  )\n}\n```\n\n```tsx file=\"components/lesson/QuizCard.tsx\"\n'use client'\n\nimport { useState } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { cn } from '@/lib/utils'\n\ninterface QuizCardProps {\n  type: string\n  typeColor: string\n  question: string\n  answer: string\n}\n\nexport function QuizCard({ type, typeColor, question, answer }: QuizCardProps) {\n  const [showAnswer, setShowAnswer] = useState(false)\n\n  return (\n    <div className=\"rounded-lg border border-slate-200 bg-slate-50/50 p-6\">\n      <div className={cn(\"mb-3 inline-block rounded-full px-3 py-1 text-sm font-semibold\", typeColor)}>\n        {type}\n      </div>\n      <p className=\"mb-4 text-base text-slate-700\">{question}</p>\n      <div className=\"flex flex-col items-start space-y-4\">\n        <Button onClick={() => setShowAnswer(!showAnswer)} variant=\"outline\" size=\"sm\">\n          {showAnswer ? 'Hide Answer' : 'Show Answer'}\n        </Button>\n        {showAnswer && (\n          <div className=\"w-full rounded-md border-l-4 border-green-500 bg-green-50 p-4 text-green-800\">\n            <p className=\"font-semibold\">Solution:</p>\n            <p>{answer}</p>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n```\n\n```tsx file=\"components/lesson/icons.tsx\"\n// This file contains simple SVG icons for visual elements in the lesson.\n\nexport const LabCoatIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <path d=\"M12 22a2 2 0 0 0 2-2V12a2 2 0 0 0-2-2H8a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2\" />\n    <path d=\"M12 10V8c0-1.66-1.34-3-3-3s-3 1.34-3 3v2\" />\n    <path d=\"M18 10V8c0-1.66-1.34-3-3-3s-3 1.34-3 3v2\" />\n    <path d=\"M12 10h6v10a2 2 0 0 1-2 2\" />\n    <path d=\"M18 10h-6\" />\n  </svg>\n)\n\ninterface BeakerIconProps extends React.SVGProps<SVGSVGElement> {\n  fillLevel?: number // Percentage from 0 to 100\n}\n\nexport const BeakerIcon = ({ fillLevel = 0, ...props }: BeakerIconProps) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"1.5\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <path d=\"M4.5 3h15\" />\n    <path d=\"M6 3v16.33a2 2 0 0 0 2 1.97h8a2 2 0 0 0 2-1.97V3\" />\n    <path d=\"M6 14h12\" />\n    {fillLevel > 0 && (\n      <rect\n        x=\"6\"\n        y={21.3 - (15 * fillLevel) / 100}\n        width=\"12\"\n        height={(15 * fillLevel) / 100}\n        fill=\"currentColor\"\n        className=\"opacity-30\"\n        strokeWidth=\"0\"\n      />\n    )}\n  </svg>\n)\n\nexport const MoleculeIcon = (props: React.SVGProps<SVGSVGElement>) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" {...props}><path d=\"M12 2a10 10 0 1 0 10 10\"/><path d=\"M12 2a10 10 0 1 0-10 10\"/><path d=\"M22 12a10 10 0 1 0-10 10\"/><path d=\"M2 12a10 10 0 1 0 10-10\"/><path d=\"M12 12a6 6 0 1 0 0-0.1\"/></svg>\n)\n\nexport const ShapesIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <path d=\"M8.3 10a.7.7 0 0 1-.6-1.1l4-7a.7.7 0 0 1 1.2 0l4 7a.7.7 0 0 1-.6 1.1Z\" />\n    <path d=\"M12 21a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z\" />\n    <path d=\"M4.5 6.5a1 1 0 1 0 0-2 1 1 0 0 0 0 2Z\" />\n    <path d=\"M19.5 6.5a1 1 0 1 0 0-2 1 1 0 0 0 0 2Z\" />\n    <rect x=\"17\" y=\"15\" width=\"4\" height=\"4\" rx=\"1\" />\n  </svg>\n)\n\nexport const SigmaIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <path d=\"M18 7V4H6l6 8-6 8h12v-3\" />\n  </svg>\n)\n\nexport const FlaskConical = (props: React.SVGProps<SVGSVGElement>) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" {...props}><path d=\"M10 2v7.31\"/><path d=\"M14 9.31V2\"/><path d=\"M8.5 2h7\"/><path d=\"M14 9.31 16.5 14h-9L10 9.31\"/><path d=\"m7 14 -4.5 7.5h19L17 14\"/></svg>\n)\n```"
}