{
  "content": "<Thinking>\n## Plan for Chemistry Teaching Webpage\n\n### 1. Project Structure\n\nI'll create a standard Next.js App Router project. The main content will reside in `app/page.tsx`. I will use shadcn/ui components, which requires setting up a `components/ui` directory and a `lib/utils.ts` file.\n\n-   `app/layout.tsx`: Basic HTML structure with body and font setup.\n-   `app/page.tsx`: The main component containing the entire educational webpage.\n-   `components/ui/`: Directory for shadcn/ui components. I'll need:\n    -   `accordion.tsx`\n    -   `card.tsx`\n    -   `tabs.tsx`\n    -   `alert.tsx`\n    -   `separator.tsx`\n    -   `checkbox.tsx`\n    -   `label.tsx`\n    -   `button.tsx`\n-   `lib/utils.ts`: The `cn` utility function for merging Tailwind classes.\n-   `globals.css` & `tailwind.config.ts`: Standard Tailwind CSS setup files.\n\n### 2. Styling and Visuals\n\n-   **Framework:** Tailwind CSS.\n-   **Component Library:** shadcn/ui for a modern, accessible, and clean look.\n-   **Color Palette:** I'll use a neutral palette (slate, gray) with a single accent color (e.g., green or teal) for highlights, calls-to-action, and key concepts to avoid overwhelming the user. I will avoid blue/indigo as per my instructions.\n-   **Icons:** I will use the `lucide-react` library for icons to provide visual cues (e.g., flask for lab, lightbulb for hints, brain for metacognition, check-circle for completion).\n-   **Layout:** A single-column layout, centered, with a max-width to ensure readability on large screens. It will be fully responsive using Tailwind's breakpoints. I'll use `Card` components to create visually distinct sections for each part of the lesson.\n\n### 3. Content and Pedagogy\n\nI will structure the page following the user's detailed instructional plan.\n\n1.  **Header/Introduction:** A welcoming title and a brief introduction to the topic: Stoichiometry and Proportional Reasoning. I'll include a simple visual element, like a lab flask icon.\n\n2.  **The Scenario (Context):**\n    -   A `Card` component will present a real-world lab scenario.\n    -   **Problem:** \"A lab synthesis of Magnesium Oxide (MgO) shows that 5.0 g of Magnesium (Mg) reacts completely to produce 8.3 g of MgO. Following this established ratio, how much MgO can be produced if you start with 12.0 g of Mg?\"\n    -   I'll add a simple illustration/icon of a balance scale or lab equipment.\n\n3.  **The CRA Approach (Concrete -> Representational -> Abstract):**\n    -   A section with three distinct parts, likely using `Card`s or styled divs.\n    -   **Concrete:** Describe the physical observation: \"Imagine burning a silver ribbon of magnesium. It glows brightly and turns into a white, powdery ash (Magnesium Oxide). We are measuring the mass of the ribbon before and the ash after.\"\n    -   **Representational:** Use icons or simple diagrams to show particles. E.g., `Mg + O‚ÇÇ ‚Üí MgO`. I'll also visualize the mass ratio, perhaps with a simple bar chart representation.\n    -   **Abstract:** Present the problem using symbols and numbers. \"Mass Ratio: `Mass of MgO / Mass of Mg` is constant.\"\n\n4.  **Solving the Problem with F.O.P.S.:**\n    -   This will be the core interactive section, using an `Accordion` component. Each letter of F.O.P.S. will be an `AccordionItem`.\n    -   **F - Find:** \"Find the core chemical principle.\" (Law of Definite Proportions).\n    -   **O - Organize:** \"Organize known and unknown quantities.\" I'll use a table to display the given information.\n    -   **P - Plan:** \"Plan your approach.\" (1. Calculate the mass ratio from the sample experiment. 2. Apply that ratio to the new amount).\n    -   **S - Solve:** \"Solve the problem step-by-step.\" Show the calculation clearly. `(8.3g MgO / 5.0g Mg) * 12.0g Mg = 19.9g MgO`.\n\n5.  **Metacognitive Checkpoint:**\n    -   After the solution, a section titled \"üß† Reflect on Your Strategy\".\n    -   This will use `Checkbox` components with labels for self-monitoring questions: \"Did I identify the core principle?\", \"Did I organize the data correctly?\", \"Does my final answer seem reasonable?\".\n\n6.  **Transfer Your Skills (Practice):**\n    -   This section will use a `Tabs` component with two tabs: \"üìå Near Transfer\" and \"üöÄ Far Transfer\".\n    -   **Near Transfer Problem:** \"In the decomposition of water, it's found that 18.0 g of H‚ÇÇO produces 2.0 g of Hydrogen (H‚ÇÇ). If you want to produce 5.0 g of Hydrogen, how much water do you need to decompose?\"\n    -   **Far Transfer Problem:** \"A gas occupies 10.0 L at 2.0 atm. What was its original volume if it was compressed to 4.0 atm, assuming temperature and amount of gas remain constant? (Hint: Boyle's Law P‚ÇÅV‚ÇÅ = P‚ÇÇV‚ÇÇ)\"\n    -   Each problem will have a solution hidden within an `Accordion` or `Collapsible` component, so students can attempt it before revealing the answer.\n\n### 4. Code Generation Strategy\n\n1.  I will start by creating the project and installing dependencies.\n2.  I will then create the necessary `shadcn/ui` component files by providing their code.\n3.  Next, I'll set up `app/layout.tsx` and `lib/utils.ts`.\n4.  Finally, I will write the main `app/page.tsx`, importing all necessary components and icons, and structuring the JSX according to the plan above. I will add comments to explain the different sections.\n5.  I will ensure all components are responsive and accessible. Client components (`\"use client\"`) will be used only where necessary (e.g., for the interactive UI components like Tabs and Accordion). The main page can remain a Server Component. The shadcn components will handle their own client-side interactivity.\n\nThis structured approach ensures all pedagogical and technical requirements from the prompt are met, resulting in a comprehensive and instructionally sound webpage.\n</Thinking>\n\n```bash\nnpx create-next-app@latest . --typescript --eslint --tailwind --app --turbopack --yes\nnpm i lucide-react @radix-ui/react-accordion @radix-ui/react-tabs @radix-ui/react-checkbox @radix-ui/react-label @radix-ui/react-slot class-variance-authority clsx tailwind-merge\n```\n\nNext, create the following files for the shadcn/ui components.\n\n```tsx file=\"lib/utils.ts\"\nimport { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n```\n\n```tsx file=\"components/ui/accordion.tsx\"\n\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n```\n\n```tsx file=\"components/ui/card.tsx\"\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter }\n```\n\n```tsx file=\"components/ui/tabs.tsx\"\n\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n```\n\n```tsx file=\"components/ui/alert.tsx\"\nimport * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n```\n\n```tsx file=\"components/ui/separator.tsx\"\n\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n```\n\n```tsx file=\"components/ui/checkbox.tsx\"\n\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n```\n\n```tsx file=\"components/ui/label.tsx\"\n\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n```\n\nNow, update the `tailwind.config.ts` and `globals.css`.\n\n```ts file=\"tailwind.config.ts\"\nimport type { Config } from \"tailwindcss\"\n\nconst config = {\n  darkMode: [\"class\"],\n  content: [\n    './pages/**/*.{ts,tsx}',\n    './components/**/*.{ts,tsx}',\n    './app/**/*.{ts,tsx}',\n    './src/**/*.{ts,tsx}',\n\t],\n  prefix: \"\",\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      colors: {\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n} satisfies Config\n\nexport default config\n```\n\n```css file=\"globals.css\"\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 84% 4.9%;\n\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 84% 4.9%;\n \n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 84% 4.9%;\n \n    --primary: 142.1 76.2% 36.3%;\n    --primary-foreground: 355.7 100% 97.3%;\n \n    --secondary: 210 40% 96.1%;\n    --secondary-foreground: 215.4 16.3% 46.9%;\n \n    --muted: 210 40% 96.1%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n \n    --accent: 210 40% 96.1%;\n    --accent-foreground: 215.4 16.3% 46.9%;\n \n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 210 40% 98%;\n\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: 142.1 76.2% 36.3%;\n \n    --radius: 0.5rem;\n  }\n \n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n \n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n \n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n \n    --primary: 142.1 70.6% 45.3%;\n    --primary-foreground: 355.7 100% 97.3%;\n \n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n \n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 210 40% 98%;\n \n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n \n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n \n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 142.1 70.6% 45.3%;\n  }\n}\n \n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n```\n\nFinally, here is the main page component.\n\n```tsx file=\"app/page.tsx\"\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\"\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport { Label } from \"@/components/ui/label\"\nimport { Beaker, Brain, DraftingCompass, Scale, Lightbulb, CheckCircle, Telescope, Rocket } from \"lucide-react\"\n\nexport default function ChemistryPage() {\n  return (\n    <main className=\"container mx-auto max-w-4xl px-4 py-12\">\n      <header className=\"mb-12 text-center\">\n        <div className=\"inline-flex items-center justify-center bg-primary/10 text-primary rounded-lg p-3 mb-4\">\n          <Beaker className=\"h-10 w-10\" />\n        </div>\n        <h1 className=\"text-4xl md:text-5xl font-bold tracking-tight\">\n          Mastering Chemical Ratios\n        </h1>\n        <p className=\"mt-4 text-lg text-muted-foreground\">\n          From Lab Observations to Abstract Problem-Solving\n        </p>\n      </header>\n\n      {/* Section 1: Context */}\n      <section id=\"context\" className=\"mb-12\">\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center gap-4\">\n              <Scale className=\"h-8 w-8 text-primary\" />\n              <div>\n                <CardTitle>The Lab Scenario</CardTitle>\n                <CardDescription>Connecting chemistry to the real world.</CardDescription>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <p className=\"mb-4\">\n              Imagine you're in a chemistry lab, tasked with creating Magnesium Oxide (MgO), a fine white powder, by burning a metallic ribbon of Magnesium (Mg). This is a synthesis reaction.\n            </p>\n            <Alert>\n              <Lightbulb className=\"h-4 w-4\" />\n              <AlertTitle>Today's Core Problem</AlertTitle>\n              <AlertDescription>\n                An initial experiment shows that <strong>5.0 g of Magnesium (Mg)</strong> reacts completely to produce <strong>8.3 g of Magnesium Oxide (MgO)</strong>. Your challenge: Following this established ratio, how much MgO can be produced if you start with <strong>12.0 g of Mg</strong>?\n              </AlertDescription>\n            </Alert>\n          </CardContent>\n        </Card>\n      </section>\n\n      {/* Section 2: CRA Approach */}\n      <section id=\"cra\" className=\"mb-12\">\n        <h2 className=\"text-3xl font-bold mb-6 text-center\">From Concrete to Abstract</h2>\n        <div className=\"grid md:grid-cols-3 gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>1. Concrete</CardTitle>\n              <CardDescription>Observable Phenomena</CardDescription>\n            </CardHeader>\n            <CardContent>\n              You see a silver ribbon (Mg). When burned, it emits a bright light and turns into a white powder (MgO). You can physically weigh both the initial ribbon and the final powder. This is what happens in the real world.\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader>\n              <CardTitle>2. Representational</CardTitle>\n              <CardDescription>Visual Models</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <p>We can model this at the particle level:</p>\n              <div className=\"my-2 p-2 bg-muted rounded-md text-center font-mono\">\n                2Mg + O‚ÇÇ ‚Üí 2MgO\n              </div>\n              <p>The key insight is the mass relationship. For every 5.0g of Mg, you get 8.3g of MgO. This ratio is constant.</p>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader>\n              <CardTitle>3. Abstract</CardTitle>\n              <CardDescription>Symbolic Reasoning</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <p>We use math to represent this relationship:</p>\n              <div className=\"my-2 p-2 bg-muted rounded-md text-center font-mono text-sm\">\n                (Mass of MgO) / (Mass of Mg) = k\n              </div>\n              <p>Here, 'k' is our constant ratio. We can use it to solve for unknown quantities.</p>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n\n      <Separator className=\"my-12\" />\n\n      {/* Section 3: F.O.P.S. Strategy */}\n      <section id=\"fops\" className=\"mb-12\">\n        <div className=\"text-center mb-8\">\n            <div className=\"inline-flex items-center justify-center bg-primary/10 text-primary rounded-lg p-3 mb-4\">\n              <DraftingCompass className=\"h-10 w-10\" />\n            </div>\n            <h2 className=\"text-3xl font-bold\">A Strategy for Success: F.O.P.S.</h2>\n            <p className=\"mt-2 text-muted-foreground\">Follow these steps to build your scientific model and solve the problem.</p>\n        </div>\n        <Accordion type=\"single\" collapsible className=\"w-full\">\n          <AccordionItem value=\"item-1\">\n            <AccordionTrigger className=\"text-xl font-semibold\">F - Find the Core Principle</AccordionTrigger>\n            <AccordionContent className=\"text-base p-2\">\n              The underlying chemical law is the <strong>Law of Definite Proportions</strong>. It states that a chemical compound always contains its component elements in fixed ratio (by mass). This is why our mass ratio will be constant.\n            </AccordionContent>\n          </AccordionItem>\n          <AccordionItem value=\"item-2\">\n            <AccordionTrigger className=\"text-xl font-semibold\">O - Organize Your Information</AccordionTrigger>\n            <AccordionContent className=\"text-base p-2\">\n              <p>Let's lay out what we know and what we need to find in a table:</p>\n              <div className=\"overflow-x-auto mt-2\">\n                <table className=\"w-full text-left border-collapse\">\n                  <thead>\n                    <tr>\n                      <th className=\"border-b p-2\">Experiment</th>\n                      <th className=\"border-b p-2\">Mass of Mg (g)</th>\n                      <th className=\"border-b p-2\">Mass of MgO (g)</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr>\n                      <td className=\"border-b p-2\">Known Sample</td>\n                      <td className=\"border-b p-2\">5.0</td>\n                      <td className=\"border-b p-2\">8.3</td>\n                    </tr>\n                    <tr>\n                      <td className=\"p-2\">New Problem</td>\n                      <td className=\"p-2\">12.0</td>\n                      <td className=\"p-2 font-bold text-primary\">?</td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n            </AccordionContent>\n          </AccordionItem>\n          <AccordionItem value=\"item-3\">\n            <AccordionTrigger className=\"text-xl font-semibold\">P - Plan Your Approach</AccordionTrigger>\n            <AccordionContent className=\"text-base p-2\">\n              Our plan has two steps:\n              <ol className=\"list-decimal list-inside mt-2 space-y-1\">\n                <li>Calculate the constant mass ratio (our 'k') from the known sample.</li>\n                <li>Use that ratio to calculate the unknown mass of MgO for our new problem.</li>\n              </ol>\n            </AccordionContent>\n          </AccordionItem>\n          <AccordionItem value=\"item-4\">\n            <AccordionTrigger className=\"text-xl font-semibold\">S - Solve the Problem</AccordionTrigger>\n            <AccordionContent className=\"text-base p-2 space-y-4\">\n              <div>\n                <p><strong>Step 1: Calculate the ratio.</strong></p>\n                <div className=\"my-2 p-3 bg-muted rounded-md font-mono text-sm\">\n                  Ratio = (Mass of MgO) / (Mass of Mg) = 8.3 g / 5.0 g = 1.66\n                </div>\n                <p className=\"text-sm text-muted-foreground\">This means for every 1g of Mg, we produce 1.66g of MgO.</p>\n              </div>\n              <div>\n                <p><strong>Step 2: Apply the ratio to the new amount.</strong></p>\n                 <div className=\"my-2 p-3 bg-muted rounded-md font-mono text-sm\">\n                  Mass of MgO = Ratio √ó (New Mass of Mg) <br/>\n                  Mass of MgO = 1.66 √ó 12.0 g\n                </div>\n              </div>\n              <Alert variant=\"default\" className=\"border-primary bg-primary/5\">\n                <CheckCircle className=\"h-4 w-4 text-primary\" />\n                <AlertTitle className=\"text-primary\">Final Answer</AlertTitle>\n                <AlertDescription className=\"font-bold text-lg\">\n                  Mass of MgO = 19.92 g\n                </AlertDescription>\n              </Alert>\n            </AccordionContent>\n          </AccordionItem>\n        </Accordion>\n      </section>\n\n      {/* Section 4: Metacognition */}\n      <section id=\"metacognition\" className=\"mb-12\">\n        <Card className=\"bg-slate-50\">\n          <CardHeader>\n            <div className=\"flex items-center gap-4\">\n              <Brain className=\"h-8 w-8 text-slate-600\" />\n              <div>\n                <CardTitle>Reflect on Your Strategy</CardTitle>\n                <CardDescription>Good scientists always check their thinking.</CardDescription>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox id=\"check1\" />\n              <Label htmlFor=\"check1\">Did I understand the goal of the question (e.g., find mass)?</Label>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox id=\"check2\" />\n              <Label htmlFor=\"check2\">Did I identify the core principle (Law of Definite Proportions)?</Label>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox id=\"check3\" />\n              <Label htmlFor=\"check3\">Is my final answer plausible? (More Mg should produce more MgO, and 19.9g is more than 8.3g).</Label>\n            </div>\n          </CardContent>\n        </Card>\n      </section>\n      \n      <Separator className=\"my-12\" />\n\n      {/* Section 5: Transfer Problems */}\n      <section id=\"transfer\">\n        <div className=\"text-center mb-8\">\n            <h2 className=\"text-3xl font-bold\">Transfer Your Skills</h2>\n            <p className=\"mt-2 text-muted-foreground\">Apply the same reasoning to new problems.</p>\n        </div>\n        <Tabs defaultValue=\"near\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"near\"><Telescope className=\"h-4 w-4 mr-2\"/>Near Transfer</TabsTrigger>\n            <TabsTrigger value=\"far\"><Rocket className=\"h-4 w-4 mr-2\"/>Far Transfer</TabsTrigger>\n          </TabsList>\n          <TabsContent value=\"near\" className=\"mt-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Problem: Decomposing Water</CardTitle>\n                <CardDescription>Same structure, different chemicals.</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <p>In the decomposition of water, it's found that 18.0 g of H‚ÇÇO produces 2.0 g of Hydrogen (H‚ÇÇ). If you want to produce 5.0 g of Hydrogen, how much water do you need to decompose?</p>\n                <Accordion type=\"single\" collapsible className=\"w-full mt-4\">\n                  <AccordionItem value=\"solution-near\">\n                    <AccordionTrigger>Show Solution</AccordionTrigger>\n                    <AccordionContent className=\"space-y-2\">\n                      <p><strong>F:</strong> The principle is still the Law of Definite Proportions.</p>\n                      <p><strong>O:</strong> Ratio is Mass of H‚ÇÇO / Mass of H‚ÇÇ.</p>\n                      <p><strong>P:</strong> 1. Find the ratio. 2. Apply it.</p>\n                      <p><strong>S:</strong>\n                        <br />1. Ratio = 18.0 g H‚ÇÇO / 2.0 g H‚ÇÇ = 9.0\n                        <br />2. Mass of H‚ÇÇO = 9.0 √ó 5.0 g H‚ÇÇ = <strong>45.0 g H‚ÇÇO</strong>\n                      </p>\n                    </AccordionContent>\n                  </AccordionItem>\n                </Accordion>\n              </CardContent>\n            </Card>\n          </TabsContent>\n          <TabsContent value=\"far\" className=\"mt-4\">\n             <Card>\n              <CardHeader>\n                <CardTitle>Problem: Compressing a Gas</CardTitle>\n                <CardDescription>Different context, same underlying logic (inverse relationship).</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <p>A gas occupies 10.0 L at 2.0 atm of pressure. What was its original volume if it was compressed from an original pressure of 1.0 atm, assuming temperature remains constant? (Hint: This follows Boyle's Law: P‚ÇÅV‚ÇÅ = P‚ÇÇV‚ÇÇ)</p>\n                <Accordion type=\"single\" collapsible className=\"w-full mt-4\">\n                  <AccordionItem value=\"solution-far\">\n                    <AccordionTrigger>Show Solution</AccordionTrigger>\n                    <AccordionContent className=\"space-y-2\">\n                      <p><strong>F:</strong> The principle is Boyle's Law, an inverse relationship (P‚ÇÅV‚ÇÅ = P‚ÇÇV‚ÇÇ).</p>\n                      <p><strong>O:</strong> P‚ÇÅ = 1.0 atm, V‚ÇÅ = ?, P‚ÇÇ = 2.0 atm, V‚ÇÇ = 10.0 L.</p>\n                      <p><strong>P:</strong> Rearrange the formula to solve for V‚ÇÅ: V‚ÇÅ = (P‚ÇÇV‚ÇÇ) / P‚ÇÅ.</p>\n                      <p><strong>S:</strong>\n                        <br/>V‚ÇÅ = (2.0 atm √ó 10.0 L) / 1.0 atm\n                        <br/>V‚ÇÅ = <strong>20.0 L</strong>\n                      </p>\n                      <p className=\"text-sm text-muted-foreground pt-2\">Notice how you used a known set of conditions (P‚ÇÇ, V‚ÇÇ) to find an unknown (V‚ÇÅ), just like you used a known mass ratio to find an unknown mass!</p>\n                    </AccordionContent>\n                  </AccordionItem>\n                </Accordion>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </section>\n\n    </main>\n  )\n}\n```"
}