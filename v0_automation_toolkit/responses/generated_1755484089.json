{
  "content": "<Thinking>\nI need to create an educational webpage to teach a specific chemistry problem, focusing on building skills in scientific modeling, abstract reasoning, and analogical transfer.\n\n**1. Project Structure:**\n\nI will structure the project as a Next.js application using the App Router. The page will be broken down into several components to keep the code organized and maintainable.\n\n*   `app/page.tsx`: The main page that assembles all the lesson components.\n*   `app/layout.tsx`: Root layout.\n*   `app/globals.css`: Global styles.\n*   `components/ui/`: Directory for shadcn/ui components.\n*   `components/LessonHeader.tsx`: Title and introduction.\n*   `components/IntroductionScenario.tsx`: Sets the real-world context with the problem statement.\n*   `components/ConceptExplorer.tsx`: Implements the Concrete-Representational-Abstract (CRA) approach.\n*   `components/ProblemSolver.tsx`: Guides the student through the F.O.P.S. strategy with interactive elements. This will be a client component.\n*   `components/MetacognitionPrompts.tsx`: Poses reflective questions to the student.\n*   `components/TransferTasks.tsx`: Presents the near-transfer and far-transfer problems. This will also be a client component.\n*   `components/LessonConclusion.tsx`: Summarizes the key takeaways.\n*   `lib/utils.ts`: For `cn` utility.\n*   `public/`: Will contain SVG images for illustrations.\n\n**2. Styling and UI:**\n\n*   **Framework:** Tailwind CSS.\n*   **Component Library:** shadcn/ui. I will use `Card`, `Button`, `Accordion`, `Input`, `Tabs`, and `Separator`.\n*   **Icons:** `lucide-react` for iconography to make the UI more intuitive (e.g., beaker, lightbulb, brain icons).\n*   **Color Palette:** I'll use a friendly, educational palette with greens, teals, and grays, avoiding the default blue/indigo. This will be configured in `tailwind.config.ts`.\n*   **Layout:** A single-column, responsive layout that works well on all screen sizes. I will use a `max-w-4xl` container to keep the content readable on large screens.\n\n**3. Images and Media:**\n\nI will create simple SVG illustrations to represent:\n*   A lab scene with a character (\"Alex the Chemist\").\n*   A concrete representation of the reaction (e.g., beakers).\n*   A representational particle diagram showing molecules reacting.\nThese will be placed in the `public/` directory and loaded using Next.js `<Image>`.\n\n**4. Interactivity:**\n\n*   The `ProblemSolver` component will have an input field for the student to enter the new reactant mass. A button will trigger the calculation, showing the result. This requires state management (`useState`), making it a Client Component (`'use client'`).\n*   The `TransferTasks` component will have two tabs, each with an input field and a \"Check Answer\" button. It will manage state for the user's input and provide feedback (\"Correct!\" or \"Try again.\"). This will also be a Client Component.\n*   I will use shadcn/ui's `Accordion` for the F.O.P.S. steps and `Tabs` for the transfer problems to create an organized and interactive user experience.\n\n**5. Content and Pedagogy:**\n\n*   **Problem:** \"A reaction produces 12.0 g of a compound when 3.0 g of reactant A is used. What is the mass ratio of product to reactant? How much product will form from 7.5 g of A?\"\n*   **Context:** A lab scenario involving \"Alex the Chemist\" trying to scale up a reaction.\n*   **CRA:**\n    *   *Concrete:* Visual of the lab experiment.\n    *   *Representational:* Particle-level diagram.\n    *   *Abstract:* The formula for mass ratio.\n*   **F.O.P.S.:**\n    *   *Find:* Identify the principle of constant proportions.\n    *   *Organize:* Table of knowns and unknowns.\n    *   *Plan:* Outline the two steps (find ratio, apply ratio).\n    *   *Solve:* Interactive calculation.\n*   **Metacognition:** Cards with questions like \"What principle is at play?\" and \"How can you check if your answer makes sense?\"\n*   **Transfer Tasks:**\n    *   *Near-Transfer:* A paint mixing problem that uses the same ratio logic.\n    *   *Far-Transfer:* A gas law problem (Boyle's Law) which uses a similar inverse proportional relationship model (`P₁V₁ = P₂V₂`). This will be slightly different from the original plan's `miles-per-gallon` example to introduce a different but structurally analogous scientific concept. The gas law problem is a better fit for a chemistry context. New far-transfer problem: \"A gas occupies 10.0 L at 2.0 atm. What is its new volume if the pressure is increased to 4.0 atm, assuming temperature is constant?\" This relies on `P₁V₁ = P₂V₂`, an inverse relationship, which is a key reasoning pattern.\n\nI will now generate the code based on this plan.\n</Thinking>\n\n### Project Setup\n\nFirst, create a new Next.js project and install the necessary dependencies.\n\n```bash\n# 1. Create Next.js project\nnpx create-next-app@latest chem-tutor --typescript --tailwind --eslint --app --src-dir --import-alias \"@/*\" --yes\n\n# 2. Navigate into your project directory\ncd chem-tutor\n\n# 3. Initialize shadcn/ui\nnpx shadcn-ui@latest init\n\n# 4. Add required components\nnpx shadcn-ui@latest add card button accordion input tabs separator\n\n# 5. Install lucide-react for icons\nnpm install lucide-react\n```\n\n### Configure Tailwind CSS\n\nUpdate your `tailwind.config.ts` to include a custom color palette.\n\n```ts file=\"tailwind.config.ts\"\nimport type { Config } from \"tailwindcss\"\n\nconst config = {\n  darkMode: [\"class\"],\n  content: [\n    './pages/**/*.{ts,tsx}',\n    './components/**/*.{ts,tsx}',\n    './app/**/*.{ts,tsx}',\n    './src/**/*.{ts,tsx}',\n\t],\n  prefix: \"\",\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      colors: {\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n} satisfies Config\n\nexport default config\n```\n\n### Create SVG Illustrations\n\nCreate the following SVG files in the `public/` directory.\n\n```svg file=\"public/lab-scenario.svg\"\n<svg width=\"200\" height=\"150\" viewBox=\"0 0 200 150\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect x=\"10\" y=\"130\" width=\"180\" height=\"10\" rx=\"5\" fill=\"#A0AEC0\"/>\n<rect x=\"40\" y=\"60\" width=\"40\" height=\"70\" rx=\"5\" fill=\"#E2E8F0\"/>\n<path d=\"M40 60 H 80 V 65 H 40 Z\" fill=\"#4FD1C5\"/>\n<rect x=\"120\" y=\"80\" width=\"40\" height=\"50\" rx=\"5\" fill=\"#E2E8F0\"/>\n<path d=\"M120 80 H 160 V 85 H 120 Z\" fill=\"#F6E05E\"/>\n<path d=\"M90 90 C 100 80, 110 80, 120 90\" stroke=\"#4A5568\" stroke-width=\"2\" fill=\"none\"/>\n<path d=\"M115 90 L 120 90 L 117.5 95 Z\" fill=\"#4A5568\"/>\n<circle cx=\"140\" cy=\"40\" r=\"15\" fill=\"#F6E05E\"/>\n<path d=\"M140 25 V 15 M155 40 H 165 M140 55 V 65 M125 40 H 115\" stroke=\"#F6E05E\" stroke-width=\"2\"/>\n<text x=\"130\" y=\"45\" font-family=\"monospace\" font-size=\"12\" fill=\"#4A5568\">?</text>\n</svg>\n```\n\n```svg file=\"public/particle-diagram.svg\"\n<svg width=\"200\" height=\"100\" viewBox=\"0 0 200 100\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<circle cx=\"25\" cy=\"50\" r=\"10\" fill=\"#4FD1C5\"/>\n<path d=\"M50 50 L 80 50\" stroke=\"#4A5568\" stroke-width=\"2\" stroke-dasharray=\"4 2\"/>\n<path d=\"M75 45 L 80 50 L 75 55\" stroke=\"#4A5568\" stroke-width=\"2\"/>\n<circle cx=\"115\" cy=\"35\" r=\"10\" fill=\"#4FD1C5\"/>\n<circle cx=\"115\" cy=\"65\" r=\"10\" fill=\"#F6E05E\"/>\n<circle cx=\"145\" cy=\"35\" r=\"10\" fill=\"#4FD1C5\"/>\n<circle cx=\"145\" cy=\"65\" r=\"10\" fill=\"#F6E05E\"/>\n<circle cx=\"175\" cy=\"35\" r=\"10\" fill=\"#4FD1C5\"/>\n<circle cx=\"175\" cy=\"65\" r=\"10\" fill=\"#F6E05E\"/>\n<text x=\"15\" y=\"80\" font-family=\"sans-serif\" font-size=\"10\" fill=\"#4A5568\">Reactant A</text>\n<text x=\"120\" y=\"80\" font-family=\"sans-serif\" font-size=\"10\" fill=\"#4A5568\">Product</text>\n</svg>\n```\n\n### Build the Components\n\nNow, create the React components for each section of the lesson.\n\n```tsx file=\"src/components/LessonHeader.tsx\"\nimport { Beaker } from 'lucide-react';\n\nexport function LessonHeader() {\n  return (\n    <header className=\"text-center p-8 bg-slate-50 rounded-lg border\">\n      <div className=\"flex items-center justify-center gap-4 mb-2\">\n        <Beaker className=\"w-10 h-10 text-teal-500\" />\n        <h1 className=\"text-4xl font-bold text-slate-800\">Chemistry Problem Solver</h1>\n      </div>\n      <p className=\"text-lg text-slate-600\">\n        Learn to solve stoichiometry problems with a step-by-step guide.\n      </p>\n    </header>\n  );\n}\n```\n\n```tsx file=\"src/components/IntroductionScenario.tsx\"\nimport Image from 'next/image';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Pin } from 'lucide-react';\n\nexport function IntroductionScenario() {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Pin className=\"w-6 h-6 text-amber-500\" />\n          The Challenge: Scaling Up a Reaction\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"grid md:grid-cols-3 gap-6\">\n        <div className=\"md:col-span-1 flex justify-center items-center\">\n          <Image\n            src=\"/lab-scenario.svg\"\n            alt=\"Lab scenario illustration\"\n            width={150}\n            height={100}\n          />\n        </div>\n        <div className=\"md:col-span-2 space-y-4\">\n          <p className=\"text-slate-700\">\n            Meet Alex, a chemistry student working in a lab. Alex found that a new reaction is very promising.\n            In a small-scale experiment, the reaction was a success!\n          </p>\n          <div className=\"bg-amber-50 border border-amber-200 text-amber-900 p-4 rounded-lg\">\n            <p className=\"font-semibold\">Here is the core problem:</p>\n            <p className=\"mt-2\">\n              A reaction produces <strong className=\"font-bold\">12.0 g</strong> of a compound when <strong className=\"font-bold\">3.0 g</strong> of reactant A is used. \n              Now, Alex wants to produce more. How much product will form from <strong className=\"font-bold\">7.5 g</strong> of reactant A?\n            </p>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n```\n\n```tsx file=\"src/components/ConceptExplorer.tsx\"\nimport Image from 'next/image';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Layers } from 'lucide-react';\n\nexport function ConceptExplorer() {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Layers className=\"w-6 h-6 text-teal-500\" />\n          From Concrete to Abstract\n        </CardTitle>\n        <CardDescription>\n          Let's break down the core idea: the Law of Constant Proportions.\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <div className=\"p-4 bg-slate-50 rounded-lg border\">\n          <h3 className=\"font-semibold text-slate-800\">1. Concrete: The Lab Observation</h3>\n          <p className=\"text-slate-600 mt-1\">\n            In the lab, we see that a specific amount of starting material (reactant) always produces a predictable amount of the final substance (product). If you double the ingredients, you double the outcome.\n          </p>\n        </div>\n        <div className=\"p-4 bg-slate-50 rounded-lg border\">\n          <h3 className=\"font-semibold text-slate-800\">2. Representational: The Particle View</h3>\n          <p className=\"text-slate-600 mt-1 mb-4\">\n            At a microscopic level, particles of Reactant A are rearranging to form particles of the Product. This happens in a fixed ratio. For every one particle of 'A', we might get a certain number of product particles.\n          </p>\n          <div className=\"flex justify-center\">\n            <Image\n              src=\"/particle-diagram.svg\"\n              alt=\"Particle level diagram of a reaction\"\n              width={200}\n              height={100}\n            />\n          </div>\n        </div>\n        <div className=\"p-4 bg-slate-50 rounded-lg border\">\n          <h3 className=\"font-semibold text-slate-800\">3. Abstract: The Mathematical Ratio</h3>\n          <p className=\"text-slate-600 mt-1\">\n            We can express this relationship as a mass ratio. This allows us to calculate outcomes without running the experiment every time.\n          </p>\n          <div className=\"mt-2 bg-white p-3 rounded-md text-center font-mono text-slate-800 border\">\n            Mass Ratio = (Mass of Product) / (Mass of Reactant)\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n```\n\n```tsx file=\"src/components/ProblemSolver.tsx\"\n'use client';\n\nimport { useState } from 'react';\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from '@/components/ui/accordion';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Lightbulb, ListOrdered, ClipboardCheck, Calculator } from 'lucide-react';\n\nexport function ProblemSolver() {\n  const [reactantMass, setReactantMass] = useState('7.5');\n  const [productMass, setProductMass] = useState<number | null>(null);\n\n  const calculateProduct = () => {\n    const massRatio = 12.0 / 3.0; // 4\n    const inputMass = parseFloat(reactantMass);\n    if (!isNaN(inputMass)) {\n      setProductMass(inputMass * massRatio);\n    }\n  };\n\n  return (\n    <div className=\"w-full\">\n      <h2 className=\"text-2xl font-bold text-center mb-4 text-slate-800\">\n        Let's Solve It Using F.O.P.S.\n      </h2>\n      <Accordion type=\"single\" collapsible className=\"w-full\">\n        <AccordionItem value=\"item-1\">\n          <AccordionTrigger className=\"font-semibold text-lg\"><Lightbulb className=\"w-5 h-5 mr-2 text-teal-500\" />F - Find the Principle</AccordionTrigger>\n          <AccordionContent>\n            The core chemical principle is the <strong className=\"font-semibold\">Law of Constant Proportions</strong>. This means that in a chemical reaction, the ratio of the masses of the reactants and products is always the same.\n          </AccordionContent>\n        </AccordionItem>\n        <AccordionItem value=\"item-2\">\n          <AccordionTrigger className=\"font-semibold text-lg\"><ListOrdered className=\"w-5 h-5 mr-2 text-teal-500\" />O - Organize the Data</AccordionTrigger>\n          <AccordionContent>\n            Let's list what we know and what we need to find.\n            <ul className=\"list-disc pl-5 mt-2 space-y-1\">\n              <li>Known Reactant A mass: <span className=\"font-mono p-1 bg-slate-100 rounded\">3.0 g</span></li>\n              <li>Known Product mass: <span className=\"font-mono p-1 bg-slate-100 rounded\">12.0 g</span></li>\n              <li>New Reactant A mass: <span className=\"font-mono p-1 bg-slate-100 rounded\">7.5 g</span></li>\n              <li>Unknown: New Product mass</li>\n            </ul>\n          </AccordionContent>\n        </AccordionItem>\n        <AccordionItem value=\"item-3\">\n          <AccordionTrigger className=\"font-semibold text-lg\"><ClipboardCheck className=\"w-5 h-5 mr-2 text-teal-500\" />P - Plan Your Approach</AccordionTrigger>\n          <AccordionContent>\n            <ol className=\"list-decimal pl-5 space-y-2\">\n              <li>First, calculate the mass ratio of Product to Reactant A from the initial experiment.</li>\n              <li>Then, use this constant ratio to calculate the mass of product formed from the new amount of Reactant A.</li>\n            </ol>\n          </AccordionContent>\n        </AccordionItem>\n        <AccordionItem value=\"item-4\">\n          <AccordionTrigger className=\"font-semibold text-lg\"><Calculator className=\"w-5 h-5 mr-2 text-teal-500\" />S - Solve the Problem</AccordionTrigger>\n          <AccordionContent className=\"space-y-4\">\n            <div>\n              <p><strong className=\"font-semibold\">Step 1: Calculate the mass ratio.</strong></p>\n              <p className=\"font-mono text-center p-3 my-2 bg-slate-100 rounded-md\">\n                Ratio = 12.0 g Product / 3.0 g Reactant A = 4\n              </p>\n              <p>This means for every 1g of Reactant A, you get 4g of Product.</p>\n            </div>\n            <div>\n              <p><strong className=\"font-semibold\">Step 2: Apply the ratio to the new amount.</strong></p>\n              <p>Enter the new mass of Reactant A to find the product mass.</p>\n              <div className=\"flex items-center gap-2 mt-2\">\n                <Input\n                  type=\"number\"\n                  value={reactantMass}\n                  onChange={(e) => setReactantMass(e.target.value)}\n                  placeholder=\"e.g., 7.5\"\n                  className=\"w-32\"\n                />\n                <span className=\"text-slate-600\">g of Reactant A</span>\n                <Button onClick={calculateProduct}>Calculate</Button>\n              </div>\n            </div>\n            {productMass !== null && (\n              <div className=\"mt-4 p-4 bg-teal-50 border border-teal-200 text-teal-900 rounded-lg\">\n                <p className=\"font-bold text-lg\">Result:</p>\n                <p className=\"font-mono text-xl mt-1\">\n                  7.5 g Reactant A × 4 = {productMass.toFixed(1)} g of Product\n                </p>\n                <p className=\"mt-2\">Alex will form {productMass.toFixed(1)} g of the product!</p>\n              </div>\n            )}\n          </AccordionContent>\n        </AccordionItem>\n      </Accordion>\n    </div>\n  );\n}\n```\n\n```tsx file=\"src/components/MetacognitionPrompts.tsx\"\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { BrainCircuit } from 'lucide-react';\n\nexport function MetacognitionPrompts() {\n  return (\n    <Card className=\"bg-slate-50 border-slate-200\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <BrainCircuit className=\"w-6 h-6 text-teal-500\" />\n          Check Your Understanding\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"p-3 bg-white rounded-lg border\">\n          <h3 className=\"font-semibold text-slate-800\">What's the Big Idea?</h3>\n          <p className=\"text-slate-600 mt-1\">What was the key principle that allowed us to solve this problem without needing a balanced chemical equation?</p>\n        </div>\n        <div className=\"p-3 bg-white rounded-lg border\">\n          <h3 className=\"font-semibold text-slate-800\">Does the Answer Make Sense?</h3>\n          <p className=\"text-slate-600 mt-1\">We started with 7.5g of reactant, which is more than the original 3.0g. Does it make sense that we produced more than the original 12.0g of product? Why?</p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n```\n\n```tsx file=\"src/components/TransferTasks.tsx\"\n'use client';\n\nimport { useState } from 'react';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Zap, Repeat } from 'lucide-react';\n\nexport function TransferTasks() {\n  const [nearAnswer, setNearAnswer] = useState('');\n  const [nearFeedback, setNearFeedback] = useState('');\n\n  const [farAnswer, setFarAnswer] = useState('');\n  const [farFeedback, setFarFeedback] = useState('');\n\n  const checkNearAnswer = () => {\n    if (parseFloat(nearAnswer) === 25) {\n      setNearFeedback('Correct! The ratio is 5:2. So 10g * (5/2) = 25g.');\n    } else {\n      setNearFeedback('Not quite. Think about the ratio of yellow to blue paint.');\n    }\n  };\n  \n  const checkFarAnswer = () => {\n    // P1V1 = P2V2  => V2 = (P1 * V1) / P2 = (2.0 * 10.0) / 4.0 = 5.0\n    if (parseFloat(farAnswer) === 5) {\n      setFarFeedback(\"Correct! Using Boyle's Law (P₁V₁ = P₂V₂), the new volume is 5.0 L.\");\n    } else {\n      setFarFeedback(\"Not quite. Remember that for gases, as pressure goes up, volume goes down (inversely proportional).\");\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Zap className=\"w-6 h-6 text-amber-500\" />\n          Apply Your Knowledge\n        </CardTitle>\n        <CardDescription>\n          Great scientific models can be transferred to new situations. Let's try it!\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <Tabs defaultValue=\"near\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"near\">📌 Near Transfer</TabsTrigger>\n            <TabsTrigger value=\"far\">🚀 Far Transfer</TabsTrigger>\n          </TabsList>\n          <TabsContent value=\"near\" className=\"mt-4\">\n            <div className=\"p-4 border rounded-lg\">\n              <h3 className=\"font-semibold\">Problem: The Perfect Paint Mix</h3>\n              <p className=\"mt-2 text-slate-700\">\n                A recipe for a special green paint requires <strong className=\"font-semibold\">5 parts yellow paint</strong> for every <strong className=\"font-semibold\">2 parts blue paint</strong>. If you use 10.0 grams of blue paint, how much yellow paint do you need?\n              </p>\n              <div className=\"flex items-center gap-2 mt-4\">\n                <Input\n                  type=\"number\"\n                  value={nearAnswer}\n                  onChange={(e) => setNearAnswer(e.target.value)}\n                  placeholder=\"Answer in grams\"\n                />\n                <Button onClick={checkNearAnswer}>Check</Button>\n              </div>\n              {nearFeedback && (\n                <p className={`mt-2 text-sm ${nearFeedback.startsWith('Correct') ? 'text-green-600' : 'text-red-600'}`}>\n                  {nearFeedback}\n                </p>\n              )}\n            </div>\n          </TabsContent>\n          <TabsContent value=\"far\" className=\"mt-4\">\n            <div className=\"p-4 border rounded-lg\">\n              <h3 className=\"font-semibold\">Problem: Gas Under Pressure</h3>\n              <p className=\"mt-2 text-slate-700\">\n                A gas in a flexible container occupies <strong className=\"font-semibold\">10.0 L</strong> at <strong className=\"font-semibold\">2.0 atm</strong> of pressure. If the pressure is increased to <strong className=\"font-semibold\">4.0 atm</strong> (at a constant temperature), what is its new volume?\n              </p>\n              <div className=\"flex items-center gap-2 mt-4\">\n                <Input\n                  type=\"number\"\n                  value={farAnswer}\n                  onChange={(e) => setFarAnswer(e.target.value)}\n                  placeholder=\"Answer in Liters\"\n                />\n                <Button onClick={checkFarAnswer}>Check</Button>\n              </div>\n              {farFeedback && (\n                <p className={`mt-2 text-sm ${farFeedback.startsWith('Correct') ? 'text-green-600' : 'text-red-600'}`}>\n                  {farFeedback}\n                </p>\n              )}\n            </div>\n          </TabsContent>\n        </Tabs>\n      </CardContent>\n    </Card>\n  );\n}\n```\n\n```tsx file=\"src/components/LessonConclusion.tsx\"\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { CheckCircle2 } from 'lucide-react';\n\nexport function LessonConclusion() {\n  return (\n    <Card className=\"bg-teal-50 border-teal-200\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2 text-teal-900\">\n          <CheckCircle2 className=\"w-6 h-6\" />\n          Lesson Complete!\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"text-teal-800 space-y-2\">\n        <p>Congratulations! You've successfully used proportional reasoning to solve a chemistry problem.</p>\n        <h3 className=\"font-semibold pt-2\">Key Takeaways:</h3>\n        <ul className=\"list-disc pl-5\">\n          <li>Many chemistry problems are about <strong className=\"font-semibold\">fixed ratios and proportions</strong>.</li>\n          <li>The <strong className=\"font-semibold\">F.O.P.S.</strong> method (Find, Organize, Plan, Solve) is a powerful strategy for any problem.</li>\n          <li>The same core reasoning can be <strong className=\"font-semibold\">transferred</strong> to solve different-looking problems.</li>\n        </ul>\n      </CardContent>\n    </Card>\n  );\n}\n```\n\n### Assemble the Page\n\nFinally, assemble all the components in `src/app/page.tsx`.\n\n```tsx file=\"src/app/page.tsx\"\nimport { Separator } from \"@/components/ui/separator\";\nimport { LessonHeader } from \"@/components/LessonHeader\";\nimport { IntroductionScenario } from \"@/components/IntroductionScenario\";\nimport { ConceptExplorer } from \"@/components/ConceptExplorer\";\nimport { ProblemSolver } from \"@/components/ProblemSolver\";\nimport { MetacognitionPrompts } from \"@/components/MetacognitionPrompts\";\nimport { TransferTasks } from \"@/components/TransferTasks\";\nimport { LessonConclusion } from \"@/components/LessonConclusion\";\n\nexport default function HomePage() {\n  return (\n    <main className=\"bg-slate-100 min-h-screen py-8 sm:py-12\">\n      <div className=\"container max-w-4xl mx-auto px-4\">\n        <div className=\"space-y-8\">\n          <LessonHeader />\n          \n          <IntroductionScenario />\n\n          <Separator />\n          \n          <ConceptExplorer />\n\n          <Separator />\n          \n          <ProblemSolver />\n\n          <Separator />\n          \n          <MetacognitionPrompts />\n          \n          <Separator />\n\n          <TransferTasks />\n          \n          <Separator />\n\n          <LessonConclusion />\n        </div>\n      </div>\n    </main>\n  );\n}\n\n```\n\n### Update Layout\n\nEnsure your `src/app/layout.tsx` is set up correctly.\n\n```tsx file=\"src/app/layout.tsx\"\nimport type { Metadata } from \"next\";\nimport { Inter } from \"next/font/google\";\nimport \"./globals.css\";\nimport { cn } from \"@/lib/utils\";\n\nconst inter = Inter({ subsets: [\"latin\"], variable: \"--font-sans\" });\n\nexport const metadata: Metadata = {\n  title: \"Chemistry Tutor\",\n  description: \"Learn to solve chemistry problems interactively.\",\n};\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body\n        className={cn(\n          \"min-h-screen bg-background font-sans antialiased\",\n          inter.variable\n        )}\n      >\n        {children}\n      </body>\n    </html>\n  );\n}\n```\n\nNow run `npm run dev` to see your interactive chemistry lesson webpage."
}