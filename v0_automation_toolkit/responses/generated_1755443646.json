{
  "content": "Of course. I will act as an instructional web designer to plan and then generate the code for an educational webpage that teaches the specified chemistry problem while building deeper scientific reasoning skills.\n\n### **Instructional Plan**\n\n<Thinking>\n**Project Structure & File Organization**\n\nI'll create a Next.js application using the App Router. The structure will be modular to keep the code clean and maintainable.\n\n1.  **`app/page.tsx`**: The main entry point that assembles the different sections of the learning module.\n2.  **`app/layout.tsx`**: The root layout for the page.\n3.  **`components/`**: This directory will house the reusable and section-specific components.\n    *   `Header.tsx`: A simple header for the page title.\n    *   `IntroductionSection.tsx`: Sets the real-world context for the problem.\n    *   `CoreProblemSection.tsx`: The main interactive component for teaching the core problem using the F.O.P.S. and CRA models. This will be a client component.\n    *   `MetacognitionSection.tsx`: Displays metacognitive prompts for students.\n    *   `TransferProblemSection.tsx`: A reusable client component for both near and far transfer problems, containing interactive elements.\n    *   `ConclusionSection.tsx`: A final summary of the learning objectives.\n4.  **`components/ui/`**: This will contain the `shadcn/ui` components that I'll use for building the interface, such as `Card`, `Button`, `Input`, and `Separator`.\n5.  **`public/`**: I'll add a simple SVG or image to visually support the introduction scenario.\n\n**Styling and Visual Design**\n\n*   **Framework**: I will use Tailwind CSS for styling.\n*   **Component Library**: I'll leverage `shadcn/ui` for pre-built, accessible components like `Card`, `Button`, and `Input` to create a clean and modern user interface.\n*   **Color Palette**: I will use a neutral and inviting color scheme (slate, zinc) with a primary accent color (e.g., teal or emerald) for interactive elements and highlights to create a focused learning environment.\n*   **Visuals**: I'll include icons from `lucide-react` to add visual cues and improve engagement (e.g., a flask for the lab, a brain for metacognition). I'll also use a simple SVG illustration for the lab context.\n\n**Interactivity and State Management**\n\n*   The core problem-solving section and the transfer problems will be interactive. Students will input their answers and receive immediate feedback.\n*   These interactive components (`CoreProblemSection.tsx`, `TransferProblemSection.tsx`) will be Client Components (`\"use client\"`) and use the `useState` hook to manage user input and feedback messages.\n*   The rest of the components will be Server Components where possible, to optimize performance.\n\n**Pedagogical Flow Implementation**\n\n1.  **Introduction**: Start with a relatable lab scenario to provide context.\n2.  **Core Problem**:\n    *   **Concrete**: Describe the physical observation of the reaction.\n    *   **Representational**: Use particle diagrams (represented textually/iconically for this format) and simple mass block visuals.\n    *   **Abstract**: Introduce the mathematical formula.\n    *   **F.O.P.S. Strategy**: The solution will be explicitly broken down into Find, Organize, Plan, and Solve steps, presented within styled cards.\n3.  **Metacognition**: A dedicated section with prompts to encourage students to reflect on their learning process.\n4.  **Near & Far Transfer**: Use the reusable `TransferProblemSection` component to present these distinct challenges, reinforcing the core logical structure in different contexts.\n\n**Accessibility**\n\n*   Use semantic HTML (`<header>`, `<main>`, `<section>`).\n*   Ensure all interactive elements like inputs have associated labels.\n*   Use `sr-only` for any necessary screen-reader-only text.\n*   `shadcn/ui` components are built with accessibility in mind, which will be a significant advantage.\n\nThis plan establishes a clear path to building a robust, instructionally sound, and engaging educational webpage that meets all the user's requirements.\n</Thinking>\n\nHere is the code for the educational webpage.\n\n### **1. Project Setup**\n\nFirst, set up your Next.js project and install the necessary dependencies.\n\n```bash\nnpx create-next-app@latest . --typescript --eslint --tailwind --app --turbopack --yes\nnpx shadcn-ui@latest init\n```\n\nWhen prompted by `shadcn-ui`, accept the defaults. Then, add the components we'll need:\n\n```bash\nnpx shadcn-ui@latest add card button input separator\nnpm install lucide-react\n```\n\n### **2. Create an Illustration**\n\nCreate an illustration for the lab context.\n\n```tsx file=\"public/lab-context.svg\"\n<svg width=\"200\" height=\"150\" viewBox=\"0 0 200 150\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect x=\"10\" y=\"130\" width=\"180\" height=\"10\" rx=\"5\" fill=\"#A1A1AA\"/>\n<path d=\"M60 130V50C60 44.4772 64.4772 40 70 40H130C135.523 40 140 44.4772 140 50V130\" stroke=\"#71717A\" stroke-width=\"4\"/>\n<rect x=\"65\" y=\"80\" width=\"70\" height=\"50\" fill=\"#34D399\" fill-opacity=\"0.3\"/>\n<path d=\"M70 40H130\" stroke=\"#71717A\" stroke-width=\"4\"/>\n<circle cx=\"80\" cy=\"65\" r=\"3\" fill=\"#A1A1AA\" fill-opacity=\"0.5\"/>\n<circle cx=\"95\" cy=\"55\" r=\"2\" fill=\"#A1A1AA\" fill-opacity=\"0.5\"/>\n<circle cx=\"115\" cy=\"60\" r=\"4\" fill=\"#A1A1AA\" fill-opacity=\"0.5\"/>\n</svg>\n```\n\n### **3. Build the Components**\n\nCreate the following component files.\n\n```tsx file=\"components/header.tsx\"\nimport { FlaskConical } from 'lucide-react';\n\nexport default function Header() {\n  return (\n    <header className=\"w-full py-6\">\n      <div className=\"container mx-auto flex items-center justify-center gap-4\">\n        <FlaskConical className=\"h-8 w-8 text-emerald-500\" />\n        <h1 className=\"text-3xl font-bold tracking-tight text-zinc-800\">\n          Chemistry Ratio & Proportion Solver\n        </h1>\n      </div>\n      <p className=\"text-center text-zinc-600 mt-2\">\n        Learn to solve problems and think like a scientist!\n      </p>\n    </header>\n  );\n}\n```\n\n```tsx file=\"components/introduction-section.tsx\"\nimport Image from 'next/image';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nexport default function IntroductionSection() {\n  return (\n    <section id=\"context\" className=\"w-full py-8\">\n      <h2 className=\"text-2xl font-semibold text-center mb-6\">\n        1. Understanding the Context\n      </h2>\n      <Card className=\"bg-slate-50\">\n        <CardHeader>\n          <CardTitle>A Lab Scenario: Creating a New Compound</CardTitle>\n        </CardHeader>\n        <CardContent className=\"grid md:grid-cols-2 gap-6 items-center\">\n          <div className=\"space-y-4 text-zinc-700\">\n            <p>\n              Imagine you're in a chemistry lab, working to synthesize a new medicinal compound. You mix a specific amount of a starting material, which we'll call <span className=\"font-semibold text-emerald-600\">Reactant A</span>, into a solution.\n            </p>\n            <p>\n              After heating the mixture, you observe a reaction! The clear liquid turns cloudy and a solid substance, your desired <span className=\"font-semibold text-teal-600\">Product</span>, begins to form.\n            </p>\n            <p>\n              This is a <span className=\"font-medium\">Concrete</span> observation—something you can see and measure directly. Now, let's figure out the relationship between what you put in and what you got out.\n            </p>\n          </div>\n          <div className=\"flex justify-center\">\n            <Image\n              src=\"/lab-context.svg\"\n              alt=\"A beaker on a lab bench representing a chemical reaction.\"\n              width={200}\n              height={150}\n            />\n          </div>\n        </CardContent>\n      </Card>\n    </section>\n  );\n}\n```\n\n```tsx file=\"components/core-problem-section.tsx\"\n'use client';\n\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Separator } from '@/components/ui/separator';\nimport { AlertCircle, CheckCircle, Target, Puzzle, Lightbulb, Check } from 'lucide-react';\n\nexport default function CoreProblemSection() {\n  const [inputValue, setInputValue] = useState('');\n  const [feedback, setFeedback] = useState('');\n  const [status, setStatus] = useState<'correct' | 'incorrect' | null>(null);\n\n  const checkAnswer = () => {\n    const userAnswer = parseFloat(inputValue);\n    if (isNaN(userAnswer)) {\n      setFeedback('Please enter a valid number.');\n      setStatus('incorrect');\n      return;\n    }\n    if (userAnswer === 20) {\n      setFeedback('Excellent! Your calculation is spot on. You correctly applied the ratio.');\n      setStatus('correct');\n    } else {\n      setFeedback('Not quite. Remember to use the 3:1 ratio. For every 3g of product, you need 1g of reactant A.');\n      setStatus('incorrect');\n    }\n  };\n\n  return (\n    <section id=\"core-problem\" className=\"w-full py-8\">\n      <h2 className=\"text-2xl font-semibold text-center mb-6\">2. The Core Problem & Guided Solution</h2>\n      <Card className=\"w-full\">\n        <CardHeader>\n          <CardTitle className=\"text-center text-xl\">The Main Challenge</CardTitle>\n          <CardDescription className=\"text-center text-base !mt-2\">\n            A chemical reaction produces <strong>15.0 g</strong> of a product from <strong>5.0 g</strong> of reactant A.\n            <br />\n            <strong>Part 1:</strong> What is the mass ratio of the product to reactant A?\n            <br />\n            <strong>Part 2:</strong> How much reactant A is needed to produce <strong>60.0 g</strong> of the product?\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div>\n            <h3 className=\"font-semibold text-lg mb-4 text-center\">Solving Part 1 with F.O.P.S.</h3>\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\"><Target className=\"h-5 w-5 text-emerald-600\" />Find</CardTitle>\n                </CardHeader>\n                <CardContent>Find the core principle. This is about the Law of Definite Proportions—a compound always contains the same elements in the same proportion by mass.</CardContent>\n              </Card>\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\"><Puzzle className=\"h-5 w-5 text-emerald-600\" />Organize</CardTitle>\n                </CardHeader>\n                <CardContent>Organize the knowns: <br/>- Product Mass: 15.0 g<br/>- Reactant A Mass: 5.0 g</CardContent>\n              </Card>\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\"><Lightbulb className=\"h-5 w-5 text-emerald-600\" />Plan</CardTitle>\n                </CardHeader>\n                <CardContent>To find the ratio, I will divide the mass of the product by the mass of reactant A.</CardContent>\n              </Card>\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\"><Check className=\"h-5 w-5 text-emerald-600\" />Solve</CardTitle>\n                </CardHeader>\n                <CardContent>15.0 g / 5.0 g = 3. The ratio of Product to Reactant A is <strong>3:1</strong>.</CardContent>\n              </Card>\n            </div>\n          </div>\n          <Separator />\n          <div>\n            <h3 className=\"font-semibold text-lg mb-2 text-center\">Now, Solve Part 2!</h3>\n            <p className=\"text-center text-zinc-600 mb-4\">Using the 3:1 ratio, calculate how much Reactant A is needed for 60.0 g of product.</p>\n            <div className=\"flex flex-col sm:flex-row items-center justify-center gap-2 max-w-md mx-auto\">\n              <Input\n                type=\"number\"\n                placeholder=\"Enter mass of Reactant A in grams\"\n                value={inputValue}\n                onChange={(e) => setInputValue(e.target.value)}\n                aria-label=\"Answer for reactant A mass\"\n              />\n              <Button onClick={checkAnswer}>Check Answer</Button>\n            </div>\n            {feedback && (\n              <div className={`mt-4 p-3 rounded-md flex items-center gap-3 text-sm max-w-md mx-auto ${status === 'correct' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>\n                {status === 'correct' ? <CheckCircle className=\"h-5 w-5\" /> : <AlertCircle className=\"h-5 w-5\" />}\n                <p>{feedback}</p>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </section>\n  );\n}\n```\n\n```tsx file=\"components/metacognition-section.tsx\"\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { BrainCircuit } from 'lucide-react';\n\nexport default function MetacognitionSection() {\n  return (\n    <section id=\"metacognition\" className=\"w-full py-8\">\n      <h2 className=\"text-2xl font-semibold text-center mb-6\">3. Thinking About Your Thinking</h2>\n      <Card className=\"bg-slate-50\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-3\"><BrainCircuit className=\"h-6 w-6 text-emerald-600\" />Metacognitive Check-in</CardTitle>\n        </CardHeader>\n        <CardContent className=\"grid md:grid-cols-3 gap-4\">\n          <div className=\"p-4 bg-white rounded-lg border\">\n            <h4 className=\"font-semibold mb-1\">What do I know?</h4>\n            <p className=\"text-sm text-zinc-600\">I know the mass of the product and reactant from the first experiment, which allowed me to find a fixed ratio.</p>\n          </div>\n          <div className=\"p-4 bg-white rounded-lg border\">\n            <h4 className=\"font-semibold mb-1\">What principle applies?</h4>\n            <p className=\"text-sm text-zinc-600\">The Law of Definite Proportions. The ratio of masses is constant for this reaction.</p>\n          </div>\n          <div className=\"p-4 bg-white rounded-lg border\">\n            <h4 className=\"font-semibold mb-1\">How do I check my answer?</h4>\n            <p className=\"text-sm text-zinc-600\">I can work backward. If I have 20g of Reactant A, and the ratio is 3:1, does that produce 60g of product? 20g * 3 = 60g. Yes, it checks out!</p>\n          </div>\n        </CardContent>\n      </Card>\n    </section>\n  );\n}\n```\n\n```tsx file=\"components/transfer-problem-section.tsx\"\n'use client';\n\nimport { useState, FC } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { AlertCircle, CheckCircle } from 'lucide-react';\n\ninterface TransferProblemProps {\n  type: 'Near' | 'Far';\n  title: string;\n  icon: React.ReactNode;\n  problemText: React.ReactNode;\n  unit: string;\n  correctAnswer: number;\n  feedbackIncorrect: string;\n}\n\nconst TransferProblemSection: FC<TransferProblemProps> = ({\n  type,\n  title,\n  icon,\n  problemText,\n  unit,\n  correctAnswer,\n  feedbackIncorrect\n}) => {\n  const [inputValue, setInputValue] = useState('');\n  const [feedback, setFeedback] = useState('');\n  const [status, setStatus] = useState<'correct' | 'incorrect' | null>(null);\n\n  const checkAnswer = () => {\n    const userAnswer = parseFloat(inputValue);\n    if (isNaN(userAnswer)) {\n      setFeedback('Please enter a valid number.');\n      setStatus('incorrect');\n      return;\n    }\n    if (Math.abs(userAnswer - correctAnswer) < 0.01) { // Use tolerance for float comparison\n      setFeedback('Correct! You successfully transferred the reasoning to a new problem.');\n      setStatus('correct');\n    } else {\n      setFeedback(feedbackIncorrect);\n      setStatus('incorrect');\n    }\n  };\n\n  return (\n    <section id={`${type.toLowerCase()}-transfer`} className=\"w-full py-8\">\n      <h2 className=\"text-2xl font-semibold text-center mb-6\">\n        {type === 'Near' ? '4. Near Transfer: A New Reaction' : '5. Far Transfer: A Different Science'}\n      </h2>\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-3\">{icon} {title}</CardTitle>\n          <CardDescription>{problemText}</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col sm:flex-row items-center justify-center gap-2 max-w-md mx-auto\">\n            <Input\n              type=\"number\"\n              placeholder={`Enter answer in ${unit}`}\n              value={inputValue}\n              onChange={(e) => setInputValue(e.target.value)}\n              aria-label={`Answer for ${title}`}\n            />\n            <Button onClick={checkAnswer}>Check Answer</Button>\n          </div>\n          {feedback && (\n            <div className={`mt-4 p-3 rounded-md flex items-center gap-3 text-sm max-w-md mx-auto ${status === 'correct' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>\n              {status === 'correct' ? <CheckCircle className=\"h-5 w-5\" /> : <AlertCircle className=\"h-5 w-5\" />}\n              <p>{feedback}</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </section>\n  );\n};\n\nexport default TransferProblemSection;\n```\n\n```tsx file=\"components/conclusion-section.tsx\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { GraduationCap } from \"lucide-react\";\n\nexport default function ConclusionSection() {\n  return (\n    <section id=\"conclusion\" className=\"w-full py-8 text-center\">\n      <Card className=\"bg-emerald-50 border-emerald-200\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-center gap-3\">\n            <GraduationCap className=\"h-7 w-7 text-emerald-700\" />\n            Key Takeaway\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"text-emerald-800\">\n          <p className=\"max-w-3xl mx-auto\">\n            Great work! You've learned that scientific problems often share a hidden structure. Whether you're calculating mass in a chemical reaction or pressure in a gas, the core skill of identifying relationships and applying proportional reasoning is the key to becoming a master problem-solver.\n          </p>\n        </CardContent>\n      </Card>\n    </section>\n  );\n}\n```\n\n### **4. Assemble the Page**\n\nFinally, update your `page.tsx` and `layout.tsx` to bring all the components together.\n\n```tsx file=\"app/layout.tsx\"\nimport type { Metadata } from \"next\";\nimport { Inter } from \"next/font/google\";\nimport \"./globals.css\";\n\nconst inter = Inter({ subsets: [\"latin\"] });\n\nexport const metadata: Metadata = {\n  title: \"Chemistry Problem Solver\",\n  description: \"An interactive page to learn chemistry problem-solving skills.\",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\">\n      <body className={`${inter.className} bg-slate-100 text-zinc-900`}>\n        {children}\n      </body>\n    </html>\n  );\n}\n```\n\n```tsx file=\"app/page.tsx\"\nimport Header from \"@/components/header\";\nimport IntroductionSection from \"@/components/introduction-section\";\nimport CoreProblemSection from \"@/components/core-problem-section\";\nimport MetacognitionSection from \"@/components/metacognition-section\";\nimport TransferProblemSection from \"@/components/transfer-problem-section\";\nimport ConclusionSection from \"@/components/conclusion-section\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Repeat, Telescope } from 'lucide-react';\n\nexport default function Home() {\n  return (\n    <>\n      <Header />\n      <main className=\"container mx-auto max-w-5xl px-4 pb-12\">\n        <IntroductionSection />\n        <Separator className=\"my-4\" />\n        <CoreProblemSection />\n        <Separator className=\"my-4\" />\n        <MetacognitionSection />\n        <Separator className=\"my-4\" />\n        <TransferProblemSection\n          type=\"Near\"\n          title=\"Same Logic, New Chemicals\"\n          icon={<Repeat className=\"h-6 w-6 text-blue-600\" />}\n          problemText={\n            <>\n              A different reaction produces <strong>12.0 g</strong> of a new compound when <strong>3.0 g</strong> of reactant B is used. \n              The mass ratio is therefore 4:1. How much product will form from <strong>7.5 g</strong> of reactant B?\n            </>\n          }\n          unit=\"grams\"\n          correctAnswer={30}\n          feedbackIncorrect=\"Not quite. The ratio of product to reactant is 4:1. Multiply the reactant mass by 4.\"\n        />\n        <Separator className=\"my-4\" />\n        <TransferProblemSection\n          type=\"Far\"\n          title=\"Different Context, Same Structure\"\n          icon={<Telescope className=\"h-6 w-6 text-purple-600\" />}\n          problemText={\n            <>\n              A gas occupies <strong>10.0 L</strong> at <strong>2.0 atm</strong> of pressure. It is compressed to <strong>4.0 atm</strong>. What was its new volume in Liters? (This is an inverse relationship: P₁V₁ = P₂V₂)\n            </>\n          }\n          unit=\"Liters\"\n          correctAnswer={5}\n          feedbackIncorrect=\"Check your calculation. Since pressure doubled, the volume should be halved due to the inverse relationship (P₁V₁ = P₂V₂).\"\n        />\n        <Separator className=\"my-4\" />\n        <ConclusionSection />\n      </main>\n    </>\n  );\n}\n```\n\nNow, run your development server (`npm run dev`) to see the complete, interactive educational webpage in action."
}