{
  "content": "An excellent and detailed plan. As an instructional web designer, I will now build the educational webpage based on your pedagogical framework. The goal is to create an engaging, scaffolded learning experience that teaches students how to solve a common chemistry problem while building deeper scientific reasoning and transfer skills.\n\nHere is the plan for the webpage:\n\n### Project Structure\n\nI will structure the project using Next.js with the App Router. The code will be organized into logical, reusable components to maintain clarity and adhere to best practices.\n\n```\n/app\n├── layout.tsx\n├── page.tsx\n├── globals.css\n/components\n├── core-problem.tsx\n├── introduction.tsx\n├── transfer-problems.tsx\n/components/ui\n├── accordion.tsx\n├── button.tsx\n├── card.tsx\n├── input.tsx\n├── label.tsx\n├── tabs.tsx\n/lib\n└── utils.ts\n```\n\n### Styling and Frameworks\n\n*   **Framework**: Next.js 14 (App Router)\n*   **Language**: TypeScript\n*   **Styling**: Tailwind CSS for a responsive, utility-first design.\n*   **UI Components**: I will use `shadcn/ui` for pre-built, accessible components like cards, accordions, and tabs, which are perfect for structuring the educational content.\n*   **Icons**: `lucide-react` will be used for simple, clear icons to enhance visual communication.\n\n### Content and Pedagogical Flow\n\n1.  **Introduction**: A relatable scenario will be presented to contextualize the problem, featuring a student character named Alex synthesizing aspirin. This section will bridge the concrete lab observation with the abstract concept of percent yield.\n2.  **Core Problem**: This section will be highly interactive. I will use the **Concrete-Representational-Abstract (CRA)** model and the **F.O.P.S. (Find, Organize, Plan, Solve)** strategy to guide the student through the main problem. An accordion component will break down the F.O.P.S. steps, with the \"Solve\" step containing interactive input fields for guided practice. Metacognitive prompts will be included throughout.\n3.  **Transfer Problems**: After mastering the core problem, the student will be presented with two transfer problems in a tabbed interface:\n    *   **Near-Transfer**: A problem with the same underlying structure (percent yield) but a different chemical context (ammonia synthesis).\n    *   **Far-Transfer**: A non-chemistry problem (baking cookies) that shares the same core logic of limiting factors and yield, testing the student's ability to abstract and apply the reasoning pattern.\n\nThis structure ensures a gradual release of responsibility, moving from guided instruction to independent application and conceptual transfer.\n\nHere is the code for the webpage.\n\n<CodeProject>\n  <File path=\"app/layout.tsx\">\n    ```tsx\n    import type { Metadata } from \"next\";\n    import { Inter } from \"next/font/google\";\n    import \"./globals.css\";\n    import { cn } from \"@/lib/utils\";\n\n    const inter = Inter({ subsets: [\"latin\"] });\n\n    export const metadata: Metadata = {\n      title: \"Chemistry Problem Solver\",\n      description: \"An interactive page to learn stoichiometry and percent yield.\",\n    };\n\n    export default function RootLayout({\n      children,\n    }: Readonly<{\n      children: React.ReactNode;\n    }>) {\n      return (\n        <html lang=\"en\">\n          <body className={cn(\"bg-gray-50 text-gray-900\", inter.className)}>\n            {children}\n          </body>\n        </html>\n      );\n    }\n    ```\n  </File>\n  <File path=\"app/page.tsx\">\n    ```tsx\n    import Introduction from \"@/components/introduction\";\n    import CoreProblem from \"@/components/core-problem\";\n    import TransferProblems from \"@/components/transfer-problems\";\n\n    export default function HomePage() {\n      return (\n        <main className=\"container mx-auto px-4 py-8 md:py-12\">\n          <header className=\"text-center mb-12\">\n            <h1 className=\"text-4xl md:text-5xl font-bold tracking-tight text-gray-800\">\n              The Case of the Missing Crystals\n            </h1>\n            <p className=\"mt-4 text-lg text-gray-600 max-w-3xl mx-auto\">\n              An interactive guide to mastering chemical reactions and scientific problem-solving.\n            </p>\n          </header>\n\n          <div className=\"space-y-16\">\n            <Introduction />\n            <CoreProblem />\n            <TransferProblems />\n          </div>\n\n          <footer className=\"text-center mt-16 text-gray-500\">\n            <p>&copy; 2024 Vercel Labs. All rights reserved.</p>\n          </footer>\n        </main>\n      );\n    }\n    ```\n  </File>\n  <File path=\"components/introduction.tsx\">\n    ```tsx\n    import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n    import { TestTube, FlaskConical, Scale } from \"lucide-react\";\n\n    export default function Introduction() {\n      return (\n        <section aria-labelledby=\"introduction-title\">\n          <div className=\"text-center mb-8\">\n            <h2 id=\"introduction-title\" className=\"text-3xl font-bold text-gray-800\">\n              1. Setting the Scene\n            </h2>\n            <p className=\"mt-2 text-md text-gray-600\">Let's join Alex in the chemistry lab.</p>\n          </div>\n          <Card className=\"bg-white shadow-lg overflow-hidden\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl font-semibold\">Alex's Aspirin Experiment</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid md:grid-cols-2 gap-8 items-center\">\n                <div>\n                  <p className=\"text-gray-700 leading-relaxed mb-4\">\n                    Meet Alex, a student scientist. Alex is following a procedure to synthesize aspirin, a common pain reliever. The experiment involves a chemical reaction between two substances: salicylic acid and acetic anhydride.\n                  </p>\n                  <p className=\"text-gray-700 leading-relaxed\">\n                    Based on calculations, Alex expected to produce a nice pile of aspirin crystals. However, after finishing the experiment, the amount of aspirin collected seems... smaller than expected.\n                  </p>\n                   <blockquote className=\"mt-4 p-4 bg-yellow-50 border-l-4 border-yellow-400 text-yellow-800\">\n                    <p className=\"font-medium\">\"Why didn't I get the amount of product I predicted?\"</p>\n                    <cite className=\"block text-right mt-2 not-italic text-sm\">- A puzzled Alex</cite>\n                  </blockquote>\n                </div>\n                <div className=\"flex justify-center items-center gap-4 p-4 bg-gray-100 rounded-lg\">\n                    <div className=\"text-center\">\n                      <Scale className=\"mx-auto h-12 w-12 text-green-600\" />\n                      <p className=\"mt-2 font-semibold\">Start: 5.0g</p>\n                      <p className=\"text-sm text-gray-600\">Salicylic Acid</p>\n                    </div>\n                    <div className=\"text-2xl font-bold text-gray-400\">&rarr;</div>\n                     <div className=\"text-center\">\n                      <FlaskConical className=\"mx-auto h-12 w-12 text-blue-600\" />\n                      <p className=\"mt-2 font-semibold\">Reaction</p>\n                      <p className=\"text-sm text-gray-600\">+ Acetic Anhydride</p>\n                    </div>\n                    <div className=\"text-2xl font-bold text-gray-400\">&rarr;</div>\n                     <div className=\"text-center\">\n                      <TestTube className=\"mx-auto h-12 w-12 text-purple-600\" />\n                      <p className=\"mt-2 font-semibold\">End: 4.8g</p>\n                      <p className=\"text-sm text-gray-600\">Aspirin</p>\n                    </div>\n                </div>\n              </div>\n               <div className=\"mt-6 p-4 bg-green-50 border-l-4 border-green-500\">\n                <h3 className=\"font-bold text-green-800\">Teacher's Insight: Concrete to Abstract</h3>\n                <p className=\"text-green-700\">\n                  Alex's question connects a <strong className=\"font-semibold\">concrete</strong> observation (the mass of the white powder) to an <strong className=\"font-semibold\">abstract</strong> chemistry concept called <strong className=\"font-semibold\">Percent Yield</strong>. This value tells us how efficient a reaction is by comparing what we <span className=\"underline\">actually</span> got to what we <span className=\"underline\">theoretically</span> could have gotten. Let's help Alex figure it out!\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </section>\n      );\n    }\n    ```\n  </File>\n  <File path=\"components/core-problem.tsx\">\n    ```tsx\n    'use client';\n\n    import { useState } from 'react';\n    import { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\n    import {\n      Accordion,\n      AccordionContent,\n      AccordionItem,\n      AccordionTrigger,\n    } from \"@/components/ui/accordion\";\n    import { Input } from \"@/components/ui/input\";\n    import { Button } from \"@/components/ui/button\";\n    import { Label } from \"@/components/ui/label\";\n    import { CheckCircle, XCircle, Lightbulb } from 'lucide-react';\n\n    type StepState = {\n      answer: string;\n      isCorrect: boolean | null;\n    };\n\n    export default function CoreProblem() {\n      const [step1, setStep1] = useState<StepState>({ answer: '', isCorrect: null });\n      const [step2, setStep2] = useState<StepState>({ answer: '', isCorrect: null });\n      const [step3, setStep3] = useState<StepState>({ answer: '', isCorrect: null });\n      const [step4, setStep4] = useState<StepState>({ answer: '', isCorrect: null });\n\n      const checkAnswer = (step: number, userAnswer: string, correctAnswer: number) => {\n        const roundedUserAnswer = parseFloat(userAnswer).toFixed(3);\n        const roundedCorrectAnswer = correctAnswer.toFixed(3);\n        const isCorrect = roundedUserAnswer === roundedCorrectAnswer;\n\n        switch (step) {\n          case 1: setStep1({ ...step1, isCorrect }); break;\n          case 2: setStep2({ ...step2, isCorrect }); break;\n          case 3: setStep3({ ...step3, isCorrect }); break;\n          case 4: setStep4({ ...step4, isCorrect }); break;\n        }\n      };\n      \n      return (\n        <section aria-labelledby=\"core-problem-title\">\n          <div className=\"text-center mb-8\">\n            <h2 id=\"core-problem-title\" className=\"text-3xl font-bold text-gray-800\">\n              2. Solving the Core Problem\n            </h2>\n            <p className=\"mt-2 text-md text-gray-600\">Let's use the F.O.P.S. strategy to guide our thinking.</p>\n          </div>\n          <Card className=\"bg-white shadow-lg\">\n            <CardHeader>\n              <CardTitle>The Problem</CardTitle>\n              <CardDescription>\n                A student starts with <strong>5.0 grams</strong> of salicylic acid (C₇H₆O₃) and, after the reaction, collects <strong>4.8 grams</strong> of aspirin (C₉H₈O₄). What is the percent yield of the reaction?\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Accordion type=\"single\" collapsible className=\"w-full\" defaultValue=\"item-1\">\n                <AccordionItem value=\"item-1\">\n                  <AccordionTrigger className=\"text-xl font-semibold\">F: Find the Principle</AccordionTrigger>\n                  <AccordionContent>\n                    <p>The core chemical principles here are <strong>stoichiometry</strong> (using mole ratios from a balanced equation to calculate amounts) and <strong>percent yield</strong> (comparing actual vs. theoretical amounts).</p>\n                    <p className=\"mt-2 font-medium\">Goal: Calculate Theoretical Yield, then Percent Yield.</p>\n                  </AccordionContent>\n                </AccordionItem>\n                <AccordionItem value=\"item-2\">\n                  <AccordionTrigger className=\"text-xl font-semibold\">O: Organize Information</AccordionTrigger>\n                  <AccordionContent>\n                    <p>First, let's represent the reaction abstractly with a balanced chemical equation:</p>\n                    <div className=\"my-4 p-3 bg-gray-100 rounded-md text-center font-mono\">\n                      C₇H₆O₃ + C₄H₆O₃ &rarr; C₉H₈O₄ + CH₃COOH\n                    </div>\n                     <p className=\"text-sm text-gray-600 text-center mb-4\">(Salicylic Acid + Acetic Anhydride &rarr; Aspirin + Acetic Acid)</p>\n                     <p className=\"text-center text-orange-600 font-semibold\">Self-Check: The equation is balanced. The mole ratio between Salicylic Acid and Aspirin is 1:1.</p>\n                    <div className=\"mt-4 grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div><h4 className=\"font-semibold\">Knowns:</h4>\n                      <ul className=\"list-disc list-inside\">\n                        <li>Actual Yield of Aspirin: 4.8 g</li>\n                        <li>Starting Mass of Salicylic Acid: 5.0 g</li>\n                        <li>Molar Mass of Salicylic Acid: ~138.12 g/mol</li>\n                        <li>Molar Mass of Aspirin: ~180.16 g/mol</li>\n                      </ul></div>\n                       <div><h4 className=\"font-semibold\">Unknowns:</h4>\n                       <ul className=\"list-disc list-inside\">\n                         <li>Theoretical Yield of Aspirin: ? g</li>\n                         <li>Percent Yield: ? %</li>\n                       </ul></div>\n                    </div>\n                  </AccordionContent>\n                </AccordionItem>\n                <AccordionItem value=\"item-3\">\n                  <AccordionTrigger className=\"text-xl font-semibold\">P: Plan Your Approach</AccordionTrigger>\n                  <AccordionContent>\n                    <ol className=\"list-decimal list-inside space-y-2\">\n                      <li>Convert the starting mass of Salicylic Acid (g) to moles.</li>\n                      <li>Use the 1:1 mole ratio to find the moles of Aspirin that could be produced.</li>\n                      <li>Convert the moles of Aspirin to grams. This is your <strong>Theoretical Yield</strong>.</li>\n                      <li>Calculate the <strong>Percent Yield</strong> using the formula: <br />\n                        <code className=\"block text-center mt-2 text-lg bg-gray-100 p-2 rounded\">(Actual Yield / Theoretical Yield) * 100%</code>\n                      </li>\n                    </ol>\n                  </AccordionContent>\n                </AccordionItem>\n                <AccordionItem value=\"item-4\">\n                  <AccordionTrigger className=\"text-xl font-semibold\">S: Solve Step-by-Step</AccordionTrigger>\n                  <AccordionContent className=\"space-y-6\">\n                    {/* Step 1 */}\n                    <div className=\"p-4 border rounded-md\">\n                      <Label htmlFor=\"step1\" className=\"font-semibold text-md\">1. Calculate moles of Salicylic Acid</Label>\n                       <p className=\"text-sm text-gray-600 mb-2\">Formula: moles = mass / molar mass</p>\n                      <div className=\"flex items-center gap-2\">\n                        <Input id=\"step1\" placeholder=\"e.g., 0.036\" type=\"number\" value={step1.answer} onChange={(e) => setStep1({ answer: e.target.value, isCorrect: null })} />\n                        <Button onClick={() => checkAnswer(1, step1.answer, 5.0 / 138.12)}>Check</Button>\n                        {step1.isCorrect === true && <CheckCircle className=\"text-green-500\" />}\n                        {step1.isCorrect === false && <XCircle className=\"text-red-500\" />}\n                      </div>\n                       {step1.isCorrect === false && <p className=\"text-red-600 text-sm mt-1\">Not quite. Remember to divide the mass (5.0 g) by the molar mass (~138.12 g/mol).</p>}\n                    </div>\n                    {/* Step 2 */}\n                    {step1.isCorrect && <div className=\"p-4 border rounded-md\">\n                      <Label htmlFor=\"step2\" className=\"font-semibold text-md\">2. Calculate moles of Aspirin produced</Label>\n                      <p className=\"text-sm text-gray-600 mb-2\">The mole ratio is 1:1.</p>\n                      <div className=\"flex items-center gap-2\">\n                        <Input id=\"step2\" placeholder=\"Moles of Aspirin\" type=\"number\" value={step2.answer} onChange={(e) => setStep2({ answer: e.target.value, isCorrect: null })} />\n                        <Button onClick={() => checkAnswer(2, step2.answer, 5.0 / 138.12)}>Check</Button>\n                        {step2.isCorrect === true && <CheckCircle className=\"text-green-500\" />}\n                        {step2.isCorrect === false && <XCircle className=\"text-red-500\" />}\n                      </div>\n                      {step2.isCorrect === false && <p className=\"text-red-600 text-sm mt-1\">Try again. Since the ratio is 1:1, the moles are the same as in Step 1.</p>}\n                    </div>}\n                    {/* Step 3 */}\n                    {step2.isCorrect && <div className=\"p-4 border rounded-md\">\n                      <Label htmlFor=\"step3\" className=\"font-semibold text-md\">3. Calculate Theoretical Yield of Aspirin (grams)</Label>\n                      <p className=\"text-sm text-gray-600 mb-2\">Formula: mass = moles * molar mass</p>\n                      <div className=\"flex items-center gap-2\">\n                        <Input id=\"step3\" placeholder=\"Grams of Aspirin\" type=\"number\" value={step3.answer} onChange={(e) => setStep3({ answer: e.target.value, isCorrect: null })} />\n                        <Button onClick={() => checkAnswer(3, step3.answer, (5.0 / 138.12) * 180.16)}>Check</Button>\n                        {step3.isCorrect === true && <CheckCircle className=\"text-green-500\" />}\n                        {step3.isCorrect === false && <XCircle className=\"text-red-500\" />}\n                      </div>\n                       {step3.isCorrect === false && <p className=\"text-red-600 text-sm mt-1\">Hint: Multiply the moles from Step 2 by the molar mass of aspirin (~180.16 g/mol).</p>}\n                    </div>}\n                    {/* Step 4 */}\n                    {step3.isCorrect && <div className=\"p-4 border rounded-md bg-green-50\">\n                      <Label htmlFor=\"step4\" className=\"font-semibold text-md\">4. Calculate Percent Yield</Label>\n                      <p className=\"text-sm text-gray-600 mb-2\">Formula: (Actual / Theoretical) * 100%</p>\n                      <div className=\"flex items-center gap-2\">\n                        <Input id=\"step4\" placeholder=\"Percent Yield (%)\" type=\"number\" value={step4.answer} onChange={(e) => setStep4({ answer: e.target.value, isCorrect: null })} />\n                        <Button onClick={() => checkAnswer(4, step4.answer, (4.8 / ((5.0 / 138.12) * 180.16)) * 100)}>Check</Button>\n                        {step4.isCorrect === true && <CheckCircle className=\"text-green-500\" />}\n                        {step4.isCorrect === false && <XCircle className=\"text-red-500\" />}\n                      </div>\n                      {step4.isCorrect === false && <p className=\"text-red-600 text-sm mt-1\">Remember, it's the actual yield (4.8 g) divided by the theoretical yield you calculated in Step 3, all multiplied by 100.</p>}\n                    </div>}\n                    {/* Final Answer */}\n                    {step4.isCorrect && (\n                      <div className=\"mt-6 text-center p-6 bg-green-100 border-2 border-green-600 rounded-lg\">\n                        <h3 className=\"text-2xl font-bold text-green-800\">Congratulations!</h3>\n                        <p className=\"text-lg mt-2\">The percent yield is approximately <strong>73.5%</strong>.</p>\n                        <p className=\"mt-4 text-gray-700\">This means Alex's experiment was 73.5% efficient at converting the starting material into the final product. Now, let's see if you can transfer this skill to new problems.</p>\n                      </div>\n                    )}\n                  </AccordionContent>\n                </AccordionItem>\n              </Accordion>\n            </CardContent>\n          </Card>\n        </section>\n      );\n    }\n    ```\n  </File>\n  <File path=\"components/transfer-problems.tsx\">\n    ```tsx\n    import { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\n    import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n    import { Lightbulb, Forward } from \"lucide-react\";\n\n    export default function TransferProblems() {\n      return (\n        <section aria-labelledby=\"transfer-title\">\n           <div className=\"text-center mb-8\">\n            <h2 id=\"transfer-title\" className=\"text-3xl font-bold text-gray-800\">\n              3. Transfer Your Skills\n            </h2>\n            <p className=\"mt-2 text-md text-gray-600\">Apply the F.O.P.S. model to new situations.</p>\n          </div>\n          <Card className=\"bg-white shadow-lg\">\n            <CardHeader>\n              <CardTitle>Practice Problems</CardTitle>\n              <CardDescription>Test your understanding with near and far transfer problems.</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Tabs defaultValue=\"near\" className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-2\">\n                  <TabsTrigger value=\"near\">📌 Near Transfer</TabsTrigger>\n                  <TabsTrigger value=\"far\">🚀 Far Transfer</TabsTrigger>\n                </TabsList>\n                <TabsContent value=\"near\" className=\"mt-4\">\n                   <div className=\"p-6 border rounded-lg\">\n                     <h3 className=\"font-semibold text-lg\">Ammonia Synthesis</h3>\n                     <p className=\"text-gray-700 mt-2\">\n                       In another experiment, a student synthesizes ammonia (NH₃, molar mass ~17.03 g/mol) from <strong>10.0 g</strong> of nitrogen (N₂, molar mass ~28.02 g/mol) and excess hydrogen. They collect <strong>8.5 g</strong> of ammonia. What is the percent yield?\n                     </p>\n                     <p className=\"mt-4 text-sm font-mono p-2 bg-gray-100 rounded\">Balanced Equation: N₂ + 3H₂ &rarr; 2NH₃</p>\n                      <div className=\"mt-4 p-4 bg-blue-50 border-l-4 border-blue-400\">\n                        <div className=\"flex items-start\">\n                          <Lightbulb className=\"h-5 w-5 text-blue-600 mr-3 flex-shrink-0\" />\n                          <div>\n                            <h4 className=\"font-bold text-blue-800\">Think Aloud</h4>\n                            <p className=\"text-blue-700\">\"This looks familiar. I have a starting mass, a product mass, and a balanced equation. I should follow the same F.O.P.S. steps as before: find moles of N₂, use the mole ratio (1:2) to find moles of NH₃, calculate theoretical yield, and then find the percent yield.\"</p>\n                          </div>\n                        </div>\n                      </div>\n                   </div>\n                </TabsContent>\n                <TabsContent value=\"far\" className=\"mt-4\">\n                   <div className=\"p-6 border rounded-lg\">\n                     <h3 className=\"font-semibold text-lg\">The Cookie Recipe Challenge</h3>\n                     <p className=\"text-gray-700 mt-2\">\n                       A baker's recipe for one dozen cookies requires 2 cups of flour and 1 cup of sugar. You have <strong>15 cups of flour</strong> and <strong>6 cups of sugar</strong> in your pantry. What is the maximum number of <em>dozens</em> of cookies you can bake? If you accidentally burn one dozen, what is your 'percent yield' of edible cookies?\n                     </p>\n                      <div className=\"mt-4 p-4 bg-purple-50 border-l-4 border-purple-400\">\n                        <div className=\"flex items-start\">\n                          <Forward className=\"h-5 w-5 text-purple-600 mr-3 flex-shrink-0\" />\n                          <div>\n                            <h4 className=\"font-bold text-purple-800\">Connecting the Concepts</h4>\n                            <p className=\"text-purple-700\">How is finding the 'limiting ingredient' (the one you'll run out of first) in a recipe structurally similar to finding the limiting reactant in a chemical reaction? Both determine the maximum theoretical yield, whether it's cookies or chemicals!</p>\n                          </div>\n                        </div>\n                      </div>\n                   </div>\n                </TabsContent>\n              </Tabs>\n            </CardContent>\n          </Card>\n        </section>\n      );\n    }\n    ```\n  </File>\n  <File path=\"components/ui/accordion.tsx\">\n    ```tsx\n    \"use client\"\n\n    import * as React from \"react\"\n    import * as AccordionPrimitive from \"@radix-ui/react-accordion\"\n    import { ChevronDown } from \"lucide-react\"\n\n    import { cn } from \"@/lib/utils\"\n\n    const Accordion = AccordionPrimitive.Root\n\n    const AccordionItem = React.forwardRef<\n      React.ElementRef<typeof AccordionPrimitive.Item>,\n      React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n    >(({ className, ...props }, ref) => (\n      <AccordionPrimitive.Item\n        ref={ref}\n        className={cn(\"border-b\", className)}\n        {...props}\n      />\n    ))\n    AccordionItem.displayName = \"AccordionItem\"\n\n    const AccordionTrigger = React.forwardRef<\n      React.ElementRef<typeof AccordionPrimitive.Trigger>,\n      React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n    >(({ className, children, ...props }, ref) => (\n      <AccordionPrimitive.Header className=\"flex\">\n        <AccordionPrimitive.Trigger\n          ref={ref}\n          className={cn(\n            \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n          <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n        </AccordionPrimitive.Trigger>\n      </AccordionPrimitive.Header>\n    ))\n    AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\n    const AccordionContent = React.forwardRef<\n      React.ElementRef<typeof AccordionPrimitive.Content>,\n      React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n    >(({ className, children, ...props }, ref) => (\n      <AccordionPrimitive.Content\n        ref={ref}\n        className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n        {...props}\n      >\n        <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n      </AccordionPrimitive.Content>\n    ))\n\n    AccordionContent.displayName = AccordionPrimitive.Content.displayName\n\n    export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n    ```\n  </File>\n  <File path=\"components/ui/button.tsx\">\n    ```tsx\n    import * as React from \"react\"\n    import { Slot } from \"@radix-ui/react-slot\"\n    import { cva, type VariantProps } from \"class-variance-authority\"\n\n    import { cn } from \"@/lib/utils\"\n\n    const buttonVariants = cva(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n      {\n        variants: {\n          variant: {\n            default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n            destructive:\n              \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n            outline:\n              \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n            secondary:\n              \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n            ghost: \"hover:bg-accent hover:text-accent-foreground\",\n            link: \"text-primary underline-offset-4 hover:underline\",\n          },\n          size: {\n            default: \"h-10 px-4 py-2\",\n            sm: \"h-9 rounded-md px-3\",\n            lg: \"h-11 rounded-md px-8\",\n            icon: \"h-10 w-10\",\n          },\n        },\n        defaultVariants: {\n          variant: \"default\",\n          size: \"default\",\n        },\n      }\n    )\n\n    export interface ButtonProps\n      extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n        VariantProps<typeof buttonVariants> {\n      asChild?: boolean\n    }\n\n    const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n      ({ className, variant, size, asChild = false, ...props }, ref) => {\n        const Comp = asChild ? Slot : \"button\"\n        return (\n          <Comp\n            className={cn(buttonVariants({ variant, size, className }))}\n            ref={ref}\n            {...props}\n          />\n        )\n      }\n    )\n    Button.displayName = \"Button\"\n\n    export { Button, buttonVariants }\n    ```\n  </File>\n  <File path=\"components/ui/card.tsx\">\n    ```tsx\n    import * as React from \"react\"\n\n    import { cn } from \"@/lib/utils\"\n\n    const Card = React.forwardRef<\n      HTMLDivElement,\n      React.HTMLAttributes<HTMLDivElement>\n    >(({ className, ...props }, ref) => (\n      <div\n        ref={ref}\n        className={cn(\n          \"rounded-xl border bg-card text-card-foreground shadow\",\n          className\n        )}\n        {...props}\n      />\n    ))\n    Card.displayName = \"Card\"\n\n    const CardHeader = React.forwardRef<\n      HTMLDivElement,\n      React.HTMLAttributes<HTMLDivElement>\n    >(({ className, ...props }, ref) => (\n      <div\n        ref={ref}\n        className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n        {...props}\n      />\n    ))\n    CardHeader.displayName = \"CardHeader\"\n\n    const CardTitle = React.forwardRef<\n      HTMLParagraphElement,\n      React.HTMLAttributes<HTMLHeadingElement>\n    >(({ className, ...props }, ref) => (\n      <h3\n        ref={ref}\n        className={cn(\"font-semibold leading-none tracking-tight\", className)}\n        {...props}\n      />\n    ))\n    CardTitle.displayName = \"CardTitle\"\n\n    const CardDescription = React.forwardRef<\n      HTMLParagraphElement,\n      React.HTMLAttributes<HTMLParagraphElement>\n    >(({ className, ...props }, ref) => (\n      <p\n        ref={ref}\n        className={cn(\"text-sm text-muted-foreground\", className)}\n        {...props}\n      />\n    ))\n    CardDescription.displayName = \"CardDescription\"\n\n    const CardContent = React.forwardRef<\n      HTMLDivElement,\n      React.HTMLAttributes<HTMLDivElement>\n    >(({ className, ...props }, ref) => (\n      <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n    ))\n    CardContent.displayName = \"CardContent\"\n\n    const CardFooter = React.forwardRef<\n      HTMLDivElement,\n      React.HTMLAttributes<HTMLDivElement>\n    >(({ className, ...props }, ref) => (\n      <div\n        ref={ref}\n        className={cn(\"flex items-center p-6 pt-0\", className)}\n        {...props}\n      />\n    ))\n    CardFooter.displayName = \"CardFooter\"\n\n    export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n    ```\n  </File>\n  <File path=\"components/ui/input.tsx\">\n    ```tsx\n    import * as React from \"react\"\n\n    import { cn } from \"@/lib/utils\"\n\n    export interface InputProps\n      extends React.InputHTMLAttributes<HTMLInputElement> {}\n\n    const Input = React.forwardRef<HTMLInputElement, InputProps>(\n      ({ className, type, ...props }, ref) => {\n        return (\n          <input\n            type={type}\n            className={cn(\n              \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          />\n        )\n      }\n    )\n    Input.displayName = \"Input\"\n\n    export { Input }\n    ```\n  </File>\n  <File path=\"components/ui/label.tsx\">\n    ```tsx\n    \"use client\"\n\n    import * as React from \"react\"\n    import * as LabelPrimitive from \"@radix-ui/react-label\"\n    import { cva, type VariantProps } from \"class-variance-authority\"\n\n    import { cn } from \"@/lib/utils\"\n\n    const labelVariants = cva(\n      \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n    )\n\n    const Label = React.forwardRef<\n      React.ElementRef<typeof LabelPrimitive.Root>,\n      React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n        VariantProps<typeof labelVariants>\n    >(({ className, ...props }, ref) => (\n      <LabelPrimitive.Root\n        ref={ref}\n        className={cn(labelVariants(), className)}\n        {...props}\n      />\n    ))\n    Label.displayName = LabelPrimitive.Root.displayName\n\n    export { Label }\n    ```\n  </File>\n  <File path=\"components/ui/tabs.tsx\">\n    ```tsx\n    \"use client\"\n\n    import * as React from \"react\"\n    import * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\n    import { cn } from \"@/lib/utils\"\n\n    const Tabs = TabsPrimitive.Root\n\n    const TabsList = React.forwardRef<\n      React.ElementRef<typeof TabsPrimitive.List>,\n      React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n    >(({ className, ...props }, ref) => (\n      <TabsPrimitive.List\n        ref={ref}\n        className={cn(\n          \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n          className\n        )}\n        {...props}\n      />\n    ))\n    TabsList.displayName = TabsPrimitive.List.displayName\n\n    const TabsTrigger = React.forwardRef<\n      React.ElementRef<typeof TabsPrimitive.Trigger>,\n      React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n    >(({ className, ...props }, ref) => (\n      <TabsPrimitive.Trigger\n        ref={ref}\n        className={cn(\n          \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n          className\n        )}\n        {...props}\n      />\n    ))\n    TabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\n    const TabsContent = React.forwardRef<\n      React.ElementRef<typeof TabsPrimitive.Content>,\n      React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n    >(({ className, ...props }, ref) => (\n      <TabsPrimitive.Content\n        ref={ref}\n        className={cn(\n          \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n          className\n        )}\n        {...props}\n      />\n    ))\n    TabsContent.displayName = TabsPrimitive.Content.displayName\n\n    export { Tabs, TabsList, TabsTrigger, TabsContent }\n    ```\n  </File>\n  <File path=\"lib/utils.ts\">\n    ```ts\n    import { type ClassValue, clsx } from \"clsx\"\n    import { twMerge } from \"tailwind-merge\"\n\n    export function cn(...inputs: ClassValue[]) {\n      return twMerge(clsx(inputs))\n    }\n    ```\n  </File>\n  <File path=\"app/globals.css\">\n    ```css\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n\n    @layer base {\n      :root {\n        --background: 0 0% 100%;\n        --foreground: 222.2 84% 4.9%;\n        --card: 0 0% 100%;\n        --card-foreground: 222.2 84% 4.9%;\n        --popover: 0 0% 100%;\n        --popover-foreground: 222.2 84% 4.9%;\n        --primary: 222.2 47.4% 11.2%;\n        --primary-foreground: 210 40% 98%;\n        --secondary: 210 40% 96.1%;\n        --secondary-foreground: 222.2 47.4% 11.2%;\n        --muted: 210 40% 96.1%;\n        --muted-foreground: 215.4 16.3% 46.9%;\n        --accent: 210 40% 96.1%;\n        --accent-foreground: 222.2 47.4% 11.2%;\n        --destructive: 0 84.2% 60.2%;\n        --destructive-foreground: 210 40% 98%;\n        --border: 214.3 31.8% 91.4%;\n        --input: 214.3 31.8% 91.4%;\n        --ring: 222.2 84% 4.9%;\n        --radius: 0.5rem;\n      }\n\n      .dark {\n        --background: 222.2 84% 4.9%;\n        --foreground: 210 40% 98%;\n        --card: 222.2 84% 4.9%;\n        --card-foreground: 210 40% 98%;\n        --popover: 222.2 84% 4.9%;\n        --popover-foreground: 210 40% 98%;\n        --primary: 210 40% 98%;\n        --primary-foreground: 222.2 47.4% 11.2%;\n        --secondary: 217.2 32.6% 17.5%;\n        --secondary-foreground: 210 40% 98%;\n        --muted: 217.2 32.6% 17.5%;\n        --muted-foreground: 215 20.2% 65.1%;\n        --accent: 217.2 32.6% 17.5%;\n        --accent-foreground: 210 40% 98%;\n        --destructive: 0 62.8% 30.6%;\n        --destructive-foreground: 210 40% 98%;\n        --border: 217.2 32.6% 17.5%;\n        --input: 217.2 32.6% 17.5%;\n        --ring: 212.7 26.8% 83.9%;\n      }\n    }\n\n    @layer base {\n      * {\n        @apply border-border;\n      }\n      body {\n        @apply bg-background text-foreground;\n      }\n    }\n\n    @layer utilities {\n      .animate-accordion-down {\n        animation: accordion-down 0.2s ease-out;\n      }\n      .animate-accordion-up {\n        animation: accordion-up 0.2s ease-out;\n      }\n      @keyframes accordion-down {\n        from { height: 0; }\n        to { height: var(--radix-accordion-content-height); }\n      }\n      @keyframes accordion-up {\n        from { height: var(--radix-accordion-content-height); }\n        to { height: 0; }\n      }\n    }\n    ```\n  </File>\n  <File path=\"package.json\">\n    ```json\n    {\n      \"name\": \"chem-tutor\",\n      \"version\": \"0.1.0\",\n      \"private\": true,\n      \"scripts\": {\n        \"dev\": \"next dev\",\n        \"build\": \"next build\",\n        \"start\": \"next start\",\n        \"lint\": \"next lint\"\n      },\n      \"dependencies\": {\n        \"@radix-ui/react-accordion\": \"^1.1.2\",\n        \"@radix-ui/react-label\": \"^2.0.2\",\n        \"@radix-ui/react-slot\": \"^1.0.2\",\n        \"@radix-ui/react-tabs\": \"^1.0.4\",\n        \"class-variance-authority\": \"^0.7.0\",\n        \"clsx\": \"^2.1.0\",\n        \"lucide-react\": \"^0.372.0\",\n        \"next\": \"14.2.2\",\n        \"react\": \"^18\",\n        \"react-dom\": \"^18\",\n        \"tailwind-merge\": \"^2.3.0\",\n        \"tailwindcss-animate\": \"^1.0.7\"\n      },\n      \"devDependencies\": {\n        \"@types/node\": \"^20\",\n        \"@types/react\": \"^18\",\n        \"@types/react-dom\": \"^18\",\n        \"eslint\": \"^8\",\n        \"eslint-config-next\": \"14.2.2\",\n        \"postcss\": \"^8\",\n        \"tailwindcss\": \"^3.4.1\",\n        \"typescript\": \"^5\"\n      }\n    }\n    ```\n  </File>\n  <File path=\"tailwind.config.ts\">\n    ```ts\n    import type { Config } from \"tailwindcss\"\n\n    const config = {\n      darkMode: [\"class\"],\n      content: [\n        './pages/**/*.{ts,tsx}',\n        './components/**/*.{ts,tsx}',\n        './app/**/*.{ts,tsx}',\n        './src/**/*.{ts,tsx}',\n      ],\n      prefix: \"\",\n      theme: {\n        container: {\n          center: true,\n          padding: \"2rem\",\n          screens: {\n            \"2xl\": \"1400px\",\n          },\n        },\n        extend: {\n          colors: {\n            border: \"hsl(var(--border))\",\n            input: \"hsl(var(--input))\",\n            ring: \"hsl(var(--ring))\",\n            background: \"hsl(var(--background))\",\n            foreground: \"hsl(var(--foreground))\",\n            primary: {\n              DEFAULT: \"hsl(var(--primary))\",\n              foreground: \"hsl(var(--primary-foreground))\",\n            },\n            secondary: {\n              DEFAULT: \"hsl(var(--secondary))\",\n              foreground: \"hsl(var(--secondary-foreground))\",\n            },\n            destructive: {\n              DEFAULT: \"hsl(var(--destructive))\",\n              foreground: \"hsl(var(--destructive-foreground))\",\n            },\n            muted: {\n              DEFAULT: \"hsl(var(--muted))\",\n              foreground: \"hsl(var(--muted-foreground))\",\n            },\n            accent: {\n              DEFAULT: \"hsl(var(--accent))\",\n              foreground: \"hsl(var(--accent-foreground))\",\n            },\n            popover: {\n              DEFAULT: \"hsl(var(--popover))\",\n              foreground: \"hsl(var(--popover-foreground))\",\n            },\n            card: {\n              DEFAULT: \"hsl(var(--card))\",\n              foreground: \"hsl(var(--card-foreground))\",\n            },\n          },\n          borderRadius: {\n            lg: \"var(--radius)\",\n            md: \"calc(var(--radius) - 2px)\",\n            sm: \"calc(var(--radius) - 4px)\",\n          },\n          keyframes: {\n            \"accordion-down\": {\n              from: { height: \"0\" },\n              to: { height: \"var(--radix-accordion-content-height)\" },\n            },\n            \"accordion-up\": {\n              from: { height: \"var(--radix-accordion-content-height)\" },\n              to: { height: \"0\" },\n            },\n          },\n          animation: {\n            \"accordion-down\": \"accordion-down 0.2s ease-out\",\n            \"accordion-up\": \"accordion-up 0.2s ease-out\",\n          },\n        },\n      },\n      plugins: [require(\"tailwindcss-animate\")],\n    } satisfies Config\n\n    export default config\n    ```\n  </File>\n</CodeProject>"
}