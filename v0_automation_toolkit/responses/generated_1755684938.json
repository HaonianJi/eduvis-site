{
  "content": "<Thinking>\n## Plan for the Chemistry Tutoring Webpage\n\n### 1. Project Structure\n\nI'll create a single-page application using Next.js App Router. The structure will be:\n\n-   `app/layout.tsx`: Root layout with Tailwind CSS setup.\n-   `app/page.tsx`: The main page component. This will be a Server Component containing the overall structure and static content.\n-   `components/`: Directory for reusable components.\n    -   `icons.tsx`: A file to hold all custom SVG icons (e.g., lab assistant, beaker, F.O.P.S. icons) for better organization.\n    -   `interactive-practice.tsx`: A Client Component (`\"use client\"`) for the scaffolded practice section, which requires state for user input and showing/hiding answers.\n-   `components/ui/`: Standard directory for shadcn/ui components.\n-   `lib/utils.ts`: Standard shadcn/ui utility file for `cn`.\n-   `tailwind.config.ts`, `postcss.config.js`, `globals.css`: Standard configuration files for Tailwind CSS.\n\n### 2. Styling and Visuals\n\n-   **Framework**: I will use Tailwind CSS for styling.\n-   **Component Library**: I'll use `shadcn/ui` for pre-built, accessible components like `Card`, `Button`, `Input`, and `Accordion`. This ensures a clean, modern, and consistent look.\n-   **Color Palette**: A professional and academic color scheme. I'll use neutral grays for the background and text, with a calming teal or green as an accent color for headings, buttons, and important elements, avoiding the default blue/indigo.\n-   **Layout**: The page will be a single, scrollable column with a maximum width for readability. Content will be broken down into logical sections using `Card` components to create clear visual separation between the introduction, core problem, practice, and transfer tasks.\n-   **Visual Aids**: I'll create simple SVG icons in `components/icons.tsx` to represent:\n    -   A friendly lab assistant character.\n    -   Icons for each step of the F.O.P.S. strategy (Find, Organize, Plan, Solve).\n    -   A beaker icon for the introductory context.\n    -   A lightbulb icon for hints.\n-   **Responsiveness**: The design will be fully responsive, ensuring a great user experience on both desktop and mobile devices using Tailwind's responsive prefixes.\n\n### 3. Page Flow and Pedagogical Strategy\n\nThe webpage will guide the student through a structured learning path:\n\n1.  **Introduction (Contextualize - Concrete)**:\n    -   Start with a relatable scenario: a simple lab experiment.\n    -   Introduce a \"Lab Assistant\" character to act as a guide.\n    -   Use visuals (beaker icon) to connect the abstract problem to a physical context.\n\n2.  **The Core Problem (Guided Instruction - Representational & Abstract)**:\n    -   Clearly state the main problem.\n    -   Introduce the **F.O.P.S.** (Find, Organize, Plan, Solve) strategy as a mental model for problem-solving. Each step will have its own icon.\n    -   Walk through the F.O.P.S. process step-by-step to solve the main problem.\n    -   Use a \"Think Aloud\" style of writing to model expert thinking.\n    -   Include a **Metacognitive Check** section to encourage students to reflect on the plausibility of their answer.\n\n3.  **Interactive Practice (Scaffolded Practice)**:\n    -   This section will be an interactive Client Component (`interactive-practice.tsx`).\n    -   Present a similar problem.\n    -   Provide input fields for the student to fill out the steps.\n    -   Use `useState` to manage user input and the visibility of the solution.\n    -   A \"Check Answer\" button will provide immediate feedback.\n\n4.  **Transfer Problems (Assess & Reinforce)**:\n    -   **Near-Transfer Problem**: A problem with a different context but the *exact same* underlying proportional reasoning structure.\n    -   **Far-Transfer Problem**: A problem from a different area of chemistry (Gas Laws) that *looks* different but shares the same core reasoning pattern (proportionality/ratios).\n    -   Both problems will be presented within an `Accordion` component, with the problem as the trigger and the \"Hint\" and \"Solution\" as the content. This prevents students from seeing the answer accidentally.\n\n5.  **Conclusion & Reflection (Metacognition)**:\n    -   Summarize the key takeaway: the F.O.P.S. strategy is a transferable skill.\n    -   Pose reflective questions to encourage students to internalize the concepts.\n\n### 4. Frameworks and Libraries\n\n-   **Framework**: Next.js 14 (App Router).\n-   **Styling**: Tailwind CSS.\n-   **UI Components**: shadcn/ui.\n-   **Language**: TypeScript.\n-   **Icons**: Custom SVGs within a React component.\n\n### 5. Caveats and Implementation Details\n\n-   I will provide instructions for setting up a new Next.js project and installing the necessary `shadcn/ui` components.\n-   The interactive component will be kept lean and focused on its specific task, as per the instructions.\n-   All components will be designed with accessibility in mind, leveraging the strengths of shadcn/ui.\n-   Code will be well-commented where necessary to explain the structure and logic.\n\nThis plan covers all the user's requirements, focusing on a structured, pedagogically sound, and interactive learning experience. It implements the specified strategies (CRA, F.O.P.S., near/far transfer) within a modern, responsive web application.\n\n</Thinking>\n\n<CodeProject>\n<Step>\n### Set up your project\n\nFirst, create a new Next.js project with TypeScript and Tailwind CSS.\n\n```sh\nnpx create-next-app@latest . --typescript --eslint --tailwind --app --turbopack --yes\n```\n</Step>\n<Step>\n### Configure shadcn/ui\n\nInitialize shadcn/ui in your project.\n\n```sh\nnpx shadcn-ui@latest init\n```\n\nYou'll be asked a few questions. Choose the following options:\n\n```txt\nWould you like to use TypeScript (recommended)? yes\nWhich style would you like to use? › Default\nWhich color would you like to use as base color? › Slate\nWhere is your global CSS file? › app/globals.css\nDo you want to use CSS variables for colors? › yes\nWhere is your tailwind.config.js located? › tailwind.config.js\nConfigure the import alias for components: › @/components\nConfigure the import alias for utils: › @/lib/utils\nAre you using React Server Components? › yes\nWrite configuration to components.json. Proceed? › yes\n```\n\nNow, add the `card`, `button`, `input`, `accordion`, and `separator` components.\n\n```sh\nnpx shadcn-ui@latest add card button input accordion separator\n```\n</Step>\n<Step>\n### Create Custom Icons\n\nCreate a new file `components/icons.tsx` to store the SVG icons we'll use throughout the application. This keeps our main page component clean.\n\n```tsx file=\"components/icons.tsx\"\nimport { SVGProps } from 'react'\n\nexport function LabAssistantIcon(props: SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <path d=\"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\" />\n      <path d=\"M18 8c-1.5-3.5-5-5-5-5\" />\n      <path d=\"M18 8h-2.5\" />\n      <path d=\"M6 8c1.5-3.5 5-5 5-5\" />\n      <path d=\"M6 8h2.5\" />\n      <path d=\"M12 14c-2.67 0-8 1.34-8 4h16c0-2.66-5.33-4-8-4z\" />\n    </svg>\n  )\n}\n\nexport function BeakerIcon(props: SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <path d=\"M4.5 3h15\" />\n      <path d=\"M6 3v16c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V3\" />\n      <path d=\"M6 14h12\" />\n    </svg>\n  )\n}\n\nexport function SearchIcon(props: SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <circle cx=\"11\" cy=\"11\" r=\"8\" />\n      <line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\" />\n    </svg>\n  )\n}\n\nexport function ListOrderedIcon(props: SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <line x1=\"10\" x2=\"21\" y1=\"6\" y2=\"6\" />\n      <line x1=\"10\" x2=\"21\" y1=\"12\" y2=\"12\" />\n      <line x1=\"10\" x2=\"21\" y1=\"18\" y2=\"18\" />\n      <path d=\"M4 6h1v4\" />\n      <path d=\"M4 10h2\" />\n      <path d=\"M6 18H4c0-1 2-2 2-3s-1-1.5-2-1\" />\n    </svg>\n  )\n}\n\nexport function WaypointsIcon(props: SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <circle cx=\"12\" cy=\"4.5\" r=\"2.5\" />\n      <path d=\"m12 11.5-1.5 2.5\" />\n      <circle cx=\"6\" cy=\"19.5\" r=\"2.5\" />\n      <path d=\"M12 11.5 10 22\" />\n      <circle cx=\"18\" cy=\"19.5\" r=\"2.5\" />\n      <path d=\"m12 11.5 6 10.5\" />\n    </svg>\n  )\n}\n\nexport function CalculatorIcon(props: SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <rect x=\"4\" y=\"2\" width=\"16\" height=\"20\" rx=\"2\" />\n      <line x1=\"8\" x2=\"16\" y1=\"6\" y2=\"6\" />\n      <line x1=\"16\" x2=\"16\" y1=\"14\" y2=\"18\" />\n      <path d=\"M16 10h.01\" />\n      <path d=\"M12 10h.01\" />\n      <path d=\"M8 10h.01\" />\n      <path d=\"M12 14h.01\" />\n      <path d=\"M8 14h.01\" />\n      <path d=\"M12 18h.01\" />\n      <path d=\"M8 18h.01\" />\n    </svg>\n  )\n}\n\nexport function LightbulbIcon(props: SVGProps<SVGSVGElement>) {\n    return (\n      <svg\n        {...props}\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      >\n        <path d=\"M15 14c.2-1 .7-1.7 1.5-2.5 1-.9 1.5-2.2 1.5-3.5A6 6 0 0 0 6 8c0 1 .2 2.2 1.5 3.5.7.7 1.3 1.5 1.5 2.5\" />\n        <path d=\"M9 18h6\" />\n        <path d=\"M10 22h4\" />\n      </svg>\n    )\n  }\n```\n</Step>\n<Step>\n### Create the Interactive Practice Component\n\nNext, create the client component for the interactive practice section. This component will manage its own state for the user's answers.\n\nCreate a new file at `components/interactive-practice.tsx`.\n\n```tsx file=\"components/interactive-practice.tsx\"\n'use client'\n\nimport { useState } from 'react'\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\n\nexport function InteractivePractice() {\n  const [reactant, setReactant] = useState('')\n  const [product, setProduct] = useState('')\n  const [showSolution, setShowSolution] = useState(false)\n\n  const correctAnswer = '30'\n  const isCorrect = product.trim() === correctAnswer\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Scaffolded Practice</CardTitle>\n        <CardDescription>\n          Time to try one on your own! A reaction uses 5.0 g of reactant B to\n          produce 15.0 g of product C. How much product is made from 10.0 g of\n          reactant B?\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"reactant\">\n            Organize: What's the known reactant-to-product ratio?\n          </Label>\n          <Input\n            id=\"reactant\"\n            placeholder=\"e.g., 5.0 g B to 15.0 g C\"\n            value={reactant}\n            onChange={(e) => setReactant(e.target.value)}\n            disabled={showSolution}\n          />\n        </div>\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"product\">\n            Solve: Calculate the final mass of product C.\n          </Label>\n          <Input\n            id=\"product\"\n            placeholder=\"Enter final mass in grams\"\n            value={product}\n            onChange={(e) => setProduct(e.target.value)}\n            disabled={showSolution}\n          />\n        </div>\n      </CardContent>\n      <CardFooter className=\"flex flex-col items-start gap-4 sm:flex-row sm:items-center\">\n        <Button onClick={() => setShowSolution(true)}>\n          {showSolution ? 'Solution Revealed' : 'Check Answer'}\n        </Button>\n        {showSolution && (\n          <div className=\"flex items-center gap-2\">\n            {isCorrect ? (\n              <span className=\"text-sm font-semibold text-green-600\">\n                Correct! The answer is 30.0 g.\n              </span>\n            ) : (\n              <span className=\"text-sm font-semibold text-red-600\">\n                Not quite. The correct answer is 30.0 g.\n              </span>\n            )}\n          </div>\n        )}\n      </CardFooter>\n      {showSolution && (\n        <CardContent>\n          <p className=\"text-sm text-muted-foreground\">\n            <span className=\"font-semibold\">Explanation:</span> The mass ratio\n            of B to C is 5:15, which simplifies to 1:3. For every 1 gram of B,\n            you get 3 grams of C. Therefore, 10.0 g of B will produce 10.0 * 3 =\n            30.0 g of C.\n          </p>\n        </CardContent>\n      )}\n    </Card>\n  )\n}\n```\n</Step>\n<Step>\n### Build the Main Page\n\nFinally, replace the contents of `app/page.tsx` with the full layout for the educational webpage. This server component will import and use the icons and the interactive practice component you just created.\n\n```tsx file=\"app/page.tsx\"\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card'\nimport { Separator } from '@/components/ui/separator'\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from '@/components/ui/accordion'\nimport {\n  LabAssistantIcon,\n  BeakerIcon,\n  SearchIcon,\n  ListOrderedIcon,\n  WaypointsIcon,\n  CalculatorIcon,\n  LightbulbIcon\n} from '@/components/icons'\nimport { InteractivePractice } from '@/components/interactive-practice'\n\nexport default function ChemistryPage() {\n  return (\n    <main className=\"flex min-h-screen flex-col items-center bg-slate-50 p-4 sm:p-8 md:p-12\">\n      <div className=\"w-full max-w-4xl space-y-8\">\n        {/* Section 1: Introduction & Context */}\n        <header className=\"text-center\">\n          <h1 className=\"text-4xl font-bold tracking-tight text-slate-900 sm:text-5xl\">\n            Mastering Chemistry Problem-Solving\n          </h1>\n          <p className=\"mt-4 text-lg text-slate-600\">\n            From Concrete Examples to Abstract Reasoning\n          </p>\n        </header>\n\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center gap-4\">\n              <LabAssistantIcon className=\"h-10 w-10 text-teal-600\" />\n              <div>\n                <CardTitle>Meet Your Guide!</CardTitle>\n                <CardDescription>\n                  Hi, I'm Leo! Let's explore chemistry together.\n                </CardDescription>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent className=\"flex flex-col items-center gap-6 text-center sm:flex-row sm:text-left\">\n            <BeakerIcon className=\"h-20 w-20 flex-shrink-0 text-teal-500\" />\n            <p>\n              Ever wonder how scientists predict the outcome of a reaction? It's\n              not magic—it's about understanding relationships! We'll start with\n              a core problem and learn a powerful strategy to solve it and many\n              others.\n            </p>\n          </CardContent>\n        </Card>\n\n        <Separator />\n\n        {/* Section 2: The Core Problem & F.O.P.S. Strategy */}\n        <section>\n          <h2 className=\"mb-4 text-3xl font-bold text-slate-800\">\n            The Core Problem\n          </h2>\n          <Card className=\"bg-teal-50 border-teal-200\">\n            <CardHeader>\n              <CardTitle>Problem Statement</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-lg font-medium text-slate-900\">\n                A reaction produces 12.0 g of a compound when 3.0 g of reactant\n                A is used. The mass ratio between product and reactant is 4:1.\n                How much product will form from 7.5 g of A?\n              </p>\n            </CardContent>\n          </Card>\n\n          <div className=\"mt-6 space-y-6\">\n            <h3 className=\"text-2xl font-semibold\">\n              The F.O.P.S. Strategy\n            </h3>\n            <div className=\"grid gap-4 md:grid-cols-2\">\n              {fopsSteps.map((step) => (\n                <Card key={step.title}>\n                  <CardHeader className=\"flex flex-row items-center justify-between\">\n                    <CardTitle>{step.title}</CardTitle>\n                    {step.icon}\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"font-semibold text-teal-700\">\n                      Think Aloud: \"{step.thought}\"\n                    </p>\n                    <p className=\"mt-2 text-sm text-slate-600\">{step.action}</p>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n            <Card className=\"mt-4 bg-green-50\">\n                <CardHeader>\n                    <CardTitle>Metacognitive Check</CardTitle>\n                </CardHeader>\n                <CardContent>\n                    <p><strong>Does my answer make sense?</strong> I started with 7.5 g of reactant, which is more than the initial 3.0 g. So, my final product mass (30.0 g) should be more than the initial 12.0 g. It is! The answer is plausible.</p>\n                </CardContent>\n            </Card>\n          </div>\n        </section>\n\n        <Separator />\n\n        {/* Section 3: Interactive Practice */}\n        <section>\n            <h2 className=\"mb-4 text-3xl font-bold text-slate-800\">Your Turn to Practice</h2>\n            <InteractivePractice />\n        </section>\n\n        <Separator />\n\n        {/* Section 4 & 5: Transfer Problems */}\n        <section>\n          <h2 className=\"mb-4 text-3xl font-bold text-slate-800\">\n            Transfer Your Skills\n          </h2>\n          <p className=\"mb-4 text-slate-600\">\n            True understanding means you can apply a concept in new situations.\n            Let's test your skills!\n          </p>\n          <Accordion type=\"single\" collapsible className=\"w-full\">\n            <AccordionItem value=\"item-1\">\n              <AccordionTrigger className=\"text-xl font-semibold\">\n                📌 Near-Transfer Problem\n              </AccordionTrigger>\n              <AccordionContent className=\"space-y-4 pt-4\">\n                <p>\n                  <strong>Problem:</strong> In a different reaction, it takes\n                  2.5 grams of hydrogen to produce 22.5 grams of water. How\n                  many grams of water can be made from 6.0 grams of hydrogen?\n                </p>\n                <Accordion type=\"single\" collapsible>\n                    <AccordionItem value=\"hint-1\">\n                        <AccordionTrigger className=\"text-sm font-semibold text-teal-700\">\n                            <LightbulbIcon className=\"mr-2 h-4 w-4\" />\n                            Need a hint?\n                        </AccordionTrigger>\n                        <AccordionContent>\n                           This problem has the same structure as the first one. Use the F.O.P.S. strategy! Find the mass ratio first.\n                        </AccordionContent>\n                    </AccordionItem>\n                    <AccordionItem value=\"solution-1\">\n                        <AccordionTrigger className=\"text-sm font-semibold text-teal-700\">\n                            Show Solution\n                        </AccordionTrigger>\n                        <AccordionContent>\n                           <strong>Organize:</strong> The ratio is 2.5 g hydrogen : 22.5 g water.\n                           <br />\n                           <strong>Plan:</strong> Find the multiplier: 22.5 / 2.5 = 9. So, 1 g of hydrogen produces 9 g of water.\n                           <br />\n                           <strong>Solve:</strong> 6.0 g hydrogen * 9 = 54.0 g of water.\n                        </AccordionContent>\n                    </AccordionItem>\n                </Accordion>\n              </AccordionContent>\n            </AccordionItem>\n            <AccordionItem value=\"item-2\">\n              <AccordionTrigger className=\"text-xl font-semibold\">\n                📌 Far-Transfer Problem\n              </AccordionTrigger>\n              <AccordionContent className=\"space-y-4 pt-4\">\n                <p>\n                  <strong>Problem:</strong> A gas occupies 10.0 L at 2.0 atm of\n                  pressure. What is its new volume if the pressure is increased\n                  to 4.0 atm, assuming temperature remains constant?\n                </p>\n                 <Accordion type=\"single\" collapsible>\n                    <AccordionItem value=\"hint-2\">\n                        <AccordionTrigger className=\"text-sm font-semibold text-teal-700\">\n                            <LightbulbIcon className=\"mr-2 h-4 w-4\" />\n                            Need a hint?\n                        </AccordionTrigger>\n                        <AccordionContent>\n                           This looks different, but it's still about a relationship! Pressure and volume are inversely related (as one goes up, the other goes down). The relationship is defined by Boyle's Law: P₁V₁ = P₂V₂. Can you solve for the new volume (V₂)?\n                        </AccordionContent>\n                    </AccordionItem>\n                    <AccordionItem value=\"solution-2\">\n                        <AccordionTrigger className=\"text-sm font-semibold text-teal-700\">\n                           Show Solution\n                        </AccordionTrigger>\n                        <AccordionContent>\n                           <strong>Organize:</strong> P₁ = 2.0 atm, V₁ = 10.0 L, P₂ = 4.0 atm, V₂ = ?\n                           <br />\n                           <strong>Plan:</strong> Rearrange the formula: V₂ = (P₁V₁) / P₂.\n                           <br />\n                           <strong>Solve:</strong> V₂ = (2.0 atm * 10.0 L) / 4.0 atm = 20.0 / 4.0 = 5.0 L.\n                           <br/>\n                           <strong>Connection:</strong> Just like the mass ratio, this problem uses a defined relationship (P₁V₁ = P₂V₂) to predict an outcome. The core scientific reasoning is the same!\n                        </AccordionContent>\n                    </AccordionItem>\n                </Accordion>\n              </AccordionContent>\n            </AccordionItem>\n          </Accordion>\n        </section>\n\n        <Separator />\n        \n        {/* Section 6: Conclusion */}\n        <section className=\"text-center\">\n            <h2 className=\"text-3xl font-bold text-slate-800\">Congratulations!</h2>\n            <p className=\"mt-4 text-lg text-slate-600\">You've learned that a single problem-solving strategy, like F.O.P.S., can help you tackle different types of challenges. The key is to find the underlying principle and build a plan. Keep practicing this way of thinking!</p>\n        </section>\n      </div>\n    </main>\n  )\n}\n\nconst fopsSteps = [\n    {\n      title: 'F - Find',\n      icon: <SearchIcon className=\"h-6 w-6 text-slate-500\" />,\n      thought: \"What's the core principle here?\",\n      action: 'The problem is about a fixed relationship, or ratio, between a reactant and a product. This is based on the Law of Conservation of Mass.',\n    },\n    {\n      title: 'O - Organize',\n      icon: <ListOrderedIcon className=\"h-6 w-6 text-slate-500\" />,\n      thought: 'What information do I have, and what do I need?',\n      action:\n        'Known: 3.0 g of A makes 12.0 g of product. The ratio is 4:1. Unknown: How much product from 7.5 g of A?',\n    },\n    {\n      title: 'P - Plan',\n      icon: <WaypointsIcon className=\"h-6 w-6 text-slate-500\" />,\n      thought: 'How will I get from my knowns to my unknown?',\n      action:\n        'The ratio of product to reactant is 4:1. This means for every 1 gram of reactant A, I get 4 grams of product. I can use this ratio as a multiplier.',\n    },\n    {\n      title: 'S - Solve',\n      icon: <CalculatorIcon className=\"h-6 w-6 text-slate-500\" />,\n      thought: 'Time to do the math.',\n      action: 'Take the new amount of reactant and multiply it by the ratio: 7.5 g of A * 4 = 30.0 g of product.',\n    },\n  ];\n```\n</Step>\n<Step>\n### Run your application\n\nYou are now ready to run your educational webpage.\n\n```sh\nnpm run dev\n```\n\nOpen your browser to `http://localhost:3000` to see the complete, interactive chemistry lesson.\n</Step>\n</CodeProject>"
}