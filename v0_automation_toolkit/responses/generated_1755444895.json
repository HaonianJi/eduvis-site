{
  "content": "Of course. Here is a plan for the educational webpage, followed by the code to create it.\n\n<Thinking>\n### 1. Project Structure\n\nI'll create a single-page Next.js application designed to teach a specific chemistry problem. The file structure will be modular to keep components lean and maintainable.\n\n-   `app/layout.tsx`: Root layout, sets up fonts and basic page structure.\n-   `app/page.tsx`: The main page component that assembles all the instructional sections.\n-   `components/`: Directory for the various instructional sections.\n    -   `IntroductionSection.tsx`: Sets the real-world context of aspirin synthesis.\n    -   `ConceptualStepsSection.tsx`: Implements the Concrete-Representational-Abstract (CRA) model.\n    -   `ProblemSolvingSection.tsx`: Guides students through the F.O.P.S. strategy for the main problem.\n    -   `PracticeSection.tsx`: An interactive, client-side component for scaffolded practice.\n    -   `TransferProblemsSection.tsx`: A client-side component containing the near and far transfer problems with answer checking.\n    -   `MetacognitionSection.tsx`: Provides metacognitive prompts using an accordion.\n-   `components/ui/`: Will house the shadcn/ui components (`Accordion`, `Button`, `Card`, `Input`, `Separator`).\n-   `lib/utils.ts`: Standard utility file for `cn` from shadcn/ui.\n-   `public/`: Will contain placeholder images for the lab setup and molecular models.\n-   Standard Next.js config files: `tailwind.config.ts`, `next.config.mjs`, etc.\n\n### 2. Styling\n\n-   **Framework**: Tailwind CSS for utility-first styling.\n-   **UI Library**: I will use shadcn/ui for its accessibility and modern design. Specifically, I'll need `Card` for content blocks, `Button` for interactions, `Input` for practice problems, `Accordion` for the metacognition section, and `Separator` for visual dividers.\n-   **Color Palette**: A professional, educational theme with a neutral base (slate grays, white) and a primary accent color like teal or green for interactive elements and highlights. I will avoid blue and indigo.\n-   **Responsiveness**: The design will be fully responsive, using flexbox and grid layouts to ensure it looks great on desktops, tablets, and mobile devices.\n\n### 3. Images and Media\n\n-   I'll use placeholder images to represent the visual elements required.\n    -   `lab-setup.svg`: A simple diagram of a chemistry lab setup for the \"Concrete\" stage.\n    -   `molecular-models.svg`: Illustrations of the molecules involved (salicylic acid, aspirin) for the \"Representational\" stage.\n    -   `student-scientist.svg`: A friendly character illustration for the introduction to make the page more engaging.\n\n### 4. The Chemistry Problem\n\n-   **Core Problem**: A classic stoichiometry problem—calculating the theoretical yield of aspirin from a known mass of a reactant (salicylic acid). This is a foundational concept in chemistry.\n-   **Near-Transfer Problem**: A similar stoichiometry problem but in a different context (e.g., photosynthesis), requiring the same calculation steps (mass -> moles -> mole ratio -> mass).\n-   **Far-Transfer Problem**: A problem that uses the same proportional reasoning but in a completely different chemistry domain, like gas laws (Boyle's Law: P₁V₁ = P₂V₂). This tests the student's ability to abstract the underlying mathematical model.\n\n### 5. Interactivity and State Management\n\n-   The `PracticeSection` and `TransferProblemsSection` will require user input and state management. I will use React's `useState` hook for this.\n-   These components will be designated as Client Components with the `\"use client\"` directive at the top of their respective files. The rest of the page will be rendered on the server.\n-   Simple logic will be implemented to check the user's answers and provide immediate feedback (e.g., changing border colors to green for correct or red for incorrect).\n\n### 6. Accessibility\n\n-   I will use semantic HTML elements (`<main>`, `<section>`, `<h1>`, etc.).\n-   All images will have descriptive `alt` text.\n-   Interactive form elements (`<input>`, `<button>`) will have associated `<label>`s (sometimes using the `sr-only` class for accessibility).\n-   The use of shadcn/ui components will ensure that accessibility best practices for ARIA roles and keyboard navigation are followed.\n</Thinking>\n\n### Step 1: Set up your Next.js project\n\nFirst, create a new Next.js project with TypeScript and Tailwind CSS.\n\n```bash\nnpx create-next-app@latest . --typescript --eslint --tailwind --app --turbopack --yes\n```\n\n### Step 2: Install shadcn/ui\n\nInitialize shadcn/ui and add the components we'll need.\n\n```bash\nnpx shadcn-ui@latest init\n```\n\nChoose `Default` for the base color, `Slate` for the CSS variables, and accept the other defaults. Then, add the following components:\n\n```bash\nnpx shadcn-ui@latest add card button input accordion separator\n```\n\n### Step 3: Create Placeholder Images\n\nCreate a `public` folder in your project's root directory. Inside `public`, create the following SVG files. You can use any placeholder content.\n\n**`public/student-scientist.svg`**\n```xml\n<svg width=\"100\" height=\"100\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n  <rect width=\"100\" height=\"100\" fill=\"#E2E8F0\"/>\n  <text x=\"50\" y=\"55\" font-family=\"Arial\" font-size=\"12\" text-anchor=\"middle\" fill=\"#475569\">Student</text>\n</svg>\n```\n\n**`public/lab-setup.svg`**\n```xml\n<svg width=\"100\" height=\"100\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n  <rect width=\"100\" height=\"100\" fill=\"#E2E8F0\"/>\n  <text x=\"50\" y=\"55\" font-family=\"Arial\" font-size=\"12\" text-anchor=\"middle\" fill=\"#475569\">Lab Setup</text>\n</svg>\n```\n\n**`public/molecular-models.svg`**\n```xml\n<svg width=\"100\" height=\"100\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n  <rect width=\"100\" height=\"100\" fill=\"#E2E8F0\"/>\n  <text x=\"50\" y=\"55\" font-family=\"Arial\" font-size=\"12\" text-anchor=\"middle\" fill=\"#475569\">Molecules</text>\n</svg>\n```\n\n### Step 4: Create the Components\n\nNow, create the component files inside the `components` directory.\n\n#### `components/IntroductionSection.tsx`\n\n```tsx\nimport Image from 'next/image';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nexport function IntroductionSection() {\n  return (\n    <section id=\"introduction\" className=\"w-full py-12 md:py-20 bg-slate-50\">\n      <div className=\"container mx-auto px-4 md:px-6\">\n        <div className=\"grid gap-6 lg:grid-cols-2 lg:gap-12\">\n          <div className=\"space-y-4\">\n            <div className=\"inline-block rounded-lg bg-teal-100 px-3 py-1 text-sm font-medium text-teal-800\">\n              The Core Problem\n            </div>\n            <h1 className=\"text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl\">\n              From Lab Bench to Medicine Cabinet: Synthesizing Aspirin\n            </h1>\n            <p className=\"max-w-[600px] text-slate-600 md:text-xl/relaxed\">\n              Welcome, scientist! Today, we're stepping into the lab to tackle a real-world chemistry challenge: making aspirin. This process is a perfect example of stoichiometry, a core concept that lets us predict the outcome of chemical reactions.\n            </p>\n          </div>\n          <div className=\"flex justify-center\">\n            <Card className=\"w-full max-w-md\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-4\">\n                  <Image\n                    src=\"/student-scientist.svg\"\n                    alt=\"Student scientist character\"\n                    width={60}\n                    height={60}\n                  />\n                  Your Mission\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2 text-slate-700\">\n                <p>A student reacts <strong>10.0 grams of salicylic acid (C₇H₆O₃)</strong> with excess acetic anhydride (C₄H₆O₃).</p>\n                <p className=\"font-semibold\">Your goal: Calculate the theoretical yield of aspirin (C₉H₈O₄) in grams.</p>\n                <p className=\"text-sm text-slate-500\">This skill is crucial for everything from developing new medicines to manufacturing materials.</p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n```\n\n#### `components/ConceptualStepsSection.tsx`\n\n```tsx\nimport Image from 'next/image';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nexport function ConceptualStepsSection() {\n  return (\n    <section id=\"cra-model\" className=\"w-full py-12 md:py-20\">\n      <div className=\"container mx-auto px-4 md:px-6\">\n        <div className=\"space-y-4 text-center\">\n          <h2 className=\"text-3xl font-bold tracking-tighter sm:text-4xl\">From Concrete to Abstract</h2>\n          <p className=\"mx-auto max-w-[700px] text-slate-600 md:text-xl\">\n            Let's break down the problem by connecting what we see in the lab to the symbols and calculations we use.\n          </p>\n        </div>\n        <div className=\"mx-auto mt-12 grid gap-8 md:grid-cols-3\">\n          <Card>\n            <CardHeader>\n              <CardTitle>1. Concrete: The Lab</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <Image src=\"/lab-setup.svg\" alt=\"Diagram of a lab setup for synthesis\" width={200} height={150} className=\"mx-auto rounded-lg\" />\n              <p>Imagine you're in the lab. You weigh out a white powder (salicylic acid) and mix it with a clear liquid (acetic anhydride). When you heat the mixture, a chemical reaction occurs, forming a new solid: aspirin.</p>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader>\n              <CardTitle>2. Representational: The Molecules</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <Image src=\"/molecular-models.svg\" alt=\"Molecular models of reactants and products\" width={200} height={150} className=\"mx-auto\" />\n              <p>At the particle level, individual molecules are rearranging. A molecule of salicylic acid reacts with a molecule of acetic anhydride to form one molecule of aspirin and one of acetic acid.</p>\n              <div className=\"text-center font-mono p-2 bg-slate-100 rounded\">\n                C₇H₆O₃ + C₄H₆O₃ → C₉H₈O₄ + HC₂H₃O₂\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader>\n              <CardTitle>3. Abstract: The Math</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p>This balanced equation is our recipe. It tells us the <strong>mole ratio</strong> is 1:1. For every 1 mole of salicylic acid, we can make 1 mole of aspirin. We'll use this ratio and molar masses to calculate the final yield.</p>\n              <ul className=\"list-disc pl-5 space-y-1 text-sm\">\n                <li><strong>Molar Mass C₇H₆O₃:</strong> 138.12 g/mol</li>\n                <li><strong>Molar Mass C₉H₈O₄:</strong> 180.16 g/mol</li>\n              </ul>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </section>\n  );\n}\n```\n\n#### `components/ProblemSolvingSection.tsx`\n\n```tsx\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Separator } from '@/components/ui/separator';\n\nexport function ProblemSolvingSection() {\n  const fopsSteps = [\n    {\n      step: 'F',\n      title: 'Find the Core Principle',\n      description: 'The core principle is stoichiometry—the relationship between amounts of reactants and products. We need to convert grams to moles, use the mole ratio, and then convert moles back to grams.',\n    },\n    {\n      step: 'O',\n      title: 'Organize Information',\n      description: 'Let\\'s list what we know and what we need to find.',\n      details: [\n        'Known: 10.0 g of Salicylic Acid (SA)',\n        'Molar Mass of SA: 138.12 g/mol',\n        'Molar Mass of Aspirin (Asp): 180.16 g/mol',\n        'Mole Ratio (SA to Asp): 1:1',\n        'Unknown: mass of Aspirin in grams (?)',\n      ],\n    },\n    {\n      step: 'P',\n      title: 'Plan the Steps',\n      description: 'Our pathway is: Grams of SA → Moles of SA → Moles of Asp → Grams of Asp.',\n    },\n    {\n      step: 'S',\n      title: 'Solve the Problem',\n      description: 'Now, execute the plan step-by-step.',\n      solveSteps: [\n        'Step 1: Convert grams of SA to moles. Moles = Mass / Molar Mass',\n        '10.0 g SA / 138.12 g/mol = 0.0724 mol SA',\n        'Step 2: Use the mole ratio. Since the ratio is 1:1, moles of SA = moles of Asp.',\n        '0.0724 mol SA = 0.0724 mol Asp',\n        'Step 3: Convert moles of Asp to grams. Mass = Moles × Molar Mass',\n        '0.0724 mol Asp × 180.16 g/mol = 13.04 g Asp',\n        'Final Answer: The theoretical yield is 13.0 g of aspirin (rounded to 3 significant figures).',\n      ],\n    },\n  ];\n\n  return (\n    <section id=\"fops\" className=\"w-full py-12 md:py-20 bg-slate-50\">\n      <div className=\"container mx-auto px-4 md:px-6\">\n        <div className=\"space-y-4 text-center\">\n          <h2 className=\"text-3xl font-bold tracking-tighter sm:text-4xl\">A Strategy for Success: F.O.P.S.</h2>\n          <p className=\"mx-auto max-w-[700px] text-slate-600 md:text-xl\">\n            Let's use the F.O.P.S. (Find, Organize, Plan, Solve) method to build our scientific model and solve the problem systematically.\n          </p>\n        </div>\n        <div className=\"mx-auto mt-12 max-w-4xl space-y-8\">\n          {fopsSteps.map((item) => (\n            <Card key={item.step}>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-4\">\n                  <span className=\"flex h-10 w-10 items-center justify-center rounded-full bg-teal-500 text-white font-bold text-xl\">{item.step}</span>\n                  {item.title}\n                </CardTitle>\n                <CardDescription>{item.description}</CardDescription>\n              </CardHeader>\n              {(item.details || item.solveSteps) && (\n                <CardContent>\n                  <Separator className=\"my-4\" />\n                  {item.details && (\n                    <ul className=\"list-disc pl-5 space-y-1 text-slate-700\">\n                      {item.details.map((detail, i) => <li key={i}>{detail}</li>)}\n                    </ul>\n                  )}\n                  {item.solveSteps && (\n                    <div className=\"space-y-2 font-mono text-sm text-slate-800\">\n                      {item.solveSteps.map((s, i) => <p key={i}>{s}</p>)}\n                    </div>\n                  )}\n                </CardContent>\n              )}\n            </Card>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n```\n\n#### `components/PracticeSection.tsx`\n\n```tsx\n'use client';\n\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\n\nexport function PracticeSection() {\n  const [molesSA, setMolesSA] = useState('');\n  const [finalGrams, setFinalGrams] = useState('');\n  const [molesStatus, setMolesStatus] = useState<'unchecked' | 'correct' | 'incorrect'>('unchecked');\n  const [gramsStatus, setGramsStatus] = useState<'unchecked' | 'correct' | 'incorrect'>('unchecked');\n\n  const checkMoles = () => {\n    const userAnswer = parseFloat(molesSA);\n    if (userAnswer >= 0.072 && userAnswer <= 0.073) {\n      setMolesStatus('correct');\n    } else {\n      setMolesStatus('incorrect');\n    }\n  };\n\n  const checkGrams = () => {\n    const userAnswer = parseFloat(finalGrams);\n    if (userAnswer >= 12.9 && userAnswer <= 13.1) {\n      setGramsStatus('correct');\n    } else {\n      setGramsStatus('incorrect');\n    }\n  };\n\n  const getBorderColor = (status: 'unchecked' | 'correct' | 'incorrect') => {\n    if (status === 'correct') return 'border-green-500';\n    if (status === 'incorrect') return 'border-red-500';\n    return '';\n  };\n\n  return (\n    <section id=\"practice\" className=\"w-full py-12 md:py-20\">\n      <div className=\"container mx-auto px-4 md:px-6\">\n        <div className=\"space-y-4 text-center\">\n          <h2 className=\"text-3xl font-bold tracking-tighter sm:text-4xl\">Scaffolded Practice</h2>\n          <p className=\"mx-auto max-w-[700px] text-slate-600 md:text-xl\">\n            Time to try it yourself. Complete the calculations for each step.\n          </p>\n        </div>\n        <Card className=\"mx-auto mt-12 max-w-2xl\">\n          <CardHeader>\n            <CardTitle>Your Turn to Calculate</CardTitle>\n            <CardDescription>Follow the plan we made in the F.O.P.S. section.</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"moles-sa\">Step 1: Calculate moles of Salicylic Acid (SA)</Label>\n              <div className=\"flex items-center gap-2\">\n                <Input\n                  id=\"moles-sa\"\n                  type=\"number\"\n                  placeholder=\"e.g., 0.0724\"\n                  value={molesSA}\n                  onChange={(e) => {\n                    setMolesSA(e.target.value);\n                    setMolesStatus('unchecked');\n                  }}\n                  className={`border-2 ${getBorderColor(molesStatus)}`}\n                />\n                <Button onClick={checkMoles}>Check</Button>\n              </div>\n              {molesStatus === 'correct' && <p className=\"text-sm text-green-600\">Correct! The mole ratio is 1:1, so this is also the number of moles of aspirin.</p>}\n              {molesStatus === 'incorrect' && <p className=\"text-sm text-red-600\">Not quite. Remember: Moles = Mass / Molar Mass (10.0 g / 138.12 g/mol).</p>}\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"grams-asp\">Step 2: Calculate grams of Aspirin (Asp)</Label>\n              <div className=\"flex items-center gap-2\">\n                <Input\n                  id=\"grams-asp\"\n                  type=\"number\"\n                  placeholder=\"e.g., 13.0\"\n                  value={finalGrams}\n                  onChange={(e) => {\n                    setFinalGrams(e.target.value);\n                    setGramsStatus('unchecked');\n                  }}\n                  className={`border-2 ${getBorderColor(gramsStatus)}`}\n                />\n                <Button onClick={checkGrams}>Check Final Answer</Button>\n              </div>\n              {gramsStatus === 'correct' && <p className=\"text-sm text-green-600\">Excellent! You have successfully calculated the theoretical yield.</p>}\n              {gramsStatus === 'incorrect' && <p className=\"text-sm text-red-600\">Almost there. Remember: Mass = Moles × Molar Mass (0.0724 mol × 180.16 g/mol).</p>}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </section>\n  );\n}\n```\n\n#### `components/TransferProblemsSection.tsx`\n\n```tsx\n'use client';\n\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\n\nexport function TransferProblemsSection() {\n  const [nearAnswer, setNearAnswer] = useState('');\n  const [farAnswer, setFarAnswer] = useState('');\n  const [nearStatus, setNearStatus] = useState<'unchecked' | 'correct' | 'incorrect'>('unchecked');\n  const [farStatus, setFarStatus] = useState<'unchecked' | 'correct' | 'incorrect'>('unchecked');\n\n  const checkNearTransfer = () => {\n    const userAnswer = parseFloat(nearAnswer);\n    // Correct answer is 120.0\n    if (userAnswer >= 119 && userAnswer <= 121) {\n      setNearStatus('correct');\n    } else {\n      setNearStatus('incorrect');\n    }\n  };\n\n  const checkFarTransfer = () => {\n    const userAnswer = parseFloat(farAnswer);\n    // Correct answer is 5.0\n    if (userAnswer >= 4.9 && userAnswer <= 5.1) {\n      setFarStatus('correct');\n    } else {\n      setFarStatus('incorrect');\n    }\n  };\n  \n  const getBorderColor = (status: 'unchecked' | 'correct' | 'incorrect') => {\n    if (status === 'correct') return 'border-green-500';\n    if (status === 'incorrect') return 'border-red-500';\n    return '';\n  };\n\n  return (\n    <section id=\"transfer\" className=\"w-full py-12 md:py-20 bg-slate-50\">\n      <div className=\"container mx-auto px-4 md:px-6\">\n        <div className=\"space-y-4 text-center\">\n          <h2 className=\"text-3xl font-bold tracking-tighter sm:text-4xl\">Transfer Your Knowledge</h2>\n          <p className=\"mx-auto max-w-[700px] text-slate-600 md:text-xl\">\n            True understanding means you can apply a concept in new situations. Let's test your skills.\n          </p>\n        </div>\n        <div className=\"mx-auto mt-12 grid gap-8 md:grid-cols-2\">\n          <Card>\n            <CardHeader>\n              <CardTitle>📌 Near-Transfer Problem</CardTitle>\n              <CardDescription>Same structure, different content.</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p>In photosynthesis, 6 moles of CO₂ produce 1 mole of glucose (C₆H₁₂O₆, Molar Mass = 180.16 g/mol). If a plant consumes 50.0 g of CO₂ (Molar Mass = 44.01 g/mol), how many grams of glucose can it produce?</p>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"near-transfer-answer\">Your Answer (grams of glucose):</Label>\n                <div className=\"flex items-center gap-2\">\n                  <Input id=\"near-transfer-answer\" type=\"number\" placeholder=\"Your calculation\" value={nearAnswer} onChange={e => setNearAnswer(e.target.value)} className={`border-2 ${getBorderColor(nearStatus)}`} />\n                  <Button onClick={checkNearTransfer}>Check</Button>\n                </div>\n                {nearStatus === 'correct' && <p className=\"text-sm text-green-600\">Correct! You successfully applied the same mass-mole-mole-mass pathway.</p>}\n                {nearStatus === 'incorrect' && <p className=\"text-sm text-red-600\">Try again. Hint: The mole ratio is 6:1 (CO₂ to glucose).</p>}\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader>\n              <CardTitle>📌 Far-Transfer Problem</CardTitle>\n              <CardDescription>Different surface, same underlying structure.</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p>A gas occupies 10.0 L at 2.0 atm. If it's compressed to a pressure of 4.0 atm (at constant temperature), what is its new volume in Liters? This problem uses proportional reasoning, just like stoichiometry.</p>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"far-transfer-answer\">Your Answer (Volume in L):</Label>\n                <div className=\"flex items-center gap-2\">\n                  <Input id=\"far-transfer-answer\" type=\"number\" placeholder=\"Your calculation\" value={farAnswer} onChange={e => setFarAnswer(e.target.value)} className={`border-2 ${getBorderColor(farStatus)}`} />\n                  <Button onClick={checkFarTransfer}>Check</Button>\n                </div>\n                {farStatus === 'correct' && <p className=\"text-sm text-green-600\">Exactly! You recognized the inverse relationship (P₁V₁ = P₂V₂).</p>}\n                {farStatus === 'incorrect' && <p className=\"text-sm text-red-600\">Not quite. Hint: As pressure doubles, what happens to volume?</p>}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </section>\n  );\n}\n```\n\n#### `components/MetacognitionSection.tsx`\n\n```tsx\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from '@/components/ui/accordion';\n\nexport function MetacognitionSection() {\n  const questions = [\n    {\n      trigger: 'What do I already know?',\n      content: 'I know the starting mass of the reactant, the balanced chemical equation, and the molar masses. I know the goal is to find the mass of the product.',\n    },\n    {\n      trigger: 'What core principles apply here?',\n      content: 'This is a stoichiometry problem. The key principles are the conservation of mass, the concept of the mole, and using mole ratios from a balanced equation to relate reactants and products.',\n    },\n    {\n      trigger: 'How can I check my answer?',\n      content: '1. Did I use the correct molar masses? 2. Is my mole calculation correct (mass/molar mass)? 3. Did I apply the mole ratio correctly? 4. Does my final answer have the correct units (grams)? 5. Is the number of significant figures appropriate (3 in this case)?',\n    },\n  ];\n\n  return (\n    <section id=\"metacognition\" className=\"w-full py-12 md:py-20\">\n      <div className=\"container mx-auto px-4 md:px-6\">\n        <div className=\"space-y-4 text-center\">\n          <h2 className=\"text-3xl font-bold tracking-tighter sm:text-4xl\">Think Like a Scientist</h2>\n          <p className=\"mx-auto max-w-[700px] text-slate-600 md:text-xl\">\n            Great scientists constantly reflect on their thinking. Use these questions to guide your problem-solving process.\n          </p>\n        </div>\n        <div className=\"mx-auto mt-12 max-w-3xl\">\n          <Accordion type=\"single\" collapsible className=\"w-full\">\n            {questions.map((q, i) => (\n              <AccordionItem value={`item-${i + 1}`} key={i}>\n                <AccordionTrigger>{q.trigger}</AccordionTrigger>\n                <AccordionContent>{q.content}</AccordionContent>\n              </AccordionItem>\n            ))}\n          </Accordion>\n        </div>\n      </div>\n    </section>\n  );\n}\n```\n\n### Step 5: Assemble the Page\n\nFinally, update `app/page.tsx` to import and use these components.\n\n#### `app/page.tsx`\n\n```tsx\nimport { IntroductionSection } from '@/components/IntroductionSection';\nimport { ConceptualStepsSection } from '@/components/ConceptualStepsSection';\nimport { ProblemSolvingSection } from '@/components/ProblemSolvingSection';\nimport { PracticeSection } from '@/components/PracticeSection';\nimport { TransferProblemsSection } from '@/components/TransferProblemsSection';\nimport { MetacognitionSection } from '@/components/MetacognitionSection';\nimport { Separator } from '@/components/ui/separator';\n\nexport default function Home() {\n  return (\n    <main className=\"flex flex-col items-center justify-center\">\n      <IntroductionSection />\n      <ConceptualStepsSection />\n      <ProblemSolvingSection />\n      <PracticeSection />\n      <TransferProblemsSection />\n      <MetacognitionSection />\n      <footer className=\"w-full py-6 text-center text-slate-500 bg-slate-50\">\n        <Separator className=\"mb-4\" />\n        <p>Built with v0</p>\n      </footer>\n    </main>\n  );\n}\n```\n\nAnd update `app/layout.tsx` to use a clean font.\n\n#### `app/layout.tsx`\n```tsx\nimport type { Metadata } from \"next\";\nimport { Inter } from \"next/font/google\";\nimport \"./globals.css\";\nimport { cn } from \"@/lib/utils\";\n\nconst inter = Inter({ subsets: [\"latin\"], variable: \"--font-sans\" });\n\nexport const metadata: Metadata = {\n  title: \"Chemistry Problem Solver\",\n  description: \"An educational webpage to teach stoichiometry.\",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\">\n      <body\n        className={cn(\n          \"min-h-screen bg-background font-sans antialiased\",\n          inter.variable\n        )}\n      >\n        {children}\n      </body>\n    </html>\n  );\n}\n```\n\nNow, run your development server:\n\n```bash\nnpm run dev\n```\n\nYour educational chemistry webpage is now live. It guides students from a real-world context through conceptual understanding, step-by-step problem-solving, interactive practice, and finally to transfer tasks that solidify their learning."
}