{
  "content": "<Thinking>\nI need to create a single-page educational website to teach a specific chemistry problem, focusing on building scientific modeling, abstract reasoning, and transfer skills. The user has provided a detailed instructional plan that I must follow.\n\n### 1. Project Structure & Framework\n-   **Framework**: I'll use Next.js with the App Router, as per my core instructions.\n-   **Language**: TypeScript.\n-   **Styling**: Tailwind CSS for a modern, responsive design. I'll use the `shadcn/ui` library for pre-built, accessible components like cards, accordions, buttons, and inputs. This aligns with the request for a visually engaging and well-structured layout.\n-   **File Organization**: I'll break down the single-page application into logical components. This keeps the code clean and manageable, even if it's all rendered on one page. The main page will be `app/page.tsx`, which will import and assemble the various instructional sections.\n\n```\n/\n├── app/\n│   ├── page.tsx            # Main page component that assembles the sections\n│   ├── layout.tsx          # Root layout\n│   └── globals.css         # Global styles\n├── components/\n│   ├── ui/                 # shadcn/ui components (Card, Button, etc.)\n│   ├── Header.tsx          # Page header\n│   ├── Introduction.tsx    # Section 1: Context (Aspirin Synthesis)\n│   ├── ConcretePhase.tsx   # Section 2: Concrete representation (Lab visuals)\n│   ├── RepresentationalPhase.tsx # Section 3: Representational models (Molecules, equations)\n│   ├── AbstractPhase.tsx     # Section 4: The problem statement\n│   ├── FopsStrategy.tsx      # Section 5: Step-by-step solution (F.O.P.S.)\n│   ├── TransferProblems.tsx  # Section 6: Near & Far Transfer problems\n│   ├── Conclusion.tsx      # Section 7: Summary and key takeaways\n│   └── Footer.tsx          # Page footer\n├── lib/\n│   └── utils.ts            # shadcn/ui utility functions\n├── public/                 # Static assets (images, icons)\n│   ├── lab-setup.svg\n│   ├── salicylic-acid.svg\n│   ├── acetic-anhydride.svg\n│   ├── aspirin.svg\n│   └── check-circle.svg\n└── tailwind.config.ts\n└── tsconfig.json\n```\n\n### 2. Core Chemistry Problem & Content\n-   **Main Problem**: A classic stoichiometry problem: Calculating the theoretical yield of aspirin from salicylic acid.\n    -   *Problem*: \"In a laboratory experiment, a student reacts 5.0 grams of salicylic acid (C₇H₆O₃) with excess acetic anhydride to produce aspirin (C₉H₈O₄). What is the theoretical yield of aspirin in grams?\"\n-   **Near-Transfer Problem**: Same structure (stoichiometry), different context.\n    -   *Problem*: \"The reaction between iron(III) oxide and aluminum is used in welding. How many grams of iron (Fe) can be produced from 150 grams of iron(III) oxide (Fe₂O₃)?\"\n-   **Far-Transfer Problem**: Different surface features, same underlying structure (proportional reasoning).\n    -   *Problem*: \"A gas occupies 10.0 L at 2.0 atm. What is its new volume if the pressure is increased to 4.0 atm, assuming temperature remains constant? (Hint: This uses an inverse relationship, P₁V₁ = P₂V₂).\"\n\n### 3. Implementing the Instructional Design\n-   **Context (Introduction.tsx)**: I'll frame the problem around the real-world synthesis of aspirin, a common lab experiment. I'll use a `Card` component and include an illustration of a student in a lab coat to make it more engaging.\n-   **CRA Approach**:\n    -   **Concrete (ConcretePhase.tsx)**: I'll display a clear SVG illustration of the lab setup (beaker, reactants, etc.). The text will connect the visual to the chemical process.\n    -   **Representational (RepresentationalPhase.tsx)**: I'll show 2D molecular structures for the key reactants and products. The balanced chemical equation will be prominently displayed using clear typography. I'll use `Card` components to organize this information.\n    -   **Abstract (AbstractPhase.tsx)**: This section will formally state the problem with all the numerical values and chemical formulas.\n-   **F.O.P.S. Strategy (FopsStrategy.tsx)**: I will use an `Accordion` component from `shadcn/ui`. Each item in the accordion will correspond to a step: Find, Organize, Plan, and Solve.\n    -   **F (Find)**: Identify the core principle (stoichiometry, conservation of mass).\n    -   **O (Organize)**: Set up a table with knowns (mass of salicylic acid) and unknowns (mass of aspirin). I'll calculate and display molar masses here.\n    -   **P (Plan)**: Outline the conversion path: `grams of salicylic acid → moles of salicylic acid → moles of aspirin → grams of aspirin`.\n    -   **S (Solve)**: Show the step-by-step calculations, explaining each conversion. I'll include metacognitive prompts like \"Does the mole ratio make sense?\" and \"Have I checked my units?\".\n-   **Transfer Problems (TransferProblems.tsx)**: This component will contain two sections, one for the near-transfer and one for the far-transfer problem. Each will be in its own `Card`. I will include an interactive element: an input field for the student's answer and a \"Check Answer\" button. Since this requires client-side state, this component will be a Client Component (`\"use client\"`).\n-   **Visuals & Media**: I'll create simple, clean SVG illustrations for the lab setup and molecules. This avoids the need for external image files and ensures they scale well. I'll create these SVGs directly within the JSX of the components.\n\n### 4. Code Generation Plan\n1.  **Initialize Project**: Set up a new Next.js project with Tailwind CSS.\n2.  **Install `shadcn/ui`**: Run the CLI to add `shadcn/ui` and select the necessary components: `Card`, `Accordion`, `Button`, `Input`, `Separator`.\n3.  **Create SVG Icons**: I'll design simple SVGs for the lab equipment and molecules to be used in the components.\n4.  **Build Static Components**: Start with the stateless components: `Header`, `Footer`, `Introduction`, `ConcretePhase`, `RepresentationalPhase`, `AbstractPhase`, `FopsStrategy`, and `Conclusion`. I'll populate them with the planned content.\n5.  **Build Interactive Component**: Create `TransferProblems.tsx` as a Client Component (`\"use client\"`). It will use the `useState` hook to manage user input and feedback for the quiz-like sections.\n6.  **Assemble the Main Page**: In `app/page.tsx`, import all the section components and arrange them in the correct pedagogical order, using `<Separator>` components to visually divide the sections.\n7.  **Styling and Final Touches**: Apply responsive Tailwind classes throughout to ensure the page looks good on all devices. Ensure font sizes, colors, and spacing create a clear and readable learning experience. Add accessibility attributes where needed.\n\nThis plan directly addresses all the user's requirements, translating their instructional design document into a concrete, modern web application structure using Next.js and `shadcn/ui`."
}