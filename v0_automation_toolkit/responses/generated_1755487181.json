{
  "content": "<Thinking>\nI will create a Next.js application that serves as an educational webpage for a chemistry problem.\n\n### 1. Project Structure & File Generation\n\nI will structure the project using the Next.js App Router.\n\n-   `app/layout.tsx`: Root layout with Tailwind CSS.\n-   `app/page.tsx`: The main page that will assemble the different educational sections.\n-   `components/`: Directory for React components.\n    -   `introduction.tsx`: A component to set the real-world context of the problem.\n    -   `core-problem-solver.tsx`: The main interactive component for the core chemistry problem, using a step-by-step guided approach. This will be a client component due to its interactive nature.\n    -   `transfer-tasks.tsx`: A component containing tabs for the near and far transfer problems. This will also be a client component.\n    -   `icons.tsx`: A file to hold custom SVG icons used throughout the app, like a beaker or a brain icon.\n-   `components/ui/`: I will generate the necessary shadcn/ui components.\n    -   `card.tsx`\n    -   `button.tsx`\n    -   `tabs.tsx`\n    -   `accordion.tsx`\n    -   `input.tsx`\n    -   `progress.tsx`\n    -   `separator.tsx`\n    -   `alert.tsx`\n-   `lib/utils.ts`: Standard utility file for `cn` function from shadcn/ui.\n-   `public/`: This directory is not strictly needed as I will embed SVGs directly as React components in `icons.tsx`.\n\n### 2. Styling and Design\n\n-   **Framework**: Tailwind CSS.\n-   **Component Library**: I'll use shadcn/ui for a consistent and clean look. The components (`Card`, `Tabs`, `Accordion`, `Button`, `Input`, `Progress`, `Alert`) are perfect for building the structured, interactive layout required.\n-   **Color Palette**: A neutral, academic theme. I'll use shades of gray for the background and text, with a primary accent color like green for buttons, progress bars, and highlights to guide the user's attention. I will avoid indigo/blue as per my instructions.\n-   **Layout**: A single-column, responsive layout using `Card` components to create distinct sections for the introduction, core problem, and transfer tasks. This will ensure a clear, scrollable flow for the learner.\n-   **Visuals**: I'll create simple SVG icons in `components/icons.tsx` to represent concepts like lab work (beaker), metacognition (brain), and scientific principles. This avoids external dependencies and keeps the project self-contained.\n\n### 3. Pedagogical and Interactive Flow\n\nThe user has provided a very detailed instructional plan, which I will implement as follows:\n\n1.  **Introduction (`introduction.tsx`)**:\n    -   A `Card` will introduce the scenario: synthesizing aspirin.\n    -   It will feature a beaker icon and a friendly tone to engage the student.\n    -   The core problem will be clearly stated.\n\n2.  **Core Problem (`core-problem-solver.tsx`)**:\n    -   This will be the most complex component. It will be a client component (`'use client'`) to manage the state of user inputs and progress.\n    -   I'll implement the **CRA (Concrete-Representational-Abstract)** model:\n        -   **Concrete**: The lab scenario itself.\n        -   **Representational**: I'll include simple SVG diagrams of the reactant (Salicylic Acid) and product (Aspirin) molecules.\n        -   **Abstract**: The step-by-step calculation guided by the **F.O.P.S.** strategy.\n    -   The **F.O.P.S.** strategy will be implemented using an `Accordion` component:\n        -   **Find**: A description of the core principle (Stoichiometry).\n        -   **Organize**: A table showing known and unknown values.\n        -   **Plan**: A clear, step-by-step plan for the calculation.\n        -   **Solve**: An interactive, step-by-step guide with `Input` fields for the student to calculate:\n            1.  Molar mass of Salicylic Acid.\n            2.  Moles of Salicylic Acid.\n            3.  Moles of Aspirin (using mole ratio).\n            4.  Molar mass of Aspirin.\n            5.  Grams of Aspirin (Theoretical Yield).\n        -   I'll use `useState` to manage user input and provide immediate feedback (correct/incorrect). A `Progress` bar will visually track the student's completion of the steps.\n\n3.  **Metacognition (`page.tsx`)**:\n    -   I will place an `Alert` component with a brain icon between the core problem and the transfer tasks. This will display the metacognitive prompts (\"What principle applies here?\", \"How do I check my answer?\") to encourage self-reflection.\n\n4.  **Transfer Tasks (`transfer-tasks.tsx`)**:\n    -   This will be a client component (`'use client'`) using `Tabs` to separate the Near and Far transfer problems.\n    -   Each tab will present a problem and an `Input` field for the answer.\n    -   A \"Check Answer\" `Button` will provide feedback on the student's solution.\n\n### 4. Accessibility and Best Practices\n\n-   I will use semantic HTML (`<main>`, `<section>`, `<h1>`, etc.) to structure the page.\n-   All interactive elements (`<input>`, `<button>`) will have accessible labels.\n-   SVG icons will be decorative or have appropriate ARIA attributes.\n-   The responsive design will ensure usability across different screen sizes.\n-   I will keep components lean and focused on a single responsibility, as per my instructions.\n\nThis plan covers all the user's requirements, translating their instructional design into a concrete, well-structured, and interactive Next.js application while adhering to my core development principles.\n</Thinking>\n\n```bash\nnpx create-next-app@latest . --typescript --eslint --tailwind --app --turbopack --yes\nnpx shadcn-ui@latest init\nnpx shadcn-ui@latest add card button tabs accordion input progress separator alert\n```\n\n```tsx file=\"app/layout.tsx\"\nimport type { Metadata } from \"next\";\nimport { Inter } from \"next/font/google\";\nimport \"./globals.css\";\n\nconst inter = Inter({ subsets: [\"latin\"] });\n\nexport const metadata: Metadata = {\n  title: \"Chemistry Problem Solver\",\n  description: \"An interactive webpage to learn stoichiometry and scientific modeling.\",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\">\n      <body className={`${inter.className} bg-slate-50 text-slate-900`}>\n        {children}\n      </body>\n    </html>\n  );\n}\n```\n\n```tsx file=\"app/page.tsx\"\nimport Introduction from \"@/components/introduction\";\nimport CoreProblemSolver from \"@/components/core-problem-solver\";\nimport TransferTasks from \"@/components/transfer-tasks\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { BrainCircuitIcon } from \"@/components/icons\";\n\nexport default function Home() {\n  return (\n    <main className=\"container mx-auto px-4 py-8 md:py-12\">\n      <header className=\"text-center mb-12\">\n        <h1 className=\"text-4xl md:text-5xl font-extrabold tracking-tight text-slate-800\">\n          Interactive Chemistry Lab\n        </h1>\n        <p className=\"mt-2 text-lg text-slate-600 max-w-2xl mx-auto\">\n          From Concrete Scenarios to Abstract Reasoning: Mastering Stoichiometry\n        </p>\n      </header>\n\n      <div className=\"space-y-12\">\n        <Introduction />\n        <CoreProblemSolver />\n        \n        <section>\n          <Alert>\n            <BrainCircuitIcon className=\"h-5 w-5\" />\n            <AlertTitle className=\"font-bold\">Pause & Reflect!</AlertTitle>\n            <AlertDescription className=\"mt-1 space-y-1\">\n              <p>Before moving on, ask yourself:</p>\n              <ul className=\"list-disc list-inside text-sm text-slate-600\">\n                <li>What was the core principle used to solve the main problem?</li>\n                <li>How did organizing the information help create a plan?</li>\n                <li>Does my final answer seem reasonable? Why?</li>\n              </ul>\n            </AlertDescription>\n          </Alert>\n        </section>\n\n        <TransferTasks />\n      </div>\n\n      <footer className=\"text-center mt-16 text-slate-500\">\n        <p>Built with v0</p>\n      </footer>\n    </main>\n  );\n}\n```\n\n```tsx file=\"components/introduction.tsx\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { BeakerIcon, StudentScientistIcon } from \"@/components/icons\";\n\nexport default function Introduction() {\n  return (\n    <section>\n      <Card className=\"overflow-hidden\">\n        <CardHeader className=\"bg-slate-100 border-b\">\n          <div className=\"flex items-center gap-4\">\n            <BeakerIcon className=\"w-8 h-8 text-green-600\" />\n            <div>\n              <CardTitle className=\"text-2xl\">Understanding the Context</CardTitle>\n              <CardDescription>Connecting lab work to chemical principles.</CardDescription>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"p-6 grid md:grid-cols-3 gap-6\">\n          <div className=\"md:col-span-2\">\n            <h3 className=\"font-bold text-lg text-slate-800\">Scenario: Synthesizing Aspirin</h3>\n            <p className=\"mt-2 text-slate-600\">\n              Imagine you're in a chemistry lab tasked with synthesizing aspirin (acetylsalicylic acid), a common pain reliever. You start with a pure sample of salicylic acid and react it with acetic anhydride.\n            </p>\n            <p className=\"mt-3 text-slate-600\">\n              A crucial skill for any chemist is predicting the amount of product you can create from a given amount of reactant. This is called calculating the <strong className=\"font-semibold text-slate-700\">theoretical yield</strong>. It helps in planning experiments and evaluating their efficiency.\n            </p>\n            <div className=\"mt-4 p-4 bg-green-50 border border-green-200 rounded-lg\">\n              <p className=\"font-semibold text-green-800\">Your Core Problem:</p>\n              <p className=\"mt-1 text-green-700\">\n                If you start with <strong>5.0 grams of salicylic acid (C₇H₆O₃)</strong>, what is the maximum mass of aspirin (C₉H₈O₄) you can possibly make?\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center justify-center bg-slate-100 rounded-lg p-4\">\n            <StudentScientistIcon className=\"w-32 h-32\" />\n          </div>\n        </CardContent>\n      </Card>\n    </section>\n  );\n}\n```\n\n```tsx file=\"components/core-problem-solver.tsx\"\n'use client'\n\nimport { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { CheckCircle, XCircle } from \"lucide-react\";\nimport { AspirinIcon, SalicylicAcidIcon } from \"./icons\";\n\nconst steps = [\n  { id: 1, label: 'Calculate Molar Mass of Salicylic Acid (C₇H₆O₃)', correctAnswer: '138.12', unit: 'g/mol' },\n  { id: 2, label: 'Convert Grams of Salicylic Acid to Moles', correctAnswer: '0.0362', unit: 'mol' },\n  { id: 3, label: 'Determine Moles of Aspirin (C₉H₈O₄) using 1:1 Mole Ratio', correctAnswer: '0.0362', unit: 'mol' },\n  { id: 4, label: 'Calculate Molar Mass of Aspirin (C₉H₈O₄)', correctAnswer: '180.16', unit: 'g/mol' },\n  { id: 5, label: 'Convert Moles of Aspirin to Grams (Theoretical Yield)', correctAnswer: '6.52', unit: 'g' }\n];\n\nexport default function CoreProblemSolver() {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [answers, setAnswers] = useState<Record<number, string>>({});\n  const [feedback, setFeedback] = useState<Record<number, boolean | null>>({});\n\n  const handleInputChange = (stepId: number, value: string) => {\n    setAnswers(prev => ({ ...prev, [stepId]: value }));\n  };\n\n  const checkAnswer = (stepId: number) => {\n    const isCorrect = parseFloat(answers[stepId]).toFixed(stepId === 2 || stepId === 3 ? 4 : 2) === steps[stepId - 1].correctAnswer;\n    setFeedback(prev => ({ ...prev, [stepId]: isCorrect }));\n    if (isCorrect && currentStep <= steps.length) {\n       if (currentStep === stepId) {\n         setCurrentStep(currentStep + 1);\n       }\n    }\n  };\n\n  const progressValue = ((currentStep - 1) / steps.length) * 100;\n\n  return (\n    <section>\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-2xl\">Solving the Core Problem</CardTitle>\n          <CardDescription>Follow the F.O.P.S. strategy to find the theoretical yield.</CardDescription>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          <Accordion type=\"single\" collapsible defaultValue=\"item-1\" className=\"w-full\">\n            <AccordionItem value=\"item-1\">\n              <AccordionTrigger className=\"text-lg font-semibold\">The F.O.P.S. Strategy</AccordionTrigger>\n              <AccordionContent className=\"space-y-4 pt-2\">\n                <div className=\"p-3 bg-slate-50 rounded-md border\">\n                  <p><strong className=\"font-bold text-green-700\">F - Find:</strong> Identify the core chemical principle. This is a <span className=\"font-semibold\">stoichiometry</span> problem, which relies on the law of conservation of mass.</p>\n                </div>\n                <div className=\"p-3 bg-slate-50 rounded-md border\">\n                  <p><strong className=\"font-bold text-green-700\">O - Organize:</strong> List knowns and unknowns.</p>\n                  <ul className=\"list-disc list-inside text-sm mt-1 ml-2 text-slate-600\">\n                      <li><strong>Known:</strong> Mass of Salicylic Acid = 5.0 g</li>\n                      <li><strong>Reaction:</strong> C₇H₆O₃ + C₄H₆O₃ → C₉H₈O₄ + C₂H₄O₂</li>\n                      <li><strong>Unknown:</strong> Mass of Aspirin (g)</li>\n                  </ul>\n                </div>\n                <div className=\"p-3 bg-slate-50 rounded-md border\">\n                  <p><strong className=\"font-bold text-green-700\">P - Plan:</strong> Map your calculation path.</p>\n                  <p className=\"mt-1 text-center font-mono text-sm bg-slate-100 p-2 rounded\">\n                    g Salicylic Acid → mol Salicylic Acid → mol Aspirin → g Aspirin\n                  </p>\n                </div>\n                <div className=\"p-3 bg-green-50 rounded-md border-green-200\">\n                  <p><strong className=\"font-bold text-green-800\">S - Solve:</strong> Execute your plan step-by-step.</p>\n                </div>\n              </AccordionContent>\n            </AccordionItem>\n          </Accordion>\n\n          <Separator className=\"my-6\" />\n\n          <div className=\"mb-4\">\n             <h3 className=\"font-bold text-lg mb-2\">Representational Model</h3>\n             <p className=\"text-sm text-slate-600 mb-4\">Visualize the key molecules in the reaction. The core structure is rearranged.</p>\n             <div className=\"flex items-center justify-center gap-8 p-4 bg-slate-100 rounded-lg\">\n                <div className=\"text-center\">\n                   <SalicylicAcidIcon className=\"w-24 h-24\" />\n                   <p className=\"text-sm font-semibold\">Salicylic Acid (Reactant)</p>\n                </div>\n                <p className=\"text-2xl font-bold text-slate-400\">→</p>\n                 <div className=\"text-center\">\n                   <AspirinIcon className=\"w-24 h-24\" />\n                   <p className=\"text-sm font-semibold\">Aspirin (Product)</p>\n                </div>\n             </div>\n          </div>\n          \n          <Separator className=\"my-6\" />\n\n          <div>\n            <h3 className=\"font-bold text-lg mb-1\">Interactive Solver</h3>\n            <p className=\"text-sm text-slate-600 mb-2\">Enter your calculations below. Round answers to 2-4 decimal places as appropriate.</p>\n            <Progress value={progressValue} className=\"w-full mb-4 h-3\" />\n            <div className=\"space-y-4\">\n              {steps.map(step => (\n                <div key={step.id} className={`p-4 border rounded-lg ${currentStep > step.id ? 'bg-green-50 border-green-200' : 'bg-white'} ${currentStep === step.id ? 'border-green-500 ring-2 ring-green-200' : ''}`}>\n                  <label className=\"font-semibold block mb-2\" htmlFor={`step-${step.id}`}>Step {step.id}: {step.label}</label>\n                  <div className=\"flex items-center gap-2\">\n                    <Input\n                      id={`step-${step.id}`}\n                      type=\"number\"\n                      placeholder=\"Your answer...\"\n                      value={answers[step.id] || ''}\n                      onChange={(e) => handleInputChange(step.id, e.target.value)}\n                      disabled={currentStep < step.id}\n                      className=\"flex-grow\"\n                    />\n                    <span className=\"text-sm text-slate-500\">{step.unit}</span>\n                    <Button onClick={() => checkAnswer(step.id)} disabled={currentStep < step.id || !answers[step.id]}>\n                      Check\n                    </Button>\n                    {feedback[step.id] === true && <CheckCircle className=\"w-6 h-6 text-green-600\" />}\n                    {feedback[step.id] === false && <XCircle className=\"w-6 h-6 text-red-600\" />}\n                  </div>\n                  {feedback[step.id] === false && <p className=\"text-red-600 text-sm mt-1\">Not quite. Try recalculating.</p>}\n                </div>\n              ))}\n            </div>\n            {currentStep > steps.length && (\n              <div className=\"mt-6 p-4 text-center bg-green-100 border border-green-300 rounded-lg\">\n                <h4 className=\"font-bold text-xl text-green-800\">Congratulations!</h4>\n                <p className=\"text-green-700\">You successfully calculated the theoretical yield of aspirin: <strong>6.52 g</strong>.</p>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </section>\n  );\n}\n```\n\n```tsx file=\"components/transfer-tasks.tsx\"\n'use client'\n\nimport { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function TransferTasks() {\n  const [nearAnswer, setNearAnswer] = useState('');\n  const [nearFeedback, setNearFeedback] = useState('');\n  const [farAnswer, setFarAnswer] = useState('');\n  const [farFeedback, setFarFeedback] = useState('');\n\n  const checkNearTransfer = () => {\n    const isCorrect = Math.abs(parseFloat(nearAnswer) - 22.4) < 0.1;\n    setNearFeedback(isCorrect ? 'Correct! You applied the same proportional reasoning.' : 'Not quite. Remember the mass ratio is 5.6:1.');\n  };\n\n  const checkFarTransfer = () => {\n    const isCorrect = Math.abs(parseFloat(farAnswer) - 7.5) < 0.1;\n    setFarFeedback(isCorrect ? 'Excellent! You recognized the inverse relationship (P₁V₁ = P₂V₂).' : 'Check your calculation. As pressure doubles, what happens to volume?');\n  };\n\n  return (\n    <section>\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-2xl\">Apply Your Skills: Transfer Problems</CardTitle>\n          <CardDescription>Test your understanding in new contexts.</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Tabs defaultValue=\"near\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"near\">📌 Near Transfer</TabsTrigger>\n              <TabsTrigger value=\"far\">📌 Far Transfer</TabsTrigger>\n            </TabsList>\n            <TabsContent value=\"near\" className=\"mt-4 p-4 border rounded-md\">\n              <h4 className=\"font-bold\">Problem: Ammonia Synthesis</h4>\n              <p className=\"text-slate-600 mt-1 mb-3\">\n                In the synthesis of ammonia (NH₃), 4.0 g of hydrogen (H₂) reacts completely. The mass ratio of ammonia produced to hydrogen used is approximately 5.6:1. How much ammonia will be formed?\n              </p>\n              <div className=\"flex items-center gap-2\">\n                <Input\n                  type=\"number\"\n                  placeholder=\"Grams of NH₃\"\n                  value={nearAnswer}\n                  onChange={(e) => setNearAnswer(e.target.value)}\n                />\n                <Button onClick={checkNearTransfer}>Check Answer</Button>\n              </div>\n              {nearFeedback && (\n                <p className={`mt-2 text-sm ${nearFeedback.startsWith('Correct') ? 'text-green-600' : 'text-red-600'}`}>{nearFeedback}</p>\n              )}\n            </TabsContent>\n            <TabsContent value=\"far\" className=\"mt-4 p-4 border rounded-md\">\n              <h4 className=\"font-bold\">Problem: Gas Law Application</h4>\n              <p className=\"text-slate-600 mt-1 mb-3\">\n                A sample of gas has a volume of 15.0 L at a pressure of 1.5 atm. If the pressure is increased to 3.0 atm while keeping the temperature constant, what is the new volume? (Hint: This follows Boyle's Law)\n              </p>\n              <div className=\"flex items-center gap-2\">\n                <Input\n                  type=\"number\"\n                  placeholder=\"New volume in L\"\n                  value={farAnswer}\n                  onChange={(e) => setFarAnswer(e.target.value)}\n                />\n                <Button onClick={checkFarTransfer}>Check Answer</Button>\n              </div>\n              {farFeedback && (\n                <p className={`mt-2 text-sm ${farFeedback.startsWith('Excellent') ? 'text-green-600' : 'text-red-600'}`}>{farFeedback}</p>\n              )}\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </section>\n  );\n}\n```\n\n```tsx file=\"components/icons.tsx\"\n// This file contains custom SVG icons for the application.\n\nexport const BeakerIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    {...props}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n  >\n    <path d=\"M4.5 3h15\" />\n    <path d=\"M6 3v16a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V3\" />\n    <path d=\"M6 14h12\" />\n  </svg>\n);\n\nexport const StudentScientistIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg \n    {...props}\n    viewBox=\"0 0 100 100\" \n    xmlns=\"http://www.w3.org/2000/svg\">\n    <g fill=\"none\" stroke=\"currentColor\" strokeWidth=\"3\">\n      {/* Head */}\n      <circle cx=\"50\" cy=\"30\" r=\"15\" fill=\"#f0e4d7\" stroke=\"black\"/>\n      {/* Body */}\n      <path d=\"M 35 45 L 35 80 L 65 80 L 65 45 Z\" fill=\"#ffffff\" stroke=\"black\"/>\n      {/* Lab Coat Lapels */}\n      <path d=\"M 50 45 L 35 60 V 45\" stroke=\"black\" fill=\"white\"/>\n      <path d=\"M 50 45 L 65 60 V 45\" stroke=\"black\" fill=\"white\"/>\n      {/* Eyes */}\n      <circle cx=\"45\" cy=\"30\" r=\"1.5\" fill=\"black\" stroke=\"none\"/>\n      <circle cx=\"55\" cy=\"30\" r=\"1.5\" fill=\"black\" stroke=\"none\"/>\n      {/* Smile */}\n      <path d=\"M 46 36 Q 50 40 54 36\" stroke=\"black\" strokeWidth=\"1.5\" />\n      {/* Goggles */}\n      <rect x=\"38\" y=\"25\" width=\"24\" height=\"8\" rx=\"3\" stroke=\"#4a4a4a\" fill=\"none\" strokeWidth=\"2\"/>\n      <line x1=\"38\" y1=\"29\" x2=\"35\" y2=\"29\" stroke=\"#4a4a4a\" strokeWidth=\"2\" />\n      <line x1=\"62\" y1=\"29\" x2=\"65\" y2=\"29\" stroke=\"#4a4a4a\" strokeWidth=\"2\" />\n    </g>\n  </svg>\n);\n\nexport const BrainCircuitIcon = (props: React.SVGProps<SVGSVGElement>) => (\n    <svg\n      {...props}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      <path d=\"M12 2a4.5 4.5 0 0 0-4.5 4.5v1.4a5.5 5.5 0 0 0-1.5 4.1v0a5.5 5.5 0 0 0 1.5 4.1v1.4A4.5 4.5 0 1 0 12 2z\" />\n      <path d=\"M12 2v20\" />\n      <path d=\"M2 12h20\" />\n      <path d=\"M12 2a4.5 4.5 0 0 1 4.5 4.5v1.4a5.5 5.5 0 0 1 1.5 4.1v0a5.5 5.5 0 0 1-1.5 4.1v1.4A4.5 4.5 0 1 1 12 2z\" />\n      <path d=\"M12 2v20\" />\n      <path d=\"M2 12h20\" />\n    </svg>\n);\n\nexport const SalicylicAcidIcon = (props: React.SVGProps<SVGSVGElement>) => (\n    <svg {...props} viewBox=\"0 0 80 80\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g stroke=\"currentColor\" strokeWidth=\"2\" fill=\"none\">\n            <circle cx=\"40\" cy=\"40\" r=\"20\" />\n            <path d=\"M 40 20 L 57.32 30\" />\n            <path d=\"M 57.32 30 L 57.32 50\" />\n            <path d=\"M 57.32 50 L 40 60\" />\n            <path d=\"M 40 60 L 22.68 50\" />\n            <path d=\"M 22.68 50 L 22.68 30\" />\n            <path d=\"M 22.68 30 L 40 20\" />\n            <path d=\"M 57.32 30 L 70 25 M 70 25 L 75 15 M 70 25 L 75 35\" strokeWidth=\"1.5\" />\n            <path d=\"M 22.68 30 L 10 25 M 10 25 L 5 15 M 10 25 L 15 35\" strokeWidth=\"1.5\" />\n        </g>\n        <text x=\"35\" y=\"45\" fontFamily=\"Arial\" fontSize=\"8\" fill=\"currentColor\">OH</text>\n        <text x=\"58\" y=\"55\" fontFamily=\"Arial\" fontSize=\"8\" fill=\"currentColor\">COOH</text>\n    </svg>\n);\n\nexport const AspirinIcon = (props: React.SVGProps<SVGSVGElement>) => (\n    <svg {...props} viewBox=\"0 0 80 80\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g stroke=\"currentColor\" strokeWidth=\"2\" fill=\"none\">\n            <circle cx=\"40\" cy=\"40\" r=\"20\" />\n            <path d=\"M 40 20 L 57.32 30\" />\n            <path d=\"M 57.32 30 L 57.32 50\" />\n            <path d=\"M 57.32 50 L 40 60\" />\n            <path d=\"M 40 60 L 22.68 50\" />\n            <path d=\"M 22.68 50 L 22.68 30\" />\n            <path d=\"M 22.68 30 L 40 20\" />\n            <path d=\"M 57.32 30 L 70 25 M 72 20 L 68 15 M 72 20 L 77 20\" strokeWidth=\"1.5\" />\n             <path d=\"M 22.68 30 L 10 25 M 10 25 L 5 15 M 10 25 L 15 35\" strokeWidth=\"1.5\" />\n        </g>\n        <text x=\"30\" y=\"45\" fontFamily=\"Arial\" fontSize=\"8\" fill=\"currentColor\">O-COCH₃</text>\n        <text x=\"58\" y=\"55\" fontFamily=\"Arial\" fontSize=\"8\" fill=\"currentColor\">COOH</text>\n    </svg>\n);\n```\n\n```ts file=\"lib/utils.ts\"\nimport { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n```\n\n**Note**: The following `components/ui` files are standard shadcn/ui components. You can generate them with the `npx shadcn-ui@latest add ...` command mentioned at the start of the code block. I am including them for completeness.\n\n```tsx file=\"components/ui/card.tsx\"\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n```\n\n```tsx file=\"components/ui/button.tsx\"\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n```\n\n```tsx file=\"components/ui/tabs.tsx\"\n\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n```\n\n```tsx file=\"components/ui/accordion.tsx\"\n\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDownIcon } from \"@radix-ui/react-icons\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDownIcon className=\"h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n```\n\n```tsx file=\"components/ui/input.tsx\"\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n```\n\n```tsx file=\"components/ui/progress.tsx\"\n\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-2 w-full overflow-hidden rounded-full bg-primary/20\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n```\n\n```tsx file=\"components/ui/separator.tsx\"\n\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n```\n\n```tsx file=\"components/ui/alert.tsx\"\nimport * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n```"
}