{
  "content": "<Thinking>\nI will now begin the planning process for generating the educational chemistry webpage.\n\n**1. Project Structure and File Organization**\n\nThis will be a single-page application built with Next.js and the App Router. The structure will be modular, with each distinct section of the lesson encapsulated in its own component. This keeps the code clean and follows the \"lean files\" rule.\n\n*   `app/layout.tsx`: Root layout for basic HTML structure and Tailwind CSS setup.\n*   `app/page.tsx`: The main entry point that assembles all the lesson components in the correct order.\n*   `components/ui/`: This directory will hold the shadcn/ui components (`accordion`, `card`, `table`, `button`). I will generate the code for these as needed.\n*   `components/HeroSection.tsx`: Introduces the topic with a real-world lab scenario.\n*   `components/ProblemStatement.tsx`: A focused component to present the core problem.\n*   `components/ConceptualCRA.tsx`: Implements the Concrete-Representational-Abstract approach.\n*   `components/ScaffoldedSolutionFOPS.tsx`: Guides the student through solving the problem using the Find, Organize, Plan, Solve (F.O.P.S.) strategy.\n*   `components/MetacognitionCheck.tsx`: A section to prompt students to reflect on their understanding and process.\n*   `components/TransferTasks.tsx`: A client component (`\"use client\"`) that presents the near-transfer and far-transfer problems in an interactive way (e.g., an accordion to hide/show solutions).\n*   `components/Conclusion.tsx`: Summarizes the key learning points.\n*   `lib/utils.ts`: Standard utility file for `cn` from shadcn/ui.\n*   `globals.css` & `tailwind.config.ts`: Standard configuration files for Tailwind CSS.\n\n**2. Styling and Frameworks**\n\n*   **Framework**: Next.js 14 with App Router.\n*   **Language**: TypeScript.\n*   **Styling**: Tailwind CSS for a utility-first, responsive design.\n*   **UI Components**: I will use shadcn/ui for pre-built, accessible components like `Card`, `Accordion`, `Table`, and `Button`. This ensures a professional look and feel while maintaining customizability.\n*   **Icons**: `lucide-react` for simple, clear icons to enhance visual communication (e.g., beakers, lightbulbs, checkmarks).\n\n**3. Images and Media**\n\nI will use SVG-based illustrations directly within the components to represent chemical concepts. This approach is lightweight, scalable, and avoids the need for external image files. I'll create simple SVGs for:\n*   A lab bench with beakers for the context.\n*   Particle diagrams to represent molecules of reactant and product for the \"Representational\" part of the CRA model.\n*   Icons from `lucide-react` to visually punctuate sections.\n\n**4. Interactivity and State Management**\n\n*   The `TransferTasks` component will be the primary interactive element. It needs to manage the state of the accordions (open/closed). Therefore, it will be a Client Component, marked with `\"use client\"`.\n*   The rest of the page can be rendered as a Server Component, which is the default in the App Router. This is efficient as most of the content is static.\n\n**5. Pedagogical Flow and Content Mapping**\n\nI will map the user's instructional plan directly to the component structure:\n\n*   **1. Understand the Context**: Handled by `HeroSection.tsx`. It will describe a student in a lab setting.\n*   **2. Expressing Information (CRA)**: Handled by `ConceptualCRA.tsx`. It will move from a concrete analogy (baking), to representational particle diagrams, to the abstract mass ratio.\n*   **3. Guiding Scientific Models (F.O.P.S)**: Handled by `ScaffoldedSolutionFOPS.tsx`. This component will break down the problem-solving process into the four distinct steps.\n*   **Transfer Tasks (Near & Far)**: Handled by `TransferTasks.tsx`.\n*   **Metacognitive Strategies**: Handled by `MetacognitionCheck.tsx`.\n*   **Teacher Modeling**: The entire webpage's text and structure serve as a form of \"Think Aloud,\" guiding the student as a teacher would. The step-by-step explanations in the F.O.P.S. section are a direct implementation of this.\n\n**6. Accessibility**\n\n*   Use semantic HTML (`<main>`, `<section>`, `<h1>`, `<h2>`, etc.).\n*   All interactive elements from shadcn/ui (`Accordion`, `Button`) are designed with accessibility in mind (ARIA attributes, keyboard navigation).\n*   Provide descriptive text and labels. SVGs will be decorative or have appropriate titles/descriptions if they convey critical information.\n\nBy following this plan, I will create a comprehensive, interactive, and instructionally sound webpage that fulfills all the requirements of the user's prompt. The component-based architecture ensures the final code is maintainable and adheres to best practices.\n\n</Thinking>\n\n```json\n{\n  \"project_name\": \"interactive-chemistry-lesson\",\n  \"project_description\": \"An educational webpage that teaches a chemistry problem about mass ratios, focusing on building scientific modeling, abstract reasoning, and transfer skills.\",\n  \"project_dependencies\": {\n    \"next\": \"14.2.3\",\n    \"react\": \"18\",\n    \"react-dom\": \"18\",\n    \"tailwindcss\": \"3.4.1\",\n    \"typescript\": \"5\",\n    \"autoprefixer\": \"10.4.19\",\n    \"postcss\": \"8.4.38\",\n    \"class-variance-authority\": \"^0.7.0\",\n    \"clsx\": \"^2.1.1\",\n    \"lucide-react\": \"^0.378.0\",\n    \"tailwind-merge\": \"^2.3.0\",\n    \"tailwindcss-animate\": \"^1.0.7\",\n    \"@radix-ui/react-accordion\": \"^1.1.2\",\n    \"@radix-ui/react-slot\": \"^1.0.2\"\n  },\n  \"project_files\": [\n    {\n      \"file_path\": \"components/ui/accordion.tsx\",\n      \"file_content\": \"\"\n    },\n    {\n      \"file_path\": \"components/ui/card.tsx\",\n      \"file_content\": \"\"\n    },\n    {\n      \"file_path\": \"components/ui/table.tsx\",\n      \"file_content\": \"\"\n    },\n    {\n      \"file_path\": \"lib/utils.ts\",\n      \"file_content\": \"\"\n    },\n    {\n      \"file_path\": \"app/globals.css\",\n      \"file_content\": \"\"\n    },\n    {\n      \"file_path\": \"tailwind.config.ts\",\n      \"file_content\": \"\"\n    },\n    {\n      \"file_path\": \"postcss.config.mjs\",\n      \"file_content\": \"\"\n    },\n    {\n      \"file_path\": \"components/HeroSection.tsx\",\n      \"file_content\": \"\"\n    },\n    {\n      \"file_path\": \"components/ProblemStatement.tsx\",\n      \"file_content\": \"\"\n    },\n    {\n      \"file_path\": \"components/ConceptualCRA.tsx\",\n      \"file_content\": \"\"\n    },\n    {\n      \"file_path\": \"components/ScaffoldedSolutionFOPS.tsx\",\n      \"file_content\": \"\"\n    },\n    {\n      \"file_path\": \"components/MetacognitionCheck.tsx\",\n      \"file_content\": \"\"\n    },\n    {\n      \"file_path\": \"components/TransferTasks.tsx\",\n      \"file_content\": \"\"\n    },\n    {\n      \"file_path\": \"components/Conclusion.tsx\",\n      \"file_content\": \"\"\n    },\n    {\n      \"file_path\": \"app/layout.tsx\",\n      \"file_content\": \"\"\n    },\n    {\n      \"file_path\": \"app/page.tsx\",\n      \"file_content\": \"\"\n    }\n  ]\n}\n```\n\n<CodeProject>\n<File path=\"components/ui/accordion.tsx\">'use client'\n\nimport * as React from 'react'\nimport * as AccordionPrimitive from '@radix-ui/react-accordion'\nimport { ChevronDown } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn('border-b', className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = 'AccordionItem'\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        'flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180',\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn('pb-4 pt-0', className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n</File>\n<File path=\"components/ui/card.tsx\">import * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      'rounded-xl border bg-card text-card-foreground shadow',\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = 'Card'\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn('flex flex-col space-y-1.5 p-6', className)}\n    {...props}\n  />\n))\nCardHeader.displayName = 'CardHeader'\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn('font-semibold leading-none tracking-tight', className)}\n    {...props}\n  />\n))\nCardTitle.displayName = 'CardTitle'\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn('text-sm text-muted-foreground', className)}\n    {...props}\n  />\n))\nCardDescription.displayName = 'CardDescription'\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn('p-6 pt-0', className)} {...props} />\n))\nCardContent.displayName = 'CardContent'\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn('flex items-center p-6 pt-0', className)}\n    {...props}\n  />\n))\nCardFooter.displayName = 'CardFooter'\n\nexport { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter }\n</File>\n<File path=\"components/ui/table.tsx\">import * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn('w-full caption-bottom text-sm', className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = 'Table'\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn('[&_tr]:border-b', className)} {...props} />\n))\nTableHeader.displayName = 'TableHeader'\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn('[&_tr:last-child]:border-0', className)}\n    {...props}\n  />\n))\nTableBody.displayName = 'TableBody'\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      'border-t bg-muted/50 font-medium [&>tr]:last:border-b-0',\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = 'TableFooter'\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      'border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted',\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = 'TableRow'\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      'h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0',\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = 'TableHead'\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn('p-4 align-middle [&:has([role=checkbox])]:pr-0', className)}\n    {...props}\n  />\n))\nTableCell.displayName = 'TableCell'\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn('mt-4 text-sm text-muted-foreground', className)}\n    {...props}\n  />\n))\nTableCaption.displayName = 'TableCaption'\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n</File>\n<File path=\"lib/utils.ts\">import { type ClassValue, clsx } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n</File>\n<File path=\"app/globals.css\">@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 47.4% 11.2%;\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 47.4% 11.2%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 47.4% 11.2%;\n    --primary: 222.2 47.4% 11.2%;\n    --primary-foreground: 210 40% 98%;\n    --secondary: 210 40% 96.1%;\n    --secondary-foreground: 222.2 47.4% 11.2%;\n    --muted: 210 40% 96.1%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n    --accent: 210 40% 96.1%;\n    --accent-foreground: 222.2 47.4% 11.2%;\n    --destructive: 0 100% 50%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: 222.2 47.4% 11.2%;\n    --radius: 0.5rem;\n  }\n\n  .dark {\n    --background: 224 71% 4%;\n    --foreground: 213 31% 91%;\n    --card: 224 71% 4%;\n    --card-foreground: 213 31% 91%;\n    --popover: 224 71% 4%;\n    --popover-foreground: 213 31% 91%;\n    --primary: 210 40% 98%;\n    --primary-foreground: 222.2 47.4% 11.2%;\n    --secondary: 215 28% 17%;\n    --secondary-foreground: 210 40% 98%;\n    --muted: 215 28% 17%;\n    --muted-foreground: 215 20% 65%;\n    --accent: 215 28% 17%;\n    --accent-foreground: 210 40% 98%;\n    --destructive: 0 63% 31%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 215 28% 17%;\n    --input: 215 28% 17%;\n    --ring: 216 34% 65%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n  .step-badge {\n    @apply flex h-8 w-8 items-center justify-center rounded-full bg-primary text-primary-foreground font-bold;\n  }\n}\n</File>\n<File path=\"tailwind.config.ts\">import type { Config } from 'tailwindcss'\n\nconst config: Config = {\n  darkMode: ['class'],\n  content: [\n    './pages/**/*.{ts,tsx}',\n    './components/**/*.{ts,tsx}',\n    './app/**/*.{ts,tsx}',\n    './src/**/*.{ts,tsx}',\n  ],\n  theme: {\n    container: {\n      center: true,\n      padding: '2rem',\n      screens: {\n        '2xl': '1400px',\n      },\n    },\n    extend: {\n      colors: {\n        border: 'hsl(var(--border))',\n        input: 'hsl(var(--input))',\n        ring: 'hsl(var(--ring))',\n        background: 'hsl(var(--background))',\n        foreground: 'hsl(var(--foreground))',\n        primary: {\n          DEFAULT: 'hsl(var(--primary))',\n          foreground: 'hsl(var(--primary-foreground))',\n        },\n        secondary: {\n          DEFAULT: 'hsl(var(--secondary))',\n          foreground: 'hsl(var(--secondary-foreground))',\n        },\n        destructive: {\n          DEFAULT: 'hsl(var(--destructive))',\n          foreground: 'hsl(var(--destructive-foreground))',\n        },\n        muted: {\n          DEFAULT: 'hsl(var(--muted))',\n          foreground: 'hsl(var(--muted-foreground))',\n        },\n        accent: {\n          DEFAULT: 'hsl(var(--accent))',\n          foreground: 'hsl(var(--accent-foreground))',\n        },\n        popover: {\n          DEFAULT: 'hsl(var(--popover))',\n          foreground: 'hsl(var(--popover-foreground))',\n        },\n        card: {\n          DEFAULT: 'hsl(var(--card))',\n          foreground: 'hsl(var(--card-foreground))',\n        },\n      },\n      borderRadius: {\n        lg: 'var(--radius)',\n        md: 'calc(var(--radius) - 2px)',\n        sm: 'calc(var(--radius) - 4px)',\n      },\n      keyframes: {\n        'accordion-down': {\n          from: { height: '0' },\n          to: { height: 'var(--radix-accordion-content-height)' },\n        },\n        'accordion-up': {\n          from: { height: 'var(--radix-accordion-content-height)' },\n          to: { height: '0' },\n        },\n      },\n      animation: {\n        'accordion-down': 'accordion-down 0.2s ease-out',\n        'accordion-up': 'accordion-up 0.2s ease-out',\n      },\n    },\n  },\n  plugins: [require('tailwindcss-animate')],\n}\n\nexport default config\n</File>\n<File path=\"postcss.config.mjs\">const config = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n};\n\nexport default config;\n</File>\n<File path=\"components/HeroSection.tsx\">import { Beaker, FlaskConical } from 'lucide-react'\n\nexport default function HeroSection() {\n  return (\n    <section className=\"w-full py-12 md:py-20 bg-muted/40\">\n      <div className=\"container px-4 md:px-6\">\n        <div className=\"grid gap-6 lg:grid-cols-[1fr_400px] lg:gap-12 xl:grid-cols-[1fr_600px]\">\n          <div className=\"flex flex-col justify-center space-y-4\">\n            <div className=\"space-y-2\">\n              <h1 className=\"text-3xl font-bold tracking-tighter sm:text-5xl xl:text-6xl/none\">\n                Mastering Chemical Ratios\n              </h1>\n              <p className=\"max-w-[600px] text-muted-foreground md:text-xl\">\n                Let&apos;s explore a common lab scenario to understand a fundamental concept in chemistry: the Law of Definite Proportions.\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center justify-center\">\n            <div className=\"p-8 bg-background rounded-xl shadow-lg w-full max-w-md\">\n                <div className=\"flex items-end justify-center space-x-4 text-primary\">\n                    <FlaskConical size={80} strokeWidth={1.5} />\n                    <span className=\"text-4xl font-bold\">+</span>\n                    <Beaker size={100} strokeWidth={1.5} />\n                    <span className=\"text-4xl font-bold\">=</span>\n                    <div className=\"relative\">\n                        <FlaskConical size={120} strokeWidth={1.5} className=\"text-green-500\" />\n                        <div className=\"absolute inset-0 top-1/2 bg-green-500/30 rounded-b-lg\"></div>\n                    </div>\n                </div>\n                <p className=\"mt-4 text-center text-sm text-muted-foreground\">\n                    A chemist mixes reactants to form a new product. The amounts aren&apos;t random; they follow a precise recipe, just like in baking!\n                </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  )\n}\n</File>\n<File path=\"components/ProblemStatement.tsx\">import {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription\n} from '@/components/ui/card'\nimport { Target } from 'lucide-react'\n\nexport default function ProblemStatement() {\n  return (\n    <section id=\"problem\" className=\"w-full py-12 md:py-20\">\n      <div className=\"container px-4 md:px-6\">\n        <Card className=\"max-w-3xl mx-auto\">\n          <CardHeader className=\"flex flex-row items-start gap-4\">\n            <div className=\"p-3 rounded-full bg-primary/10 text-primary\">\n              <Target className=\"w-6 h-6\" />\n            </div>\n            <div>\n              <CardTitle className=\"text-2xl\">The Core Problem</CardTitle>\n              <CardDescription>Here is the specific question we will solve together.</CardDescription>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-lg font-medium bg-secondary p-6 rounded-lg\">\n              A chemical reaction produces 15.0 g of a compound when 5.0 g of reactant A is used. The mass ratio between the product and reactant A is 3:1. How much product will form if 8.0 g of reactant A is used?\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    </section>\n  )\n}\n</File>\n<File path=\"components/ConceptualCRA.tsx\">import {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card'\n\nconst Particle = ({ color, isReactant = false }: { color: string, isReactant?: boolean }) => (\n  <svg width=\"60\" height=\"60\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n    <circle cx=\"50\" cy=\"50\" r=\"45\" fill={color} />\n    {isReactant && <text x=\"50\" y=\"60\" fontSize=\"40\" fill=\"white\" textAnchor=\"middle\" fontWeight=\"bold\">A</text>}\n  </svg>\n);\n\nconst ProductMolecule = () => (\n    <svg width=\"100\" height=\"60\" viewBox=\"0 0 150 100\" xmlns=\"http://www.w3.org/2000/svg\">\n        <circle cx=\"50\" cy=\"50\" r=\"45\" fill=\"hsl(var(--primary))\" />\n        <text x=\"50\" y=\"60\" fontSize=\"40\" fill=\"white\" textAnchor=\"middle\" fontWeight=\"bold\">A</text>\n        <circle cx=\"100\" cy=\"50\" r=\"45\" fill=\"hsl(var(--primary))\" />\n         <text x=\"100\" y=\"60\" fontSize=\"40\" fill=\"white\" textAnchor=\"middle\" fontWeight=\"bold\">A</text>\n        <circle cx=\"75\" cy=\"15\" r=\"30\" fill=\"#4ade80\" />\n    </svg>\n)\n\n\nexport default function ConceptualCRA() {\n  return (\n    <section id=\"concepts\" className=\"w-full py-12 md:py-20 bg-muted/40\">\n      <div className=\"container px-4 md:px-6\">\n        <div className=\"mx-auto max-w-4xl text-center\">\n            <h2 className=\"text-3xl font-bold tracking-tighter sm:text-4xl\">From Concrete to Abstract</h2>\n            <p className=\"mt-4 text-muted-foreground md:text-xl\">\n              Let&apos;s build our understanding using the C-R-A approach.\n            </p>\n        </div>\n        <div className=\"mt-10 grid gap-8 md:grid-cols-3\">\n          <Card>\n            <CardHeader>\n              <CardTitle><span className=\"step-badge mr-2\">1</span> Concrete</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-2\">\n              <p>Think about baking. A recipe calls for 2 cups of flour for every 1 cup of sugar. This is a fixed ratio.</p>\n              <p className=\"font-semibold\">If you use 4 cups of flour, you must use 2 cups of sugar. The ratio (2:1) never changes.</p>\n              <p className=\"text-sm text-muted-foreground\">Chemical reactions have fixed recipes too!</p>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader>\n              <CardTitle><span className=\"step-badge mr-2\">2</span> Representational</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p>Imagine particles. Let&apos;s say 1 particle of reactant A has a mass of 'x'. The product has a mass of '3x'.</p>\n              <div className=\"flex items-center justify-around\">\n                <Particle color=\"hsl(var(--primary))\" isReactant={true} />\n                <span>→</span>\n                <ProductMolecule />\n              </div>\n              <p className=\"text-sm text-center text-muted-foreground\">The mass ratio is always 1 part A to 3 parts Product.</p>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader>\n              <CardTitle><span className=\"step-badge mr-2\">3</span> Abstract</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-2\">\n              <p>We use symbols and numbers to represent this \"recipe\".</p>\n              <div className=\"text-lg font-mono p-4 bg-background rounded-md text-center\">\n                Mass of Product / Mass of Reactant A = 3 / 1\n              </div>\n              <p className=\"font-semibold\">This is the Law of Definite Proportions. A compound always contains the same elements in the same proportion by mass.</p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </section>\n  )\n}\n</File>\n<File path=\"components/ScaffoldedSolutionFOPS.tsx\">import {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from '@/components/ui/accordion'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'\nimport { Search, ListOrdered, ClipboardList, CheckCircle } from 'lucide-react'\n\nexport default function ScaffoldedSolutionFOPS() {\n  return (\n    <section id=\"solve\" className=\"w-full py-12 md:py-20\">\n      <div className=\"container px-4 md:px-6\">\n        <div className=\"mx-auto max-w-4xl text-center\">\n          <h2 className=\"text-3xl font-bold tracking-tighter sm:text-4xl\">Let&apos;s Solve It: The F.O.P.S. Method</h2>\n          <p className=\"mt-4 text-muted-foreground md:text-xl\">\n            We'll use a structured approach to break down the problem and solve it step-by-step.\n          </p>\n        </div>\n        <Card className=\"mt-10 max-w-3xl mx-auto\">\n          <CardContent className=\"p-4 md:p-6\">\n            <Accordion type=\"single\" collapsible className=\"w-full\" defaultValue=\"item-1\">\n              <AccordionItem value=\"item-1\">\n                <AccordionTrigger className=\"text-xl font-semibold\">\n                  <div className=\"flex items-center gap-4\">\n                    <Search className=\"h-8 w-8 text-primary\" />\n                    <span>Find the Core Principle</span>\n                  </div>\n                </AccordionTrigger>\n                <AccordionContent className=\"pt-4 pl-12 text-base\">\n                  The problem states a fixed mass ratio (3:1) between a product and a reactant. This tells us the core chemical principle is the <strong>Law of Definite Proportions</strong>. The ratio of masses will be constant, no matter how much reactant we start with.\n                </AccordionContent>\n              </AccordionItem>\n              <AccordionItem value=\"item-2\">\n                <AccordionTrigger className=\"text-xl font-semibold\">\n                  <div className=\"flex items-center gap-4\">\n                    <ListOrdered className=\"h-8 w-8 text-primary\" />\n                    <span>Organize the Information</span>\n                  </div>\n                </AccordionTrigger>\n                <AccordionContent className=\"pt-4 pl-12 text-base\">\n                  Let's list what we know and what we need to find in a table.\n                  <Table className=\"mt-4\">\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Quantity</TableHead>\n                        <TableHead>Value</TableHead>\n                        <TableHead>Type</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      <TableRow>\n                        <TableCell>Mass Ratio (Product : Reactant A)</TableCell>\n                        <TableCell>3 : 1</TableCell>\n                        <TableCell>Known (Constant)</TableCell>\n                      </TableRow>\n                      <TableRow>\n                        <TableCell>Initial Mass of Reactant A</TableCell>\n                        <TableCell>5.0 g</TableCell>\n                        <TableCell>Known (Reference)</TableCell>\n                      </TableRow>\n                      <TableRow>\n                        <TableCell>Initial Mass of Product</TableCell>\n                        <TableCell>15.0 g</TableCell>\n                        <TableCell>Known (Reference)</TableCell>\n                      </TableRow>\n                      <TableRow>\n                        <TableCell>New Mass of Reactant A</TableCell>\n                        <TableCell>8.0 g</TableCell>\n                        <TableCell>Known (New Scenario)</TableCell>\n                      </TableRow>\n                      <TableRow className=\"bg-primary/10\">\n                        <TableCell className=\"font-bold\">New Mass of Product</TableCell>\n                        <TableCell className=\"font-bold\">? ? ?</TableCell>\n                        <TableCell className=\"font-bold\">Unknown (Goal)</TableCell>\n                      </TableRow>\n                    </TableBody>\n                  </Table>\n                </AccordionContent>\n              </AccordionItem>\n              <AccordionItem value=\"item-3\">\n                <AccordionTrigger className=\"text-xl font-semibold\">\n                  <div className=\"flex items-center gap-4\">\n                    <ClipboardList className=\"h-8 w-8 text-primary\" />\n                    <span>Plan the Approach</span>\n                  </div>\n                </AccordionTrigger>\n                <AccordionContent className=\"pt-4 pl-12 text-base space-y-2\">\n                  <p>Since the mass ratio is constant, we can set up a simple proportion.</p>\n                  <p><strong>Plan:</strong></p>\n                  <ol className=\"list-decimal list-inside space-y-1\">\n                    <li>Use the known ratio (3:1) to express the relationship: Mass of Product = 3 × Mass of Reactant A.</li>\n                    <li>Apply this relationship to our new amount of Reactant A (8.0 g).</li>\n                    <li>Calculate the result.</li>\n                  </ol>\n                </AccordionContent>\n              </AccordionItem>\n              <AccordionItem value=\"item-4\">\n                <AccordionTrigger className=\"text-xl font-semibold\">\n                   <div className=\"flex items-center gap-4\">\n                    <CheckCircle className=\"h-8 w-8 text-primary\" />\n                    <span>Solve and Check</span>\n                  </div>\n                </AccordionTrigger>\n                <AccordionContent className=\"pt-4 pl-12 text-base space-y-4\">\n                  <p>Let's execute the plan.</p>\n                  <div className=\"p-4 bg-muted rounded-lg font-mono text-lg\">\n                    Mass of Product = 3 × (Mass of Reactant A)\n                    <br/>\n                    Mass of Product = 3 × (8.0 g)\n                    <br/>\n                    Mass of Product = 24.0 g\n                  </div>\n                  <div className=\"p-4 border-l-4 border-green-500 bg-green-500/10\">\n                    <h4 className=\"font-bold\">Final Answer:</h4>\n                    <p>If 8.0 g of reactant A is used, <strong>24.0 g</strong> of the product will be formed.</p>\n                  </div>\n                  <div>\n                    <h4 className=\"font-bold\">Does it make sense?</h4>\n                    <p>We started with more reactant (8.0 g > 5.0 g), so we should get more product (24.0 g > 15.0 g). The ratio 24.0 / 8.0 is 3, which matches the required 3:1 ratio. The answer is consistent and reasonable.</p>\n                  </div>\n                </AccordionContent>\n              </AccordionItem>\n            </Accordion>\n          </CardContent>\n        </Card>\n      </div>\n    </section>\n  )\n}\n</File>\n<File path=\"components/MetacognitionCheck.tsx\">import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Lightbulb } from 'lucide-react'\n\nexport default function MetacognitionCheck() {\n  return (\n    <section id=\"reflect\" className=\"w-full py-12 md:py-20 bg-muted/40\">\n      <div className=\"container px-4 md:px-6\">\n        <Card className=\"max-w-3xl mx-auto bg-background/70 backdrop-blur-sm\">\n          <CardHeader className=\"flex flex-row items-center gap-4\">\n            <div className=\"p-3 rounded-full bg-yellow-400/20 text-yellow-500\">\n              <Lightbulb className=\"w-6 h-6\" />\n            </div>\n            <CardTitle className=\"text-2xl\">Pause and Reflect</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4 text-base\">\n            <p>Good problem-solvers always think about their thinking. Ask yourself:</p>\n            <ul className=\"list-disc list-inside space-y-2 pl-4 text-muted-foreground\">\n              <li>\n                <strong>What did I know?</strong> I knew the mass ratio was fixed.\n              </li>\n              <li>\n                <strong>What principles apply?</strong> The Law of Definite Proportions was the key.\n              </li>\n              <li>\n                <strong>How did I check my answer?</strong> I made sure the new values still fit the 3:1 ratio and that the answer was logically bigger.\n              </li>\n            </ul>\n            <p>This self-checking process helps you catch errors and build confidence in your scientific reasoning.</p>\n          </CardContent>\n        </Card>\n      </div>\n    </section>\n  )\n}\n</File>\n<File path=\"components/TransferTasks.tsx\">'use client'\n\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from '@/components/ui/accordion'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { BrainCircuit, Repeat } from 'lucide-react'\n\nexport default function TransferTasks() {\n  return (\n    <section id=\"transfer\" className=\"w-full py-12 md:py-20\">\n      <div className=\"container px-4 md:px-6\">\n        <div className=\"mx-auto max-w-4xl text-center\">\n          <h2 className=\"text-3xl font-bold tracking-tighter sm:text-4xl\">Test Your Skills: Transfer Tasks</h2>\n          <p className=\"mt-4 text-muted-foreground md:text-xl\">\n            True understanding means you can apply a concept in new situations. Let&apos;s try two new problems.\n          </p>\n        </div>\n        <div className=\"mt-10 grid gap-8 md:grid-cols-2 max-w-5xl mx-auto\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center gap-3\">\n              <Repeat className=\"w-6 h-6 text-green-600\"/>\n              <CardTitle>📌 Near-Transfer Problem</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"font-medium mb-4\">A reaction produces 12.0 g of a compound when 3.0 g of reactant B is used, and the mass ratio between product and reactant is 4:1. How much product will form from 7.5 g of B?</p>\n              <Accordion type=\"single\" collapsible>\n                <AccordionItem value=\"item-1\">\n                  <AccordionTrigger>Show Solution & Explanation</AccordionTrigger>\n                  <AccordionContent className=\"space-y-2\">\n                    <p><strong>Core Principle:</strong> Same as before! The Law of Definite Proportions.</p>\n                    <p><strong>Ratio:</strong> Product : Reactant B = 4 : 1</p>\n                    <p><strong>Plan:</strong> Mass of Product = 4 × Mass of Reactant B</p>\n                    <div className=\"p-2 bg-muted rounded-md font-mono\">\n                      Mass of Product = 4 × (7.5 g) = 30.0 g\n                    </div>\n                    <p><strong>Explanation:</strong> This problem has different numbers and substances, but the underlying structure is identical. You applied the same proportional reasoning model.</p>\n                  </AccordionContent>\n                </AccordionItem>\n              </Accordion>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"flex flex-row items-center gap-3\">\n              <BrainCircuit className=\"w-6 h-6 text-purple-600\" />\n              <CardTitle>📌 Far-Transfer Problem</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"font-medium mb-4\">A gas occupies 10.0 L at 2.0 atm. What was its original volume if it was compressed to 4.0 atm, assuming temperature and amount of gas remain constant?</p>\n                <Accordion type=\"single\" collapsible>\n                <AccordionItem value=\"item-1\">\n                  <AccordionTrigger>Show Solution & Explanation</AccordionTrigger>\n                  <AccordionContent className=\"space-y-2\">\n                    <p><strong>Core Principle:</strong> Boyle's Law, which describes an inverse relationship.</p>\n                    <p><strong>Relationship:</strong> P₁V₁ = P₂V₂</p>\n                    <p><strong>Plan:</strong> Rearrange the formula to solve for the original volume (V₁).</p>\n                    <div className=\"p-2 bg-muted rounded-md font-mono\">\n                      (2.0 atm) × V₁ = (4.0 atm) × (10.0 L)\n                      <br/>\n                      V₁ = (40.0 atm·L) / (2.0 atm) = 20.0 L\n                    </div>\n                    <p><strong>Explanation:</strong> This looks completely different (gases vs. mass), but it's structurally similar. Both problems rely on a constant relationship between variables (a ratio in the first, a product in the second). You had to abstract the idea of a \"governing rule\" and apply it, which is a key scientific skill.</p>\n                  </AccordionContent>\n                </AccordionItem>\n              </Accordion>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </section>\n  )\n}\n</File>\n<File path=\"components/Conclusion.tsx\">import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Award } from 'lucide-react'\n\nexport default function Conclusion() {\n  return (\n    <section id=\"conclusion\" className=\"w-full py-12 md:py-20 bg-muted/40\">\n      <div className=\"container px-4 md:px-6\">\n        <Card className=\"max-w-3xl mx-auto\">\n          <CardHeader className=\"flex flex-row items-center gap-4\">\n            <div className=\"p-3 rounded-full bg-primary/10 text-primary\">\n              <Award className=\"w-6 h-6\" />\n            </div>\n            <CardTitle className=\"text-2xl\">Key Takeaways</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4 text-base\">\n            <div className=\"p-4 border rounded-lg\">\n              <h3 className=\"font-bold text-lg\">The Big Idea: The Law of Definite Proportions</h3>\n              <p className=\"text-muted-foreground\">A given chemical compound always contains its component elements in fixed ratio (by mass). This is the \"recipe\" for that compound.</p>\n            </div>\n            <div className=\"p-4 border rounded-lg\">\n              <h3 className=\"font-bold text-lg\">The Strategy: F.O.P.S.</h3>\n              <p className=\"text-muted-foreground\">A structured problem-solving method (Find, Organize, Plan, Solve) helps you tackle complex problems confidently and accurately.</p>\n            </div>\n            <div className=\"p-4 border rounded-lg\">\n              <h3 className=\"font-bold text-lg\">The Skill: Transfer</h3>\n              <p className=\"text-muted-foreground\">Recognizing the underlying structure of a problem allows you to apply your knowledge to new and unfamiliar contexts—a critical skill in science.</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </section>\n  )\n}\n</File>\n<File path=\"app/layout.tsx\">import type { Metadata } from 'next'\nimport { Inter } from 'next/font/google'\nimport './globals.css'\nimport { cn } from '@/lib/utils'\n\nconst inter = Inter({ subsets: ['latin'], variable: '--font-sans' })\n\nexport const metadata: Metadata = {\n  title: 'Interactive Chemistry Lesson',\n  description: 'Learn about chemical mass ratios with an interactive guide.',\n}\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body\n        className={cn(\n          'min-h-screen bg-background font-sans antialiased',\n          inter.variable\n        )}\n      >\n        {children}\n      </body>\n    </html>\n  )\n}\n</File>\n<File path=\"app/page.tsx\">import HeroSection from '@/components/HeroSection'\nimport ProblemStatement from '@/components/ProblemStatement'\nimport ConceptualCRA from '@/components/ConceptualCRA'\nimport ScaffoldedSolutionFOPS from '@/components/ScaffoldedSolutionFOPS'\nimport MetacognitionCheck from '@/components/MetacognitionCheck'\nimport TransferTasks from '@/components/TransferTasks'\nimport Conclusion from '@/components/Conclusion'\n\nexport default function Home() {\n  return (\n    <main className=\"flex flex-col items-center justify-center\">\n      <HeroSection />\n      <ProblemStatement />\n      <ConceptualCRA />\n      <ScaffoldedSolutionFOPS />\n      <MetacognitionCheck />\n      <TransferTasks />\n      <Conclusion />\n    </main>\n  )\n}\n</File>\n</CodeProject>"
}