{
  "content": "<Thinking>\nThe user wants me to create an educational webpage to teach a specific chemistry problem.\nThe page needs to be instructionally rich, following a detailed plan provided by the user, which includes:\n-   **Contextualization:** Using a real-world scenario (lab, medical, industrial).\n-   **CRA Approach:** Concrete -> Representational -> Abstract.\n-   **Scaffolding:** Using a F.O.P.S. (Find, Organize, Plan, Solve) strategy.\n-   **Metacognition:** Prompts for self-reflection.\n-   **Transfer Problems:** Both near and far transfer tasks to assess and reinforce learning.\n\nI will invent a chemistry problem that fits these requirements well. A limiting reactant stoichiometry problem is a perfect candidate as it's a common, multi-step concept that students often struggle with.\n\n**The Chemistry Problem:**\n*   **Scenario:** A lab technician is synthesizing aspirin.\n*   **Reactants:** 15.0 g of salicylic acid (C₇H₆O₃) and 10.0 g of acetic anhydride (C₄H₆O₃).\n*   **Reaction:** C₇H₆O₃ + C₄H₆O₃ → C₉H₈O₄ + CH₃COOH\n*   **Goal:** Calculate the theoretical yield (maximum grams) of aspirin (C₉H₈O₄).\n\nNow, I'll plan the project structure and components based on this problem and the user's instructional design.\n\n### Project Structure & File Plan\n\n1.  **`app/layout.tsx`**: Root layout, setting up fonts and basic HTML structure.\n2.  **`app/page.tsx`**: The main page component. This will be a Server Component that imports and renders the main client component.\n3.  **`components/chemistry-tutor.tsx`**: The main client component (`\"use client\"`) that will manage the state and logic for the entire interactive lesson. This keeps the page interactive while following best practices.\n4.  **`components/ui/`**: I'll generate the necessary shadcn/ui components.\n    *   `accordion.tsx`\n    *   `button.tsx`\n    *   `card.tsx`\n    *   `input.tsx`\n    *   `label.tsx`\n    *   `separator.tsx`\n    *   `tabs.tsx`\n5.  **`lib/utils.ts`**: The `cn` utility function for combining Tailwind CSS classes, required by shadcn/ui.\n6.  **`public/`**: I'll use placeholder images from `https://placehold.co` to represent the visual elements described in the plan (lab setting, molecules, diagrams).\n\n### Component Design & Logic (`chemistry-tutor.tsx`)\n\nThis component will be the core of the application.\n\n*   **State Management (`useState`)**:\n    *   State to track user inputs for the F.O.P.S. \"Solve\" section.\n    *   State to manage feedback messages for each step.\n    *   State to reveal answers for the transfer problems.\n*   **Component Breakdown (Internal Structure)**:\n    *   **Introduction:** A hero section with the problem context.\n    *   **CRA Section:** A `Tabs` component for \"Concrete\", \"Representational\", \"Abstract\".\n    *   **F.O.P.S. Section:** An `Accordion` component for \"Find\", \"Organize\", \"Plan\", \"Solve\". The \"Solve\" part will contain interactive `Input` fields and `Button`s.\n    *   **Metacognition Section:** A `Card` with reflective questions.\n    *   **Transfer Section:** Another `Tabs` component for \"Near Transfer\" and \"Far Transfer\" problems, with a button to reveal the solution.\n*   **Styling**: I will use Tailwind CSS utility classes and shadcn/ui components to create a clean, responsive, and visually appealing layout. Colors will be neutral, with green and red used for feedback.\n*   **Accessibility**: I'll use semantic HTML (`<section>`, `<header>`), `aria-` attributes where appropriate, and labels for all form inputs.\n\n### Generating Code\n\nI will now generate the code for each file based on this plan. I'll start with the setup (`utils.ts`, `ui` components), then the layout, and finally the main page and the interactive tutor component. This follows a logical build process.\n\n</Thinking>\nHere is the code for the educational webpage, designed according to your instructional plan.\n\nFirst, let's set up the project. Run this command in your terminal:\n\n```sh\nnpx create-next-app@latest . --typescript --eslint --tailwind --app --turbopack --yes\n```\n\nNext, we'll add the necessary UI components. Create the following directories and files for the shadcn/ui components we'll be using.\n\n**`lib/utils.ts`**\nThis file contains a helper function for conditionally applying CSS classes.\n\n```ts file=\"lib/utils.ts\"\nimport { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n```\n\nNow, create the UI components.\n\n**`components/ui/accordion.tsx`**\n\n```tsx file=\"components/ui/accordion.tsx\"\n\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n```\n\n**`components/ui/button.tsx`**\n\n```tsx file=\"components/ui/button.tsx\"\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n```\n\n**`components/ui/card.tsx`**\n\n```tsx file=\"components/ui/card.tsx\"\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter }\n```\n\n**`components/ui/input.tsx`**\n\n```tsx file=\"components/ui/input.tsx\"\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n```\n\n**`components/ui/label.tsx`**\n\n```tsx file=\"components/ui/label.tsx\"\n\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n```\n\n**`components/ui/separator.tsx`**\n\n```tsx file=\"components/ui/separator.tsx\"\n\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n```\n\n**`components/ui/tabs.tsx`**\n\n```tsx file=\"components/ui/tabs.tsx\"\n\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n```\n\nYou will also need to configure `tailwind.config.ts` for the animations used by the accordion.\n\n```ts file=\"tailwind.config.ts\"\nimport type { Config } from \"tailwindcss\"\n\nconst config = {\n  darkMode: [\"class\"],\n  content: [\n    './pages/**/*.{ts,tsx}',\n    './components/**/*.{ts,tsx}',\n    './app/**/*.{ts,tsx}',\n    './src/**/*.{ts,tsx}',\n\t],\n  prefix: \"\",\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      colors: {\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n} satisfies Config\n\nexport default config\n```\n\nNow, let's create the main components for the page.\n\n**`components/chemistry-tutor.tsx`**\nThis client component contains all the interactive logic and state for the instructional page.\n\n```tsx file=\"components/chemistry-tutor.tsx\"\n\"use client\";\n\nimport React, { useState } from 'react';\nimport Image from 'next/image';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Separator } from '@/components/ui/separator';\nimport { CheckCircle2, XCircle, FlaskConical, Stethoscope, Lightbulb } from 'lucide-react';\n\nexport default function ChemistryTutor() {\n    const [userMolesSalicylic, setUserMolesSalicylic] = useState('');\n    const [feedbackSalicylic, setFeedbackSalicylic] = useState<{ message: string; correct: boolean } | null>(null);\n    const [userMolesAnhydride, setUserMolesAnhydride] = useState('');\n    const [feedbackAnhydride, setFeedbackAnhydride] = useState<{ message: string; correct: boolean } | null>(null);\n    const [userLimitingReactant, setUserLimitingReactant] = useState('');\n    const [feedbackLimiting, setFeedbackLimiting] = useState<{ message: string; correct: boolean } | null>(null);\n    const [userGramsAspirin, setUserGramsAspirin] = useState('');\n    const [feedbackAspirin, setFeedbackAspirin] = useState<{ message: string; correct: boolean } | null>(null);\n    const [showNearTransferSolution, setShowNearTransferSolution] = useState(false);\n    const [showFarTransferSolution, setShowFarTransferSolution] = useState(false);\n\n    const molarMassSalicylic = 138.12;\n    const molarMassAnhydride = 102.09;\n    const molarMassAspirin = 180.16;\n\n    const checkStep1 = () => {\n        const correctMoles = (15.0 / molarMassSalicylic).toFixed(3);\n        if (parseFloat(userMolesSalicylic).toFixed(3) === correctMoles) {\n            setFeedbackSalicylic({ message: `Correct! 15.0g is ${correctMoles} moles.`, correct: true });\n        } else {\n            setFeedbackSalicylic({ message: 'Not quite. Remember: moles = mass / molar mass.', correct: false });\n        }\n    };\n\n    const checkStep2 = () => {\n        const correctMoles = (10.0 / molarMassAnhydride).toFixed(3);\n        if (parseFloat(userMolesAnhydride).toFixed(3) === correctMoles) {\n            setFeedbackAnhydride({ message: `Correct! 10.0g is ${correctMoles} moles.`, correct: true });\n        } else {\n            setFeedbackAnhydride({ message: 'Check your calculation. moles = mass / molar mass.', correct: false });\n        }\n    };\n\n    const checkStep3 = () => {\n        const molesSalicylic = 15.0 / molarMassSalicylic;\n        const molesAnhydride = 10.0 / molarMassAnhydride;\n        const correctLimitingReactant = molesSalicylic > molesAnhydride ? \"acetic anhydride\" : \"salicylic acid\";\n        if (userLimitingReactant.toLowerCase().trim() === correctLimitingReactant) {\n            setFeedbackLimiting({ message: `Exactly! Acetic anhydride will run out first.`, correct: true });\n        } else {\n            setFeedbackLimiting({ message: 'Think again. Which reactant produces fewer moles of aspirin?', correct: false });\n        }\n    };\n\n    const checkStep4 = () => {\n        const molesAnhydride = 10.0 / molarMassAnhydride;\n        const correctGrams = (molesAnhydride * molarMassAspirin).toFixed(2);\n        if (parseFloat(userGramsAspirin).toFixed(2) === correctGrams) {\n            setFeedbackAspirin({ message: `Perfect! The theoretical yield is ${correctGrams} g.`, correct: true });\n        } else {\n            setFeedbackAspirin({ message: 'Almost there. Use the moles of the limiting reactant to find the grams of aspirin.', correct: false });\n        }\n    };\n    \n\n    return (\n        <div className=\"space-y-8\">\n            {/* Section 1: Context */}\n            <Card className=\"overflow-hidden\">\n                <CardHeader className=\"bg-muted/30\">\n                    <div className=\"flex items-start gap-4\">\n                        <Stethoscope className=\"h-10 w-10 text-primary mt-1\" />\n                        <div>\n                            <CardTitle>Your Mission: Synthesizing Aspirin</CardTitle>\n                            <CardDescription>From Lab Bench to Life-Saving Medicine</CardDescription>\n                        </div>\n                    </div>\n                </CardHeader>\n                <CardContent className=\"p-6 text-base\">\n                    <p className=\"mb-4\">\n                        You are a lab technician at a pharmaceutical company. Your task is to synthesize aspirin (C₉H₈O₄), a common pain reliever. The reaction involves mixing <strong>15.0 grams of salicylic acid (C₇H₆O₃)</strong> with <strong>10.0 grams of acetic anhydride (C₄H₆O₃)</strong>.\n                    </p>\n                    <p className=\"mb-4\">\n                        Your goal is to determine the <strong>theoretical yield</strong>: the maximum amount of aspirin (in grams) you can possibly create.\n                    </p>\n                    <div className=\"bg-muted p-4 rounded-lg\">\n                        <p className=\"text-center font-mono text-lg tracking-wider\">\n                            C₇H₆O₃ + C₄H₆O₃ → C₉H₈O₄ + CH₃COOH\n                        </p>\n                    </div>\n                </CardContent>\n            </Card>\n\n            {/* Section 2: CRA Approach */}\n            <Card>\n                <CardHeader>\n                    <CardTitle>Building Understanding: From Concrete to Abstract</CardTitle>\n                </CardHeader>\n                <CardContent>\n                    <Tabs defaultValue=\"concrete\">\n                        <TabsList className=\"grid w-full grid-cols-3\">\n                            <TabsTrigger value=\"concrete\">1. Concrete</TabsTrigger>\n                            <TabsTrigger value=\"representational\">2. Representational</TabsTrigger>\n                            <TabsTrigger value=\"abstract\">3. Abstract</TabsTrigger>\n                        </TabsList>\n                        <TabsContent value=\"concrete\" className=\"mt-4\">\n                            <div className=\"flex flex-col md:flex-row items-center gap-6\">\n                                <Image src=\"https://placehold.co/300x200/e2e8f0/64748b?text=Lab+Experiment\" alt=\"Lab experiment showing mixing of chemicals\" width={300} height={200} className=\"rounded-lg object-cover\"/>\n                                <div>\n                                    <h4 className=\"font-bold text-lg mb-2\">What Do We See?</h4>\n                                    <p>In the lab, you would mix a white crystalline powder (salicylic acid) with a clear, pungent liquid (acetic anhydride). As they react, the mixture might warm up, and eventually, new white crystals of aspirin would form. This is an observable, physical change.</p>\n                                </div>\n                            </div>\n                        </TabsContent>\n                        <TabsContent value=\"representational\" className=\"mt-4\">\n                            <h4 className=\"font-bold text-lg mb-2\">What's Happening at the Molecular Level?</h4>\n                            <p className=\"mb-4\">We can represent this process with models. One molecule of salicylic acid reacts with one molecule of acetic anhydride. But we have trillions of molecules! Since their masses are different, one group of molecules will be used up before the other. This is the \"limiting reactant.\"</p>\n                            <Image src=\"https://placehold.co/600x250/e2e8f0/64748b?text=Particle-Level+Reaction+Diagram\" alt=\"Diagram showing molecules reacting\" width={600} height={250} className=\"rounded-lg mx-auto object-cover\"/>\n                        </TabsContent>\n                        <TabsContent value=\"abstract\" className=\"mt-4\">\n                            <h4 className=\"font-bold text-lg mb-2\">The Language of Chemistry</h4>\n                            <p className=\"mb-4\">The most efficient way to describe the reaction is with a balanced chemical equation. This is the abstract, symbolic representation.</p>\n                             <div className=\"bg-muted p-4 rounded-lg\">\n                                <p className=\"text-center font-mono text-lg tracking-wider\">\n                                    C₇H₆O₃ <span className=\"text-primary font-bold\">+</span> C₄H₆O₃ <span className=\"text-primary font-bold\">→</span> C₉H₈O₄ <span className=\"text-primary font-bold\">+</span> CH₃COOH\n                                </p>\n                            </div>\n                            <p className=\"mt-4\">The equation tells us the <strong>mole ratio</strong> is 1:1:1:1. For every 1 mole of salicylic acid, we need exactly 1 mole of acetic anhydride to react completely. This ratio is the key to solving the problem.</p>\n                        </TabsContent>\n                    </Tabs>\n                </CardContent>\n            </Card>\n\n            {/* Section 3: F.O.P.S Strategy */}\n            <Card>\n                <CardHeader>\n                    <div className=\"flex items-start gap-4\">\n                        <FlaskConical className=\"h-10 w-10 text-primary mt-1\" />\n                        <div>\n                            <CardTitle>A Strategy for Success: F.O.P.S.</CardTitle>\n                            <CardDescription>Find, Organize, Plan, and Solve any chemistry problem.</CardDescription>\n                        </div>\n                    </div>\n                </CardHeader>\n                <CardContent>\n                    <Accordion type=\"single\" collapsible className=\"w-full\">\n                        <AccordionItem value=\"item-1\">\n                            <AccordionTrigger className=\"text-lg\">F - Find the Core Principle</AccordionTrigger>\n                            <AccordionContent>\n                                The core principle here is <strong>Stoichiometry</strong> and identifying the <strong>Limiting Reactant</strong>. We don't have a 1:1 mole ratio of reactants in our flask, so one will run out first, limiting the amount of product we can make.\n                            </AccordionContent>\n                        </AccordionItem>\n                        <AccordionItem value=\"item-2\">\n                            <AccordionTrigger className=\"text-lg\">O - Organize Your Information</AccordionTrigger>\n                            <AccordionContent>\n                                A table is a great way to organize what you know and what you need to find.\n                                <table className=\"w-full mt-2 text-left border-collapse\">\n                                    <thead>\n                                        <tr className=\"bg-muted\">\n                                            <th className=\"p-2 border\">Substance</th>\n                                            <th className=\"p-2 border\">Molar Mass (g/mol)</th>\n                                            <th className=\"p-2 border\">Mass (g)</th>\n                                            <th className=\"p-2 border\">Moles (mol)</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        <tr><td className=\"p-2 border\">Salicylic Acid</td><td className=\"p-2 border\">138.12</td><td className=\"p-2 border\">15.0</td><td className=\"p-2 border font-bold text-primary\">?</td></tr>\n                                        <tr><td className=\"p-2 border\">Acetic Anhydride</td><td className=\"p-2 border\">102.09</td><td className=\"p-2 border\">10.0</td><td className=\"p-2 border font-bold text-primary\">?</td></tr>\n                                        <tr><td className=\"p-2 border\">Aspirin</td><td className=\"p-2 border\">180.16</td><td className=\"p-2 border font-bold text-primary\">?</td><td className=\"p-2 border\"></td></tr>\n                                    </tbody>\n                                </table>\n                            </AccordionContent>\n                        </AccordionItem>\n                        <AccordionItem value=\"item-3\">\n                            <AccordionTrigger className=\"text-lg\">P - Plan Your Approach</AccordionTrigger>\n                            <AccordionContent>\n                                Our roadmap has four main steps:\n                                <ol className=\"list-decimal list-inside mt-2 space-y-1\">\n                                    <li>Convert grams of each reactant to moles.</li>\n                                    <li>Use the 1:1 mole ratio to determine which reactant produces less aspirin. This is the limiting reactant.</li>\n                                    <li>Use the moles of the limiting reactant to calculate the moles of aspirin produced.</li>\n                                    <li>Convert moles of aspirin to grams. This is your theoretical yield.</li>\n                                </ol>\n                            </AccordionContent>\n                        </AccordionItem>\n                        <AccordionItem value=\"item-4\">\n                            <AccordionTrigger className=\"text-lg\">S - Solve the Problem (Interactive)</AccordionTrigger>\n                            <AccordionContent className=\"space-y-6\">\n                                <div className=\"space-y-2\">\n                                    <Label htmlFor=\"step1\"><strong>Step 1:</strong> Calculate moles of Salicylic Acid (C₇H₆O₃).</Label>\n                                    <div className=\"flex items-center gap-2\">\n                                        <Input id=\"step1\" placeholder=\"Enter moles...\" type=\"number\" value={userMolesSalicylic} onChange={e => setUserMolesSalicylic(e.target.value)} />\n                                        <Button onClick={checkStep1}>Check</Button>\n                                    </div>\n                                    {feedbackSalicylic && (\n                                        <div className={`flex items-center gap-2 text-sm ${feedbackSalicylic.correct ? 'text-green-600' : 'text-red-600'}`}>\n                                            {feedbackSalicylic.correct ? <CheckCircle2 className=\"h-4 w-4\" /> : <XCircle className=\"h-4 w-4\" />}\n                                            {feedbackSalicylic.message}\n                                        </div>\n                                    )}\n                                </div>\n                                <div className=\"space-y-2\">\n                                    <Label htmlFor=\"step2\"><strong>Step 2:</strong> Calculate moles of Acetic Anhydride (C₄H₆O₃).</Label>\n                                    <div className=\"flex items-center gap-2\">\n                                        <Input id=\"step2\" placeholder=\"Enter moles...\" type=\"number\" value={userMolesAnhydride} onChange={e => setUserMolesAnhydride(e.target.value)} />\n                                        <Button onClick={checkStep2}>Check</Button>\n                                    </div>\n                                    {feedbackAnhydride && (\n                                        <div className={`flex items-center gap-2 text-sm ${feedbackAnhydride.correct ? 'text-green-600' : 'text-red-600'}`}>\n                                            {feedbackAnhydride.correct ? <CheckCircle2 className=\"h-4 w-4\" /> : <XCircle className=\"h-4 w-4\" />}\n                                            {feedbackAnhydride.message}\n                                        </div>\n                                    )}\n                                </div>\n                                <div className=\"space-y-2\">\n                                    <Label htmlFor=\"step3\"><strong>Step 3:</strong> Determine the Limiting Reactant.</Label>\n                                    <p className=\"text-sm text-muted-foreground\">Based on your mole calculations, which reactant will be used up completely?</p>\n                                    <div className=\"flex items-center gap-2\">\n                                        <Input id=\"step3\" placeholder=\"Enter full name of reactant...\" value={userLimitingReactant} onChange={e => setUserLimitingReactant(e.target.value)} />\n                                        <Button onClick={checkStep3}>Check</Button>\n                                    </div>\n                                    {feedbackLimiting && (\n                                        <div className={`flex items-center gap-2 text-sm ${feedbackLimiting.correct ? 'text-green-600' : 'text-red-600'}`}>\n                                            {feedbackLimiting.correct ? <CheckCircle2 className=\"h-4 w-4\" /> : <XCircle className=\"h-4 w-4\" />}\n                                            {feedbackLimiting.message}\n                                        </div>\n                                    )}\n                                </div>\n                                <div className=\"space-y-2\">\n                                    <Label htmlFor=\"step4\"><strong>Step 4:</strong> Calculate the theoretical yield of Aspirin (C₉H₈O₄) in grams.</Label>\n                                    <div className=\"flex items-center gap-2\">\n                                        <Input id=\"step4\" placeholder=\"Enter grams...\" type=\"number\" value={userGramsAspirin} onChange={e => setUserGramsAspirin(e.target.value)} />\n                                        <Button onClick={checkStep4}>Check</Button>\n                                    </div>\n                                    {feedbackAspirin && (\n                                        <div className={`flex items-center gap-2 text-sm ${feedbackAspirin.correct ? 'text-green-600' : 'text-red-600'}`}>\n                                            {feedbackAspirin.correct ? <CheckCircle2 className=\"h-4 w-4\" /> : <XCircle className=\"h-4 w-4\" />}\n                                            {feedbackAspirin.message}\n                                        </div>\n                                    )}\n                                </div>\n                            </AccordionContent>\n                        </AccordionItem>\n                    </Accordion>\n                </CardContent>\n            </Card>\n\n            {/* Section 4: Metacognition */}\n            <Card>\n                <CardHeader>\n                    <div className=\"flex items-start gap-4\">\n                        <Lightbulb className=\"h-10 w-10 text-primary mt-1\" />\n                        <div>\n                            <CardTitle>Pause and Reflect</CardTitle>\n                            <CardDescription>Good scientists always check their thinking.</CardDescription>\n                        </div>\n                    </div>\n                </CardHeader>\n                <CardContent>\n                    <ul className=\"list-disc list-inside space-y-2\">\n                        <li><strong>What do I know?</strong> I started with the mass of two reactants and a balanced equation.</li>\n                        <li><strong>What principles apply?</strong> The law of conservation of mass, mole conversions, and the concept of a limiting reactant.</li>\n                        <li><strong>How do I check my answer?</strong> The final mass of the product should be less than the total mass of the reactants (15.0 + 10.0 = 25.0 g). My answer should be a reasonable number. I also re-checked my calculations for molar mass and mole conversions.</li>\n                    </ul>\n                </CardContent>\n            </Card>\n\n            <Separator />\n\n            {/* Section 5: Transfer Skills */}\n            <div className=\"text-center\">\n                <h2 className=\"text-3xl font-bold tracking-tight\">Transfer Your Skills</h2>\n                <p className=\"text-muted-foreground mt-2\">Apply the F.O.P.S. strategy to new challenges.</p>\n            </div>\n\n            <Tabs defaultValue=\"near-transfer\">\n                <TabsList className=\"grid w-full grid-cols-2\">\n                    <TabsTrigger value=\"near-transfer\">📌 Near Transfer</TabsTrigger>\n                    <TabsTrigger value=\"far-transfer\">📌 Far Transfer</TabsTrigger>\n                </TabsList>\n                <TabsContent value=\"near-transfer\">\n                    <Card>\n                        <CardHeader>\n                            <CardTitle>Same Structure, Different Content</CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                            <p className=\"mb-4\">In an industrial process, ammonia (NH₃) is synthesized from nitrogen (N₂) and hydrogen (H₂). If you start with <strong>56.0 g of N₂</strong> and <strong>15.0 g of H₂</strong>, what is the theoretical yield of ammonia in grams?</p>\n                            <div className=\"bg-muted p-4 rounded-lg mb-4\">\n                                <p className=\"text-center font-mono text-lg tracking-wider\">\n                                    N₂ + 3H₂ → 2NH₃\n                                </p>\n                            </div>\n                            <Button variant=\"outline\" onClick={() => setShowNearTransferSolution(!showNearTransferSolution)}>\n                                {showNearTransferSolution ? 'Hide' : 'Show'} Solution\n                            </Button>\n                            {showNearTransferSolution && (\n                                <div className=\"mt-4 p-4 bg-muted/50 rounded-lg\">\n                                    <p><strong>F:</strong> Limiting reactant stoichiometry.</p>\n                                    <p><strong>O:</strong> N₂ = 56.0g, H₂ = 15.0g. Molar masses: N₂ ≈ 28.02 g/mol, H₂ ≈ 2.02 g/mol, NH₃ ≈ 17.03 g/mol.</p>\n                                    <p><strong>P:</strong> Grams → Moles → Limiting Reactant → Moles Product → Grams Product.</p>\n                                    <p><strong>S:</strong> 56.0g N₂ is ~2.0 moles. 15.0g H₂ is ~7.4 moles. The 1:3 ratio means H₂ is the limiting reactant. Yield ≈ <strong>67.4 g NH₃</strong>.</p>\n                                </div>\n                            )}\n                        </CardContent>\n                    </Card>\n                </TabsContent>\n                <TabsContent value=\"far-transfer\">\n                     <Card>\n                        <CardHeader>\n                            <CardTitle>Different Surface, Same Underlying Structure</CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                            <p className=\"mb-4\">A bicycle factory has <strong>400 wheels</strong> and <strong>150 frames</strong> in stock. Each bicycle requires 2 wheels and 1 frame. What is the maximum number of complete bicycles the factory can produce?</p>\n                            <Button variant=\"outline\" onClick={() => setShowFarTransferSolution(!showFarTransferSolution)}>\n                               {showFarTransferSolution ? 'Hide' : 'Show'} Solution\n                            </Button>\n                             {showFarTransferSolution && (\n                                <div className=\"mt-4 p-4 bg-muted/50 rounded-lg\">\n                                    <p>This is a limiting reactant problem in disguise!</p>\n                                    <p><strong>\"Reactants\":</strong> Wheels and frames.</p>\n                                    <p><strong>\"Product\":</strong> Bicycles.</p>\n                                    <p><strong>\"Mole Ratio\":</strong> 2 wheels : 1 frame → 1 bicycle.</p>\n                                    <p><strong>Analysis:</strong> 400 wheels can make 400/2 = 200 bikes. 150 frames can make 150/1 = 150 bikes. The frames are the \"limiting reactant.\"</p>\n                                    <p><strong>Answer:</strong> The factory can produce a maximum of <strong>150 bicycles</strong>.</p>\n                                </div>\n                            )}\n                        </CardContent>\n                    </Card>\n                </TabsContent>\n            </Tabs>\n        </div>\n    );\n}\n```\n\n**`app/layout.tsx`**\nThis is the root layout for your application.\n\n```tsx file=\"app/layout.tsx\"\nimport type { Metadata } from \"next\";\nimport { Inter } from \"next/font/google\";\nimport \"./globals.css\";\n\nconst inter = Inter({ subsets: [\"latin\"] });\n\nexport const metadata: Metadata = {\n  title: \"Chemistry Problem Solver\",\n  description: \"An interactive page to learn stoichiometry and limiting reactants.\",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\">\n      <body className={inter.className}>{children}</body>\n    </html>\n  );\n}\n```\n\n**`app/page.tsx`**\nThis is the main page that renders the interactive tutor.\n\n```tsx file=\"app/page.tsx\"\nimport ChemistryTutor from \"@/components/chemistry-tutor\";\n\nexport default function Home() {\n  return (\n    <main className=\"bg-background text-foreground\">\n      <div className=\"container mx-auto max-w-4xl py-12 px-4\">\n        <header className=\"text-center mb-12\">\n          <h1 className=\"text-4xl md:text-5xl font-extrabold tracking-tight\">\n            Mastering Stoichiometry\n          </h1>\n          <p className=\"mt-3 text-lg text-muted-foreground\">\n            An Interactive Guide to Solving Chemistry Problems\n          </p>\n        </header>\n\n        <ChemistryTutor />\n\n        <footer className=\"text-center mt-16 text-muted-foreground text-sm\">\n          <p>Built with Next.js and the principles of guided learning.</p>\n        </footer>\n      </div>\n    </main>\n  );\n}\n```\n\nFinally, ensure your `globals.css` file is set up for Tailwind CSS and shadcn/ui theming.\n\n**`app/globals.css`**\n\n```css file=\"app/globals.css\"\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 84% 4.9%;\n\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 84% 4.9%;\n \n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 84% 4.9%;\n \n    --primary: 222.2 47.4% 11.2%;\n    --primary-foreground: 210 40% 98%;\n \n    --secondary: 210 40% 96.1%;\n    --secondary-foreground: 222.2 47.4% 11.2%;\n \n    --muted: 210 40% 96.1%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n \n    --accent: 210 40% 96.1%;\n    --accent-foreground: 222.2 47.4% 11.2%;\n \n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 210 40% 98%;\n\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: 222.2 84% 4.9%;\n \n    --radius: 0.5rem;\n  }\n \n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n \n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n \n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n \n    --primary: 210 40% 98%;\n    --primary-foreground: 222.2 47.4% 11.2%;\n \n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n \n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n \n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n \n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n \n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 212.7 26.8% 83.9%;\n  }\n}\n \n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n```\n\nAfter creating all these files, install the necessary dependencies:\n\n```sh\nnpm install lucide-react @radix-ui/react-accordion @radix-ui/react-label @radix-ui/react-separator @radix-ui/react-slot @radix-ui/react-tabs class-variance-authority clsx tailwind-merge tailwindcss-animate\n```\n\nNow, run `npm run dev` to see your interactive educational webpage."
}